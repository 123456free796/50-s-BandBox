var beepbox=function(t){"use strict";
/*!
    Copyright (C) 2021 John Nesky

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */class e{}function n(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];const n=e/t.length;for(let e=0;e<t.length;e++)t[e]-=n;return s(t),t.push(0),new Float64Array(t)}function s(t){let e=0;for(let n=0;n<t.length;n++){const s=t[n];t[n]=e,e+=s}}function i(t){return.5*Math.pow(.5,(e.pulseWidthRange-1-t)*e.pulseWidthStepPower)}function a(t,n,s){let i=e.chipNoises[t].samples;if(null==i){if(i=new Float32Array(e.chipNoiseLength+1),e.chipNoises[t].samples=i,0==t){let t=1;for(let n=0;n<e.chipNoiseLength;n++){i[n]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=16384),t=e}}else if(1==t)for(let t=0;t<e.chipNoiseLength;t++)i[t]=2*Math.random()-1;else if(2==t){let t=1;for(let n=0;n<e.chipNoiseLength;n++){i[n]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=32768),t=e}}else if(3==t){let t=1;for(let n=0;n<e.chipNoiseLength;n++){i[n]=2*(1&t)-1;let e=t>>1;1==(t+e&1)&&(e+=40),t=e}}else{if(4!=t)throw new Error("Unrecognized drum index: "+t);r(i,e.chipNoiseLength,10,11,1,1,0),r(i,e.chipNoiseLength,11,14,.6578,.6578,0),n(i,e.chipNoiseLength),s(i,1/Math.sqrt(e.chipNoiseLength))}i[e.chipNoiseLength]=i[0]}return i}function r(t,e,n,s,i,r,o){const h=0|Math.pow(2,n),l=Math.min(e>>1,0|Math.pow(2,s)),c=a(0,null,null);let u=0;for(let a=h;a<l;a++){let h=i+(r-i)*(Math.log2(a)-n)/(s-n),l=Math.pow(2,7*(h-1)+1)*h;l*=Math.pow(a/2048,o),u+=l,l*=c[a];const p=.61803398875*a*a*Math.PI*2;t[a]=Math.cos(p)*l,t[e-a]=Math.sin(p)*l}return u}function o(t,n,s){const i=e.rhythms[n].arpeggioPatterns[t-1];return null!=i?i[s%i.length]:s%t}function h(t){const e={};for(let n=0;n<t.length;n++){const s=t[n];s.index=n,e[s.name]=s}const n=t;return n.dictionary=e,n}function l(t){return 0!=(1024&t)}function c(t){return 0!=(2048&t)}function u(t){return 0!=(128&t)}function p(t){return 0!=(256&t)}function f(t){return 0!=(512&t)}function d(t){return 0!=(32&t)}function m(t){return 0!=(8&t)}function y(t){return 0!=(16&t)}function S(t){return 0!=(4&t)}function g(t){return 0!=(2&t)}function b(t){return 0!=(64&t)}function v(t){return 0!=(1&t)}e.scales=h([{name:"easy :)",realName:"pentatonic major",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"easy :(",realName:"pentatonic minor",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"island :)",realName:"ryukyu",flags:[!0,!1,!1,!1,!0,!0,!1,!0,!1,!1,!1,!0]},{name:"island :(",realName:"pelog selisir",flags:[!0,!0,!1,!0,!1,!1,!1,!0,!0,!1,!1,!1]},{name:"blues :)",realName:"blues major",flags:[!0,!1,!0,!0,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"blues :(",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"normal :)",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"normal :(",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"dbl harmonic :)",realName:"double harmonic major",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"dbl harmonic :(",realName:"double harmonic minor",flags:[!0,!1,!0,!0,!1,!1,!0,!0,!0,!1,!1,!0]},{name:"strange",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"expert",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]}]),e.keys=h([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),e.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],e.tempoMin=30,e.tempoMax=300,e.echoDelayRange=24,e.echoDelayStepTicks=4,e.echoSustainRange=8,e.echoShelfHz=4e3,e.echoShelfGain=Math.pow(2,-.5),e.reverbShelfHz=8e3,e.reverbShelfGain=Math.pow(2,-1.5),e.reverbRange=4,e.reverbDelayBufferSize=16384,e.reverbDelayBufferMask=e.reverbDelayBufferSize-1,e.beatsPerBarMin=3,e.beatsPerBarMax=16,e.barCountMin=1,e.barCountMax=128,e.instrumentCountMin=1,e.layeredInstrumentCountMax=4,e.patternInstrumentCountMax=10,e.partsPerBeat=24,e.ticksPerPart=2,e.rhythms=h([{name:"÷3 (triplets)",stepsPerBeat:3,ticksPerArpeggio:4,arpeggioPatterns:[[0],[0,0,1,1],[0,1,2,1]],roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,0,1,1],[0,1,2,1]],roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,ticksPerArpeggio:4,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,ticksPerArpeggio:3,arpeggioPatterns:[[0],[0,1],[0,1,2,1]],roundUpThresholds:null}]),e.instrumentTypeNames=["chip","FM","noise","spectrum","drumset","harmonics","PWM","Picked String"],e.instrumentTypeHasSpecialInterval=[!0,!0,!1,!1,!1,!0,!1,!1],e.chipBaseExpression=.03375,e.fmBaseExpression=.03,e.noiseBaseExpression=.19,e.spectrumBaseExpression=.3,e.drumsetBaseExpression=.45,e.harmonicsBaseExpression=.025,e.pwmBaseExpression=.04725,e.pickedStringBaseExpression=.025,e.distortionBaseVolume=.011,e.bitcrusherBaseVolume=.01,e.chipWaves=h([{name:"rounded",expression:.94,samples:n([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",expression:1,samples:n([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15])},{name:"square",expression:.5,samples:n([1,-1])},{name:"1/4 pulse",expression:.5,samples:n([1,-1,-1,-1])},{name:"1/8 pulse",expression:.5,samples:n([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",expression:.65,samples:n([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",expression:.5,samples:n([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",expression:.4,samples:n([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",expression:.4,samples:n([1,-1,1,-1,1,0])}]),e.chipNoises=h([{name:"retro",expression:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",expression:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",expression:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",expression:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null}]),e.filterFreqStep=1/4,e.filterFreqRange=34,e.filterFreqReferenceSetting=28,e.filterFreqReferenceHz=8e3,e.filterFreqMaxHz=e.filterFreqReferenceHz*Math.pow(2,e.filterFreqStep*(e.filterFreqRange-1-e.filterFreqReferenceSetting)),e.filterFreqMinHz=8,e.filterGainRange=15,e.filterGainCenter=7,e.filterGainStep=.5,e.filterMaxPoints=8,e.filterTypeNames=["low-pass","high-pass","peak"],e.fadeInRange=10,e.fadeOutTicks=[-24,-12,-6,-3,-1,6,12,24,48,72,96],e.fadeOutNeutral=4,e.drumsetFadeOutTicks=48,e.transitions=h([{name:"normal",isSeamless:!1,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!1},{name:"interrupt",isSeamless:!0,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"continue",isSeamless:!0,continues:!0,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide in pattern",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!1}]),e.vibratos=h([{name:"none",amplitude:0,periodsSeconds:[.14],delayTicks:0},{name:"light",amplitude:.15,periodsSeconds:[.14],delayTicks:0},{name:"delayed",amplitude:.3,periodsSeconds:[.14],delayTicks:37},{name:"heavy",amplitude:.45,periodsSeconds:[.14],delayTicks:0},{name:"shaky",amplitude:.1,periodsSeconds:[.11,.17798,.33],delayTicks:0}]),e.unisons=h([{name:"none",voices:1,spread:0,offset:0,expression:1.4,sign:1},{name:"shimmer",voices:2,spread:.018,offset:0,expression:.8,sign:1},{name:"hum",voices:2,spread:.045,offset:0,expression:1,sign:1},{name:"honky tonk",voices:2,spread:.09,offset:0,expression:1,sign:1},{name:"dissonant",voices:2,spread:.25,offset:0,expression:.9,sign:1},{name:"fifth",voices:2,spread:3.5,offset:3.5,expression:.9,sign:1},{name:"octave",voices:2,spread:6,offset:6,expression:.8,sign:1},{name:"bowed",voices:2,spread:.02,offset:0,expression:1,sign:-1},{name:"piano",voices:2,spread:.01,offset:0,expression:1,sign:.7}]),e.effectNames=["reverb","chorus","panning","distortion","bitcrusher","note filter","echo","pitch shift","detune","vibrato","transition type","chord type"],e.effectOrder=[10,11,7,8,9,5,3,4,2,1,6,0],e.noteSizeMax=3,e.volumeRange=8,e.volumeLogScale=-.5,e.panCenter=4,e.panMax=2*e.panCenter,e.panDelaySecondsMax=5e-4,e.chorusRange=4,e.chorusPeriodSeconds=2,e.chorusDelayRange=.0034,e.chorusDelayOffsets=[[1.51,2.1,3.35],[1.47,2.15,3.25]],e.chorusPhaseOffsets=[[0,2.1,4.2],[3.2,5.3,1]],e.chorusMaxDelay=e.chorusDelayRange*(1+e.chorusDelayOffsets[0].concat(e.chorusDelayOffsets[1]).reduce(((t,e)=>Math.max(t,e)))),e.chords=h([{name:"simultaneous",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!1},{name:"strum",customInterval:!1,arpeggiates:!1,strumParts:1,singleTone:!1},{name:"arpeggio",customInterval:!1,arpeggiates:!0,strumParts:0,singleTone:!0},{name:"custom interval",customInterval:!0,arpeggiates:!1,strumParts:0,singleTone:!0}]),e.maxChordSize=4,e.operatorCount=4,e.algorithms=h([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]}]),e.operatorCarrierInterval=[0,.04,-.073,.091],e.operatorAmplitudeMax=15,e.operatorFrequencies=h([{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1}]),e.envelopes=h([{name:"none",type:1,speed:0},{name:"note size",type:0,speed:0},{name:"punch",type:2,speed:0},{name:"flare 1",type:3,speed:32},{name:"flare 2",type:3,speed:8},{name:"flare 3",type:3,speed:2},{name:"twang 1",type:4,speed:32},{name:"twang 2",type:4,speed:8},{name:"twang 3",type:4,speed:2},{name:"swell 1",type:5,speed:32},{name:"swell 2",type:5,speed:8},{name:"swell 3",type:5,speed:2},{name:"tremolo1",type:6,speed:4},{name:"tremolo2",type:6,speed:2},{name:"tremolo3",type:6,speed:1},{name:"tremolo4",type:7,speed:4},{name:"tremolo5",type:7,speed:2},{name:"tremolo6",type:7,speed:1},{name:"decay 1",type:8,speed:10},{name:"decay 2",type:8,speed:7},{name:"decay 3",type:8,speed:4}]),e.feedbacks=h([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]}]),e.chipNoiseLength=32768,e.spectrumNoiseLength=32768,e.spectrumBasePitch=24,e.spectrumControlPoints=30,e.spectrumControlPointsPerOctave=7,e.spectrumControlPointBits=3,e.spectrumMax=(1<<e.spectrumControlPointBits)-1,e.harmonicsControlPoints=28,e.harmonicsRendered=64,e.harmonicsRenderedForPickedString=256,e.harmonicsControlPointBits=3,e.harmonicsMax=(1<<e.harmonicsControlPointBits)-1,e.harmonicsWavelength=2048,e.pulseWidthRange=8,e.pulseWidthStepPower=.5,e.pitchChannelCountMin=1,e.pitchChannelCountMax=10,e.noiseChannelCountMin=0,e.noiseChannelCountMax=5,e.noiseInterval=6,e.pitchesPerOctave=12,e.drumCount=12,e.pitchOctaves=7,e.maxPitch=e.pitchOctaves*e.pitchesPerOctave,e.maximumTonesPerChannel=2*e.maxChordSize,e.justIntonationSemitones=[.5,8/15,9/16,.6,5/8,2/3,32/45,3/4,.8,5/6,8/9,15/16,1,16/15,9/8,1.2,5/4,4/3,45/32,1.5,1.6,5/3,16/9,15/8,2].map((t=>Math.log2(t)*e.pitchesPerOctave)),e.pitchShiftRange=e.justIntonationSemitones.length,e.pitchShiftCenter=e.pitchShiftRange>>1,e.detuneCenter=9,e.detuneMax=2*e.detuneCenter,e.sineWaveLength=256,e.sineWaveMask=e.sineWaveLength-1,e.sineWave=function(){const t=new Float64Array(e.sineWaveLength+1);for(let n=0;n<e.sineWaveLength+1;n++)t[n]=Math.sin(n*Math.PI*2/e.sineWaveLength);return t}(),e.pickedStringDispersionCenterFreq=6e3,e.pickedStringDispersionFreqScale=.3,e.pickedStringDispersionFreqMult=4,e.pickedStringShelfHz=4e3,e.distortionRange=8,e.stringSustainRange=15,e.stringDecayRate=.12,e.bitcrusherFreqRange=14,e.bitcrusherOctaveStep=.5,e.bitcrusherQuantizationRange=8,e.maxEnvelopeCount=12,e.defaultAutomationRange=13,e.instrumentAutomationTargets=h([{name:"none",computeIndex:null,displayName:"none",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"noteVolume",computeIndex:0,displayName:"note volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"pulseWidth",computeIndex:2,displayName:"pulse width",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6]},{name:"stringSustain",computeIndex:3,displayName:"sustain",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[7]},{name:"unison",computeIndex:4,displayName:"unison",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[0,5,7]},{name:"operatorFrequency",computeIndex:5,displayName:"fm# freq",interleave:!0,isFilter:!1,maxCount:e.operatorCount,effect:null,compatibleInstruments:[1]},{name:"operatorAmplitude",computeIndex:9,displayName:"fm# volume",interleave:!1,isFilter:!1,maxCount:e.operatorCount,effect:null,compatibleInstruments:[1]},{name:"feedbackAmplitude",computeIndex:13,displayName:"fm feedback",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[1]},{name:"pitchShift",computeIndex:14,displayName:"pitch shift",interleave:!1,isFilter:!1,maxCount:1,effect:7,compatibleInstruments:null},{name:"detune",computeIndex:15,displayName:"detune",interleave:!1,isFilter:!1,maxCount:1,effect:8,compatibleInstruments:null},{name:"vibratoDepth",computeIndex:16,displayName:"vibrato range",interleave:!1,isFilter:!1,maxCount:1,effect:9,compatibleInstruments:null},{name:"noteFilterAllFreqs",computeIndex:1,displayName:"n. filter freqs",interleave:!1,isFilter:!0,maxCount:1,effect:5,compatibleInstruments:null},{name:"noteFilterFreq",computeIndex:17,displayName:"n. filter # freq",interleave:!1,isFilter:!0,maxCount:e.filterMaxPoints,effect:5,compatibleInstruments:null}]);var M=t&&t.t||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],s=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&s>=t.length&&(t=void 0),{value:t&&t[s++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},I=t&&t.i||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var s,i,a=n.call(t),r=[];try{for(;(void 0===e||e-- >0)&&!(s=a.next()).done;)r.push(s.value)}catch(t){i={error:t}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(i)throw i.error}}return r},D=t&&t.o||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(I(arguments[e]));return t};function P(t,e){var n,s,i,a,r,o;try{for(var h=M(e),l=h.next();!l.done;l=h.next()){var c=l.value;if(c instanceof Node)t.appendChild(c);else if("string"==typeof c)t.appendChild(document.createTextNode(c));else if("function"==typeof c)P(t,[c()]);else if(Array.isArray(c))P(t,c);else if(c&&"undefined"!=typeof Symbol&&"function"==typeof c[Symbol.iterator])P(t,D(c));else if(c&&c.constructor===Object&&t instanceof Element)try{for(var u=(i=void 0,M(Object.keys(c))),p=u.next();!p.done;p=u.next()){var f=p.value,d=c[f];if("class"===f)"string"==typeof d?t.setAttribute("class",d):Array.isArray(c)||d&&"undefined"!=typeof Symbol&&"function"==typeof d[Symbol.iterator]?t.setAttribute("class",D(d).join(" ")):console.warn("Invalid "+f+' value "'+d+'" on '+t.tagName+" element.");else if("style"===f)if(d&&d.constructor===Object)try{for(var m=(r=void 0,M(Object.keys(d))),y=m.next();!y.done;y=m.next()){var S=y.value;S in t.style?t.style[S]=d[S]:t.style.setProperty(S,d[S])}}catch(t){r={error:t}}finally{try{y&&!y.done&&(o=m.return)&&o.call(m)}finally{if(r)throw r.error}}else t.setAttribute(f,d);else"function"==typeof d?t[f]=d:"boolean"==typeof d?d?t.setAttribute(f,""):t.removeAttribute(f):t.setAttribute(f,d)}}catch(t){i={error:t}}finally{try{p&&!p.done&&(a=u.return)&&a.call(u)}finally{if(i)throw i.error}}else t.appendChild(document.createTextNode(c))}}catch(t){n={error:t}}finally{try{l&&!l.done&&(s=h.return)&&s.call(h)}finally{if(n)throw n.error}}return t}var x="http://www.w3.org/2000/svg";var F,w,k,L,T=t&&t.t||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],s=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&s>=t.length&&(t=void 0),{value:t&&t[s++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},C=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return document.createRange().createContextualFragment(t.join())},O=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=document.createDocumentFragment(),s=(new DOMParser).parseFromString('<svg xmlns="http://www.w3.org/2000/svg">'+t.join()+"</svg>","image/svg+xml").documentElement;null!==s.firstChild;)document.importNode(s.firstChild,!0),n.appendChild(s.firstChild);return n},E=function(t){C[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return P(document.createElement(t),e)}};try{for(var R=T("a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr".split(" ")),B=R.next();!B.done;B=R.next()){E(B.value)}}catch(t){F={error:t}}finally{try{B&&!B.done&&(w=R.return)&&w.call(R)}finally{if(F)throw F.error}}var A=function(t){if(O[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return P(document.createElementNS(x,t),e)},/-/.test(t)){var e=t.replace(/-/g,"_");O[e]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return P(document.createElementNS(x,t),e)}}};try{for(var N=T("a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern".split(" ")),z=N.next();!z.done;z=N.next()){A(z.value)}}catch(t){k={error:t}}finally{try{z&&!z.done&&(L=N.return)&&L.call(N)}finally{if(k)throw k.error}}class W{static getChannelColor(t,e){return e<t.pitchChannelCount?W.pitchChannels[e%W.pitchChannels.length]:W.noiseChannels[(e-t.pitchChannelCount)%W.noiseChannels.length]}static setTheme(t){this.h.textContent=this.themes[t];const e=document.querySelector("meta[name='theme-color']");null!=e&&e.setAttribute("content",getComputedStyle(document.documentElement).getPropertyValue("--ui-widget-background"))}}function V(t,e){for(let n=0;n<t.length;n++)t[n]*=e}function q(t){if(!function(t){return!(!t||t&t-1)}(t))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(t)/Math.log(2))}function G(t,e){const n=q(e);if(e<4)throw new Error("FFT array length must be at least 4.");for(let s=n-1;s>=2;s--){const n=1<<s,i=n>>1,a=n<<1,r=2*Math.PI/a,o=Math.cos(r),h=Math.sin(r),l=2*o;for(let s=0;s<e;s+=a){const e=s,a=e+i,r=e+n,c=r+i,u=r+n,p=t[e],f=t[r];t[e]=p+f,t[a]*=2,t[r]=p-f,t[c]*=2;let d=o,m=-h,y=1,S=0;for(let n=1;n<i;n++){const s=e+n,i=r-n,a=r+n,o=u-n,h=t[s],c=t[i],p=t[a],f=t[o],g=h-c,b=p+f;t[s]=h+c,t[i]=f-p,t[a]=g*d-b*m,t[o]=b*d+g*m;const v=l*d-y,M=l*m-S;y=d,S=m,d=v,m=M}}}for(let n=0;n<e;n+=4){const e=n+1,s=n+2,i=n+3,a=t[n],r=2*t[e],o=t[s],h=2*t[i],l=a+o,c=a-o;t[n]=l+r,t[e]=l-r,t[s]=c+h,t[i]=c-h}!function(t,e){const n=q(e);if(n>16)throw new Error("FFT array length must not be greater than 2^16.");const s=16-n;for(let n=0;n<e;n++){let e;if(e=(43690&n)>>1|(21845&n)<<1,e=(52428&e)>>2|(13107&e)<<2,e=(61680&e)>>4|(3855&e)<<4,e=(e>>8|(255&e)<<8)>>s,e>n){let s=t[n];t[n]=t[e],t[e]=s}}}(t,e)}W.themes={"dark classic":"\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n\t\t\t}\n\t\t","light classic":"\n\t\t\t:root {\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t--page-margin: #685d88;\n\t\t\t\t--editor-background: white;\n\t\t\t\t--hover-preview: black;\n\t\t\t\t--playhead: rgba(0,0,0,0.5);\n\t\t\t\t--primary-text: black;\n\t\t\t\t--secondary-text: #777;\n\t\t\t\t--inverted-text: white;\n\t\t\t\t--text-selection: rgba(200,170,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\n\t\t\t\t--loop-accent: #98f;\n\t\t\t\t--link-accent: #74f;\n\t\t\t\t--ui-widget-background: #ececec;\n\t\t\t\t--ui-widget-focus: #eee;\n\t\t\t\t--pitch-background: #ececec;\n\t\t\t\t--tonic: #f0d6b6;\n\t\t\t\t--fifth-note: #bbddf0;\n\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t--black-piano-key: #666;\n\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\n\t\t\t\t--pitch1-primary-channel:   #00A0BD;\n\t\t\t\t--pitch1-secondary-note:    #34C2DC;\n\t\t\t\t--pitch1-primary-note:      #00758A;\n\t\t\t\t--pitch2-secondary-channel: #E3C941;\n\t\t\t\t--pitch2-primary-channel:   #B49700;\n\t\t\t\t--pitch2-secondary-note:    #D1B628;\n\t\t\t\t--pitch2-primary-note:      #836E00;\n\t\t\t\t--pitch3-secondary-channel: #FF9D61;\n\t\t\t\t--pitch3-primary-channel:   #E14E00;\n\t\t\t\t--pitch3-secondary-note:    #F67D3C;\n\t\t\t\t--pitch3-primary-note:      #B64000;\n\t\t\t\t--pitch4-secondary-channel: #4BE24B;\n\t\t\t\t--pitch4-primary-channel:   #00A800;\n\t\t\t\t--pitch4-secondary-note:    #2DC82D;\n\t\t\t\t--pitch4-primary-note:      #008000;\n\t\t\t\t--pitch5-secondary-channel: #FF90FF;\n\t\t\t\t--pitch5-primary-channel:   #E12EDF;\n\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\n\t\t\t\t--pitch5-primary-note:      #A600A5;\n\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\n\t\t\t\t--pitch6-primary-channel:   #6969FD;\n\t\t\t\t--pitch6-secondary-note:    #9393FE;\n\t\t\t\t--pitch6-primary-note:      #4A4AD7;\n\t\t\t\t--pitch7-secondary-channel: #C2D848;\n\t\t\t\t--pitch7-primary-channel:   #8EA800;\n\t\t\t\t--pitch7-secondary-note:    #B0C82D;\n\t\t\t\t--pitch7-primary-note:      #6C8000;\n\t\t\t\t--pitch8-secondary-channel: #FF90A4;\n\t\t\t\t--pitch8-primary-channel:   #E12E4D;\n\t\t\t\t--pitch8-secondary-note:    #EC6E85;\n\t\t\t\t--pitch8-primary-note:      #A6001D;\n\t\t\t\t--pitch9-secondary-channel: #41E3B5;\n\t\t\t\t--pitch9-primary-channel:   #00B481;\n\t\t\t\t--pitch9-secondary-note:    #28D1A1;\n\t\t\t\t--pitch9-primary-note:      #00835E;\n\t\t\t\t--pitch10-secondary-channel:#CA77FF;\n\t\t\t\t--pitch10-primary-channel:  #9609FF;\n\t\t\t\t--pitch10-secondary-note:   #B54FFF;\n\t\t\t\t--pitch10-primary-note:     #8400E3;\n\t\t\t\t--noise1-secondary-channel: #C1C1C1;\n\t\t\t\t--noise1-primary-channel:   #898989;\n\t\t\t\t--noise1-secondary-note:    #ADADAD;\n\t\t\t\t--noise1-primary-note:      #6C6C6C;\n\t\t\t\t--noise2-secondary-channel: #E8BB8C;\n\t\t\t\t--noise2-primary-channel:   #BD7D3A;\n\t\t\t\t--noise2-secondary-note:    #D1A374;\n\t\t\t\t--noise2-primary-note:      #836342;\n\t\t\t\t--noise3-secondary-channel: #9BC4EB;\n\t\t\t\t--noise3-primary-channel:   #4481BE;\n\t\t\t\t--noise3-secondary-note:    #7CA7D3;\n\t\t\t\t--noise3-primary-note:      #476685;\n\t\t\t\t--noise4-secondary-channel: #C5A5E0;\n\t\t\t\t--noise4-primary-channel:   #8553AE;\n\t\t\t\t--noise4-secondary-note:    #B290CC;\n\t\t\t\t--noise4-primary-note:      #684F7D;\n\t\t\t\t--noise5-secondary-channel: #B8CE93;\n\t\t\t\t--noise5-primary-channel:   #87A74F;\n\t\t\t\t--noise5-secondary-note:    #ABC183;\n\t\t\t\t--noise5-primary-note:      #68784C;\n\t\t\t}\n\t\t\t\n\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t}\n\t\t"},W.pageMargin="var(--page-margin)",W.editorBackground="var(--editor-background)",W.hoverPreview="var(--hover-preview)",W.playhead="var(--playhead)",W.primaryText="var(--primary-text)",W.secondaryText="var(--secondary-text)",W.invertedText="var(--inverted-text)",W.textSelection="var(--text-selection)",W.boxSelectionFill="var(--box-selection-fill)",W.loopAccent="var(--loop-accent)",W.linkAccent="var(--link-accent)",W.uiWidgetBackground="var(--ui-widget-background)",W.uiWidgetFocus="var(--ui-widget-focus)",W.pitchBackground="var(--pitch-background)",W.tonic="var(--tonic)",W.fifthNote="var(--fifth-note)",W.whitePianoKey="var(--white-piano-key)",W.blackPianoKey="var(--black-piano-key)",W.pitchChannels=h([{name:"pitch1",secondaryChannel:"var(--pitch1-secondary-channel)",primaryChannel:"var(--pitch1-primary-channel)",secondaryNote:"var(--pitch1-secondary-note)",primaryNote:"var(--pitch1-primary-note)"},{name:"pitch2",secondaryChannel:"var(--pitch2-secondary-channel)",primaryChannel:"var(--pitch2-primary-channel)",secondaryNote:"var(--pitch2-secondary-note)",primaryNote:"var(--pitch2-primary-note)"},{name:"pitch3",secondaryChannel:"var(--pitch3-secondary-channel)",primaryChannel:"var(--pitch3-primary-channel)",secondaryNote:"var(--pitch3-secondary-note)",primaryNote:"var(--pitch3-primary-note)"},{name:"pitch4",secondaryChannel:"var(--pitch4-secondary-channel)",primaryChannel:"var(--pitch4-primary-channel)",secondaryNote:"var(--pitch4-secondary-note)",primaryNote:"var(--pitch4-primary-note)"},{name:"pitch5",secondaryChannel:"var(--pitch5-secondary-channel)",primaryChannel:"var(--pitch5-primary-channel)",secondaryNote:"var(--pitch5-secondary-note)",primaryNote:"var(--pitch5-primary-note)"},{name:"pitch6",secondaryChannel:"var(--pitch6-secondary-channel)",primaryChannel:"var(--pitch6-primary-channel)",secondaryNote:"var(--pitch6-secondary-note)",primaryNote:"var(--pitch6-primary-note)"},{name:"pitch7",secondaryChannel:"var(--pitch7-secondary-channel)",primaryChannel:"var(--pitch7-primary-channel)",secondaryNote:"var(--pitch7-secondary-note)",primaryNote:"var(--pitch7-primary-note)"},{name:"pitch8",secondaryChannel:"var(--pitch8-secondary-channel)",primaryChannel:"var(--pitch8-primary-channel)",secondaryNote:"var(--pitch8-secondary-note)",primaryNote:"var(--pitch8-primary-note)"},{name:"pitch9",secondaryChannel:"var(--pitch9-secondary-channel)",primaryChannel:"var(--pitch9-primary-channel)",secondaryNote:"var(--pitch9-secondary-note)",primaryNote:"var(--pitch9-primary-note)"},{name:"pitch10",secondaryChannel:"var(--pitch10-secondary-channel)",primaryChannel:"var(--pitch10-primary-channel)",secondaryNote:"var(--pitch10-secondary-note)",primaryNote:"var(--pitch10-primary-note)"}]),W.noiseChannels=h([{name:"noise1",secondaryChannel:"var(--noise1-secondary-channel)",primaryChannel:"var(--noise1-primary-channel)",secondaryNote:"var(--noise1-secondary-note)",primaryNote:"var(--noise1-primary-note)"},{name:"noise2",secondaryChannel:"var(--noise2-secondary-channel)",primaryChannel:"var(--noise2-primary-channel)",secondaryNote:"var(--noise2-secondary-note)",primaryNote:"var(--noise2-primary-note)"},{name:"noise3",secondaryChannel:"var(--noise3-secondary-channel)",primaryChannel:"var(--noise3-primary-channel)",secondaryNote:"var(--noise3-secondary-note)",primaryNote:"var(--noise3-primary-note)"},{name:"noise4",secondaryChannel:"var(--noise4-secondary-channel)",primaryChannel:"var(--noise4-primary-channel)",secondaryNote:"var(--noise4-secondary-note)",primaryNote:"var(--noise4-primary-note)"},{name:"noise5",secondaryChannel:"var(--noise5-secondary-channel)",primaryChannel:"var(--noise5-primary-channel)",secondaryNote:"var(--noise5-secondary-note)",primaryNote:"var(--noise5-primary-note)"}]),W.h=document.head.appendChild(C.style({type:"text/css"}));class j{constructor(){this.l=1,this.u=[void 0],this.p=0,this.m=0,this.S=0}pushFront(t){this.S>=this.l&&this.g(),this.m=this.m-1&this.p,this.u[this.m]=t,this.S++}pushBack(t){this.S>=this.l&&this.g(),this.u[this.m+this.S&this.p]=t,this.S++}popFront(){if(this.S<=0)throw new Error("No elements left to pop.");const t=this.u[this.m];return this.u[this.m]=void 0,this.m=this.m+1&this.p,this.S--,t}popBack(){if(this.S<=0)throw new Error("No elements left to pop.");this.S--;const t=this.m+this.S&this.p,e=this.u[t];return this.u[t]=void 0,e}peakFront(){if(this.S<=0)throw new Error("No elements left to pop.");return this.u[this.m]}peakBack(){if(this.S<=0)throw new Error("No elements left to pop.");return this.u[this.m+this.S-1&this.p]}count(){return this.S}set(t,e){if(t<0||t>=this.S)throw new Error("Invalid index");this.u[this.m+t&this.p]=e}get(t){if(t<0||t>=this.S)throw new Error("Invalid index");return this.u[this.m+t&this.p]}remove(t){if(t<0||t>=this.S)throw new Error("Invalid index");if(t<=this.S>>1){for(;t>0;)this.set(t,this.get(t-1)),t--;this.popFront()}else{for(t++;t<this.S;)this.set(t-1,this.get(t)),t++;this.popBack()}}g(){if(this.l>=1073741824)throw new Error("Capacity too big.");this.l=this.l<<1;const t=this.u,e=new Array(this.l),n=0|this.S,s=0|this.m;for(let i=0;i<n;i++)e[i]=t[s+i&this.p];for(let t=n;t<this.l;t++)e[t]=void 0;this.m=0,this.u=e,this.p=this.l-1}}class ${constructor(){this.a=[1],this.b=[1],this.order=0}linearGain0thOrder(t){this.b[0]=t,this.order=0}lowPass1stOrderButterworth(t){const e=1/Math.tan(.5*t),n=1+e;this.a[1]=(1-e)/n,this.b[1]=this.b[0]=1/n,this.order=1}lowPass1stOrderSimplified(t){const e=2*Math.sin(.5*t);this.a[1]=e-1,this.b[0]=e,this.b[1]=0,this.order=1}highPass1stOrderButterworth(t){const e=1/Math.tan(.5*t),n=1+e;this.a[1]=(1-e)/n,this.b[0]=e/n,this.b[1]=-e/n,this.order=1}highShelf1stOrder(t,e){const n=Math.tan(.5*t),s=Math.sqrt(e),i=(n*s-1)/(n*s+1);this.a[1]=i/1,this.b[0]=(1+i+e*(1-i))/2,this.b[1]=(1+i-e*(1-i))/2,this.order=1}allPass1stOrderInvertPhaseAbove(t){const e=(Math.sin(t)-1)/Math.cos(t);this.a[1]=e,this.b[0]=e,this.b[1]=1,this.order=1}allPass1stOrderFractionalDelay(t){const e=(1-t)/(1+t);this.a[1]=e,this.b[0]=e,this.b[1]=1,this.order=1}lowPass2ndOrderButterworth(t,e){const n=Math.sin(t)/(2*e),s=Math.cos(t),i=1+n;this.a[1]=-2*s/i,this.a[2]=(1-n)/i,this.b[2]=this.b[0]=(1-s)/(2*i),this.b[1]=(1-s)/i,this.order=2}lowPass2ndOrderSimplified(t,e){const n=2*Math.sin(t/2),s=1-1/(2*e),i=s+s/(1-n);this.a[1]=2*n+(n-1)*n*i-2,this.a[2]=(n-1)*(n-n*i-1),this.b[0]=n*n,this.b[1]=0,this.b[2]=0,this.order=2}highPass2ndOrderButterworth(t,e){const n=Math.sin(t)/(2*e),s=Math.cos(t),i=1+n;this.a[1]=-2*s/i,this.a[2]=(1-n)/i,this.b[2]=this.b[0]=(1+s)/(2*i),this.b[1]=-(1+s)/i,this.order=2}peak2ndOrder(t,e,n){const s=Math.sqrt(e),i=n*t/(s>=1?s:1/s),a=Math.tan(.5*i),r=1+a/s;this.b[0]=(1+a*s)/r,this.b[1]=this.a[1]=-2*Math.cos(t)/r,this.b[2]=(1-a*s)/r,this.a[2]=(1-a/s)/r,this.order=2}}class U{constructor(){this.real=0,this.imag=0,this.denom=1}analyze(t,e){this.analyzeComplex(t,Math.cos(e),Math.sin(e))}analyzeComplex(t,e,n){const s=t.a,i=t.b,a=e,r=-n;let o=i[0]+i[1]*a,h=i[1]*r,l=1+s[1]*a,c=s[1]*r,u=a,p=r;for(let e=2;e<=t.order;e++){const t=u*r+p*a;u=u*a-p*r,p=t,o+=i[e]*u,h+=i[e]*p,l+=s[e]*u,c+=s[e]*p}this.denom=l*l+c*c,this.real=o*l+h*c,this.imag=h*l-o*c}magnitude(){return Math.sqrt(this.real*this.real+this.imag*this.imag)/this.denom}angle(){return Math.atan2(this.imag,this.real)}}class H{constructor(){this.a1=0,this.a2=0,this.b0=1,this.b1=0,this.b2=0,this.a1Delta=0,this.a2Delta=0,this.b0Delta=0,this.b1Delta=0,this.b2Delta=0,this.output1=0,this.output2=0,this.useMultiplicativeInputCoefficients=!1}resetOutput(){this.output1=0,this.output2=0}loadCoefficientsWithGradient(t,e,n,s){if(2!=t.order||2!=e.order)throw new Error;this.a1=t.a[1],this.a2=t.a[2],this.b0=t.b[0],this.b1=t.b[1],this.b2=t.b[2],this.a1Delta=(e.a[1]-t.a[1])*n,this.a2Delta=(e.a[2]-t.a[2])*n,s?(this.b0Delta=Math.pow(e.b[0]/t.b[0],n),this.b1Delta=Math.pow(e.b[1]/t.b[1],n),this.b2Delta=Math.pow(e.b[2]/t.b[2],n)):(this.b0Delta=(e.b[0]-t.b[0])*n,this.b1Delta=(e.b[1]-t.b[1])*n,this.b2Delta=(e.b[2]-t.b[2])*n),this.useMultiplicativeInputCoefficients=s}}const K=1e-24,Q=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],J=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class _{constructor(t,e,n){this.v=[],this.M=0;for(let s=e;s<n;s++){const e=J[t.charCodeAt(s)];this.v.push(e>>5&1),this.v.push(e>>4&1),this.v.push(e>>3&1),this.v.push(e>>2&1),this.v.push(e>>1&1),this.v.push(1&e)}}read(t){let e=0;for(;t>0;)e<<=1,e+=this.v[this.M++],t--;return e}readLongTail(t,e){let n=t,s=e;for(;this.v[this.M++];)n+=1<<s,s++;for(;s>0;)s--,this.v[this.M++]&&(n+=1<<s);return n}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class Z{constructor(){this.I=0,this.v=[]}clear(){this.I=0}write(t,e){for(t--;t>=0;)this.v[this.I++]=e>>>t&1,t--}writeLongTail(t,e,n){if(n<t)throw new Error("value out of bounds");n-=t;let s=e;for(;n>=1<<s;)this.v[this.I++]=1,n-=1<<s,s++;for(this.v[this.I++]=0;s>0;)s--,this.v[this.I++]=n>>>s&1}writePartDuration(t){this.writeLongTail(1,3,t)}writePinCount(t){this.writeLongTail(1,0,t)}writePitchInterval(t){t<0?(this.write(1,1),this.writeLongTail(1,3,-t)):(this.write(1,0),this.writeLongTail(1,3,t))}concat(t){for(let e=0;e<t.I;e++)this.v[this.I++]=t.v[e]}encodeBase64(t){for(let e=0;e<this.I;e+=6){const n=this.v[e]<<5|this.v[e+1]<<4|this.v[e+2]<<3|this.v[e+3]<<2|this.v[e+4]<<1|this.v[e+5];t.push(Q[n])}return t}lengthBase64(){return Math.ceil(this.I/6)}}function X(t,e,n){return{interval:t,time:e,size:n}}function Y(t,e,n){return n<=(e-=1)?n>=t?n:t:e}function tt(t,e,n){if(t<=n&&n<=e)return n;throw new Error(`Value ${n} not in range [${t}, ${e}]`)}class et{constructor(t,e,n,s,i=!1){this.pitches=[t],this.pins=[X(0,0,s),X(0,n-e,i?0:s)],this.start=e,this.end=n,this.continuesLastPattern=!1}pickMainInterval(){let t=0,e=0;for(let n=1;n<this.pins.length;n++){const s=this.pins[n-1],i=this.pins[n];if(s.interval==i.interval){const n=i.time-s.time;t<n&&(t=n,e=s.interval)}}if(0==t){let t=0;for(let n=0;n<this.pins.length;n++){const s=this.pins[n];t<s.size&&(t=s.size,e=s.interval)}}return e}clone(){const t=new et(-1,this.start,this.end,e.noteSizeMax);t.pitches=this.pitches.concat(),t.pins=[];for(const e of this.pins)t.pins.push(X(e.interval,e.time,e.size));return t.continuesLastPattern=this.continuesLastPattern,t}getEndPinIndex(t){let e;for(e=1;e<this.pins.length-1&&!(this.pins[e].time+this.start>t);e++);return e}}class nt{constructor(){this.notes=[],this.instruments=[0]}cloneNotes(){const t=[];for(const e of this.notes)t.push(e.clone());return t}reset(){this.notes.length=0,this.instruments[0]=0,this.instruments.length=1}}class st{constructor(t){this.frequency=0,this.amplitude=0,this.reset(t)}reset(t){this.frequency=0,this.amplitude=t<=1?e.operatorAmplitudeMax:0}}class it{constructor(t){this.spectrum=[],this.P=null,this.k=!1,this.reset(t)}reset(t){for(let n=0;n<e.spectrumControlPoints;n++)if(t)this.spectrum[n]=Math.round(e.spectrumMax*(1/Math.sqrt(1+n/3)));else{const t=0==n||7==n||11==n||14==n||16==n||18==n||21==n||23==n||n>=25;this.spectrum[n]=t?Math.max(0,Math.round(e.spectrumMax*(1-n/30))):0}this.k=!1}markCustomWaveDirty(){this.k=!1}getCustomWave(t){if(this.k)return this.P;const n=e.spectrumNoiseLength;null!=this.P&&this.P.length==n+1||(this.P=new Float32Array(n+1));const s=this.P;for(let t=0;t<n;t++)s[t]=0;const i=[0,1/7,Math.log2(5/4),3/7,Math.log2(1.5),5/7,6/7];function a(n){return t+Math.floor(n/e.spectrumControlPointsPerOctave)+i[(n+e.spectrumControlPointsPerOctave)%e.spectrumControlPointsPerOctave]}let o=1;for(let t=0;t<e.spectrumControlPoints+1;t++){const i=t<=0?0:this.spectrum[t-1],h=t>=e.spectrumControlPoints?this.spectrum[e.spectrumControlPoints-1]:this.spectrum[t],l=a(t-1);let c=a(t);t>=e.spectrumControlPoints&&(c=14+.25*(c-14)),0==i&&0==h||(o+=.02*r(s,n,l,c,i/e.spectrumMax,h/e.spectrumMax,-.5))}return this.spectrum[e.spectrumControlPoints-1]>0&&(o+=.02*r(s,n,14+.25*(a(e.spectrumControlPoints)-14),14,this.spectrum[e.spectrumControlPoints-1]/e.spectrumMax,0,-.5)),G(s,n),V(s,5/(Math.sqrt(n)*Math.pow(o,.75))),s[n]=s[0],this.k=!0,s}}class at{constructor(){this.harmonics=[],this.P=null,this.k=!1,this.reset()}reset(){for(let t=0;t<e.harmonicsControlPoints;t++)this.harmonics[t]=0;this.harmonics[0]=e.harmonicsMax,this.harmonics[3]=e.harmonicsMax,this.harmonics[6]=e.harmonicsMax,this.k=!1}markCustomWaveDirty(){this.k=!1}getCustomWave(t){this.L!=t&&(this.L=t,this.k=!1);const n=7==t?e.harmonicsRenderedForPickedString:e.harmonicsRendered;if(this.k)return this.P;const i=e.harmonicsWavelength,r=a(0,null,null);null!=this.P&&this.P.length==i+1||(this.P=new Float32Array(i+1));const o=this.P;for(let t=0;t<i;t++)o[t]=0;let h=1;for(let t=0;t<n;t++){const s=t+1;let a=t<e.harmonicsControlPoints?this.harmonics[t]:this.harmonics[e.harmonicsControlPoints-1];t>=e.harmonicsControlPoints&&(a*=1-(t-e.harmonicsControlPoints)/(n-e.harmonicsControlPoints));const l=a/e.harmonicsMax;let c=Math.pow(2,a-e.harmonicsMax+1)*Math.sqrt(l);t<e.harmonicsControlPoints&&(h+=c),c*=Math.pow(s,-.25),c*=r[t+589],o[i-s]=c}G(o,i);const l=1/Math.pow(h,.7);for(let t=0;t<o.length;t++)o[t]*=l;return s(o),o[i]=o[0],this.k=!0,o}}class rt{constructor(){this.freq=0,this.gain=e.filterGainCenter,this.type=2}set(t,e){this.freq=t,this.gain=e}getHz(){return rt.getHzFromSettingValue(this.freq)}static getHzFromSettingValue(t){return e.filterFreqReferenceHz*Math.pow(2,(t-e.filterFreqReferenceSetting)*e.filterFreqStep)}static getSettingValueFromHz(t){return Math.log2(t/e.filterFreqReferenceHz)/e.filterFreqStep+e.filterFreqReferenceSetting}static getRoundedSettingValueFromHz(t){return Math.max(0,Math.min(e.filterFreqRange-1,Math.round(rt.getSettingValueFromHz(t))))}getLinearGain(t=1){const n=(this.gain-e.filterGainCenter)*e.filterGainStep,s=2==this.type?0:-.5,i=s+(n-s)*t;return Math.pow(2,i)}static getRoundedSettingValueFromLinearGain(t){return Math.max(0,Math.min(e.filterGainRange-1,Math.round(Math.log2(t)/e.filterGainStep+e.filterGainCenter)))}toCoefficients(t,n,s=1,i=1){const a=2*Math.PI*Math.max(e.filterFreqMinHz,Math.min(e.filterFreqMaxHz,s*this.getHz()))/n,r=this.getLinearGain(i);switch(this.type){case 0:t.lowPass2ndOrderButterworth(a,r);break;case 1:t.highPass2ndOrderButterworth(a,r);break;case 2:t.peak2ndOrder(a,r,1);break;default:throw new Error}}getVolumeCompensationMult(){const t=(this.freq-e.filterFreqReferenceSetting)*e.filterFreqStep,n=(this.gain-e.filterGainCenter)*e.filterGainStep;switch(this.type){case 0:const s=Math.pow(2,t)*e.filterFreqReferenceHz/8e3,i=(Math.sqrt(1+4*s)-1)/2,a=Math.log2(i);return Math.pow(.5,.2*Math.max(0,n+1)+Math.min(0,Math.max(-3,.595*a+.35*Math.min(0,n+1))));case 1:return Math.pow(.5,.125*Math.max(0,n+1)+Math.min(0,.3*(-t-Math.log2(e.filterFreqReferenceHz/125))+.2*Math.min(0,n+1)));case 2:const r=t+Math.log2(e.filterFreqReferenceHz/2e3),o=Math.pow(1/(1+Math.pow(r/3,2)),2);return Math.pow(.5,.125*Math.max(0,n)+.1*o*Math.min(0,n));default:throw new Error}}}class ot{constructor(){this.controlPoints=[],this.controlPointCount=0,this.reset()}reset(){this.controlPointCount=0}addPoint(t,e,n){let s;this.controlPoints.length<=this.controlPointCount?(s=new rt,this.controlPoints[this.controlPointCount]=s):s=this.controlPoints[this.controlPointCount],this.controlPointCount++,s.type=t,s.set(e,n)}toJsonObject(){const t=[];for(let n=0;n<this.controlPointCount;n++){const s=this.controlPoints[n];t.push({type:e.filterTypeNames[s.type],cutoffHz:Math.round(100*s.getHz())/100,linearGain:Math.round(1e4*s.getLinearGain())/1e4})}return t}fromJsonObject(t){if(this.controlPoints.length=0,t)for(const n of t){const t=new rt;t.type=e.filterTypeNames.indexOf(n.type),-1==t.type&&(t.type=2),null!=n.cutoffHz?t.freq=rt.getRoundedSettingValueFromHz(n.cutoffHz):t.freq=0,null!=n.linearGain?t.gain=rt.getRoundedSettingValueFromLinearGain(n.linearGain):t.gain=e.filterGainCenter,this.controlPoints.push(t)}this.controlPointCount=this.controlPoints.length}convertLegacySettings(t,e,n){this.reset();const s=2*Math.asin(.475),i=e>1,a=0==e,r=10==t,o=3==n.type||4==n.type||8==n.type||0==n.type,h=48e3,l=8e3*Math.pow(2,.5*(t-10)),c=Math.min(s,2*Math.PI*l/h);if(1==n.type&&!i&&r);else if(a){const t=3.5,e=c*Math.pow(2,t),n=h*(e/(1+e/Math.PI))/(2*Math.PI),s=rt.getRoundedSettingValueFromHz(n),i=rt.getHzFromSettingValue(s),a=2*Math.PI*i/h,r=new $;r.lowPass1stOrderSimplified(c);const l=new U;l.analyze(r,a);const u=l.magnitude();let p=Math.log2(u);p=.82*(p+t)-t,o&&(p=Math.min(p,-1));const f=Math.pow(2,p),d=rt.getRoundedSettingValueFromLinearGain(f);this.addPoint(0,s,d)}else{const t=.5/(1-.95*Math.sqrt(Math.max(0,e-1)/6)),n=.5/t,s=c+(c*(c/(2*Math.PI*8e3/h)*Math.pow(n,.9)+1)-c)*n;let a;a=o?h*Math.min(s,c*Math.pow(2,.25))/(2*Math.PI):h*s/(2*Math.PI);const r=rt.getRoundedSettingValueFromHz(a);let l;if(o)l=t;else{const e=new $;e.lowPass2ndOrderSimplified(c,t);const n=new U;n.analyze(e,s),l=n.magnitude()}i||(l=Math.min(l,Math.sqrt(.5)));const u=rt.getRoundedSettingValueFromLinearGain(l);this.addPoint(0,r,u)}}}class ht{constructor(){this.target=0,this.index=0,this.envelope=0,this.reset()}reset(){this.target=0,this.index=0,this.envelope=0}toJsonObject(){const t={target:e.instrumentAutomationTargets[this.target].name,envelope:e.envelopes[this.envelope].name};return e.instrumentAutomationTargets[this.target].maxCount>1&&(t.index=this.index),t}fromJsonObject(t){this.reset();let n=e.instrumentAutomationTargets.dictionary[t.target];null==n&&(n=e.instrumentAutomationTargets.dictionary.noteVolume),this.target=n.index;let s=e.envelopes.dictionary[t.envelope];null==s&&(s=e.envelopes.dictionary.none),this.envelope=s.index,null!=t.index?this.index=Y(0,e.instrumentAutomationTargets[this.target].maxCount,0|t.index):this.index=0}}class lt{constructor(t){this.type=0,this.preset=0,this.chipWave=2,this.chipNoise=1,this.eqFilter=new ot,this.noteFilter=new ot,this.envelopes=[],this.envelopeCount=0,this.fadeIn=0,this.fadeOut=e.fadeOutNeutral,this.transition=e.transitions.dictionary.normal.index,this.pitchShift=0,this.detune=0,this.vibrato=0,this.unison=0,this.effects=0,this.chord=1,this.volume=0,this.pan=e.panCenter,this.pulseWidth=e.pulseWidthRange-1,this.stringSustain=10,this.distortion=0,this.bitcrusherFreq=0,this.bitcrusherQuantization=0,this.chorus=0,this.reverb=0,this.echoSustain=0,this.echoDelay=0,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.operators=[],this.harmonicsWave=new at,this.drumsetEnvelopes=[],this.drumsetSpectrumWaves=[],this.spectrumWave=new it(t);for(let t=0;t<e.operatorCount;t++)this.operators[t]=new st(t);for(let t=0;t<e.drumCount;t++)this.drumsetEnvelopes[t]=e.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[t]=new it(!0)}setTypeAndReset(t,n){switch(this.type=t,this.preset=t,this.volume=0,this.effects=0,this.chorus=e.chorusRange-1,this.reverb=2,this.echoSustain=Math.floor(.5*(e.echoSustainRange-1)),this.echoDelay=Math.floor(.5*(e.echoDelayRange-1)),this.eqFilter.reset(),this.noteFilter.reset(),this.distortion=Math.floor(.75*(e.distortionRange-1)),this.bitcrusherFreq=Math.floor(.5*(e.bitcrusherFreqRange-1)),this.bitcrusherQuantization=Math.floor(.5*(e.bitcrusherQuantizationRange-1)),this.pan=e.panCenter,this.pitchShift=e.pitchShiftCenter,this.detune=e.detuneCenter,this.vibrato=0,this.unison=0,this.stringSustain=10,this.fadeIn=0,this.fadeOut=e.fadeOutNeutral,this.transition=e.transitions.dictionary.normal.index,this.envelopeCount=0,t){case 0:this.chipWave=2,this.chord=e.chords.dictionary.arpeggio.index;break;case 1:this.chord=e.chords.dictionary["custom interval"].index,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0;for(let t=0;t<this.operators.length;t++)this.operators[t].reset(t);break;case 2:this.chipNoise=1,this.chord=e.chords.dictionary.arpeggio.index;break;case 3:this.chord=e.chords.dictionary.simultaneous.index,this.spectrumWave.reset(n);break;case 4:this.chord=e.chords.dictionary.simultaneous.index;for(let t=0;t<e.drumCount;t++)this.drumsetEnvelopes[t]=e.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[t].reset(n);break;case 5:this.chord=e.chords.dictionary.simultaneous.index,this.harmonicsWave.reset();break;case 6:this.chord=e.chords.dictionary.arpeggio.index,this.pulseWidth=e.pulseWidthRange-1;break;case 7:this.chord=e.chords.dictionary.strum.index,this.harmonicsWave.reset();break;default:throw new Error("Unrecognized instrument type: "+t)}this.chord!=e.chords.dictionary.simultaneous.index&&(this.effects=2048|this.effects)}convertLegacySettings(t){let n=t.filterCutoff,s=t.filterResonance,i=t.filterEnvelope,a=t.pulseEnvelope,r=t.operatorEnvelopes,o=t.feedbackEnvelope;null==n&&(n=0==this.type?6:10),null==s&&(s=0),null==i&&(i=e.envelopes.dictionary.none),null==a&&(a=e.envelopes.dictionary[6==this.type?"twang 2":"none"]),null==r&&(r=[e.envelopes.dictionary[1==this.type?"note size":"none"],e.envelopes.dictionary.none,e.envelopes.dictionary.none,e.envelopes.dictionary.none]),null==o&&(o=e.envelopes.dictionary.none);const h=e.algorithms[this.algorithm].carrierCount;let l=!0,c=!0,u=0==i.type||0==a.type;if(1==this.type){u=u||0==o.type;for(let t=0;t<r.length;t++)t<h?0!=r[t].type?c=!1:l=!1:u=u||0==r[t].type}this.envelopeCount=0,1==this.type&&(c&&u?this.addEnvelope(e.instrumentAutomationTargets.dictionary.noteVolume.index,0,e.envelopes.dictionary["note size"].index):l&&!u&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.none.index,0,e.envelopes.dictionary["note size"].index)),1==i.type?(this.noteFilter.reset(),this.eqFilter.convertLegacySettings(n,s,i),this.effects&=-33):(this.eqFilter.reset(),this.noteFilter.convertLegacySettings(n,s,i),this.effects|=32,this.addEnvelope(e.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index,0,i.index)),1!=a.type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.pulseWidth.index,0,a.index);for(let t=0;t<r.length;t++)t<h&&c||1!=r[t].type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.operatorAmplitude.index,t,r[t].index);1!=o.type&&this.addEnvelope(e.instrumentAutomationTargets.dictionary.feedbackAmplitude.index,0,o.index)}toJsonObject(){const t={type:e.instrumentTypeNames[this.type],volume:20*(5-this.volume),eqFilter:this.eqFilter.toJsonObject()};this.preset!=this.type&&(t.preset=this.preset);const n=[];for(const t of e.effectOrder)this.effects&1<<t&&n.push(e.effectNames[t]);if(t.effects=n,l(this.effects)&&(t.transition=e.transitions[this.transition].name),c(this.effects)&&(t.chord=this.getChord().name),u(this.effects)&&(t.pitchShiftSemitones=this.pitchShift),p(this.effects)&&(t.detuneCents=St.detuneToCents(this.detune-e.detuneCenter)),f(this.effects)&&(t.vibrato=e.vibratos[this.vibrato].name),d(this.effects)&&(t.noteFilter=this.noteFilter.toJsonObject()),m(this.effects)&&(t.distortion=Math.round(100*this.distortion/(e.distortionRange-1))),y(this.effects)&&(t.bitcrusherOctave=(e.bitcrusherFreqRange-1-this.bitcrusherFreq)*e.bitcrusherOctaveStep,t.bitcrusherQuantization=Math.round(100*this.bitcrusherQuantization/(e.bitcrusherQuantizationRange-1))),S(this.effects)&&(t.pan=Math.round(100*(this.pan-e.panCenter)/e.panCenter)),g(this.effects)&&(t.chorus=Math.round(100*this.chorus/(e.chorusRange-1))),b(this.effects)&&(t.echoSustain=Math.round(100*this.echoSustain/(e.echoSustainRange-1)),t.echoDelayBeats=Math.round(1e3*(this.echoDelay+1)*e.echoDelayStepTicks/(e.ticksPerPart*e.partsPerBeat))/1e3),v(this.effects)&&(t.reverb=Math.round(100*this.reverb/(e.reverbRange-1))),4!=this.type&&(t.fadeInSeconds=Math.round(1e4*St.fadeInSettingToSeconds(this.fadeIn))/1e4,t.fadeOutTicks=St.fadeOutSettingToTicks(this.fadeOut)),5==this.type||7==this.type){t.harmonics=[];for(let n=0;n<e.harmonicsControlPoints;n++)t.harmonics[n]=Math.round(100*this.harmonicsWave.harmonics[n]/e.harmonicsMax)}if(2==this.type)t.wave=e.chipNoises[this.chipNoise].name;else if(3==this.type){t.spectrum=[];for(let n=0;n<e.spectrumControlPoints;n++)t.spectrum[n]=Math.round(100*this.spectrumWave.spectrum[n]/e.spectrumMax)}else if(4==this.type){t.drums=[];for(let n=0;n<e.drumCount;n++){const s=[];for(let t=0;t<e.spectrumControlPoints;t++)s[t]=Math.round(100*this.drumsetSpectrumWaves[n].spectrum[t]/e.spectrumMax);t.drums[n]={filterEnvelope:this.getDrumsetEnvelope(n).name,spectrum:s}}}else if(0==this.type)t.wave=e.chipWaves[this.chipWave].name,t.unison=e.unisons[this.unison].name;else if(6==this.type)t.pulseWidth=Math.round(100*i(this.pulseWidth)*1e5)/1e5;else if(7==this.type)t.unison=e.unisons[this.unison].name,t.stringSustain=Math.round(100*this.stringSustain/(e.stringSustainRange-1));else if(5==this.type)t.unison=e.unisons[this.unison].name;else{if(1!=this.type)throw new Error("Unrecognized instrument type");{const n=[];for(const t of this.operators)n.push({frequency:e.operatorFrequencies[t.frequency].name,amplitude:t.amplitude});t.algorithm=e.algorithms[this.algorithm].name,t.feedbackType=e.feedbacks[this.feedbackType].name,t.feedbackAmplitude=this.feedbackAmplitude,t.operators=n}}const s=[];for(let t=0;t<this.envelopeCount;t++)s.push(this.envelopes[t].toJsonObject());return t.envelopes=s,t}fromJsonObject(t,n,s=0){null==t&&(t={});let i=e.instrumentTypeNames.indexOf(t.type);if(-1==i&&(i=n?2:0),this.setTypeAndReset(i,n),null!=t.preset&&(this.preset=t.preset>>>0),null!=t.volume?this.volume=Y(0,e.volumeRange,Math.round(5-(0|t.volume)/20)):this.volume=0,Array.isArray(t.effects)){let n=0;for(let s=0;s<t.effects.length;s++)n|=1<<e.effectNames.indexOf(t.effects[s]);this.effects=4095&n}else{const e=["none","reverb","chorus","chorus & reverb"];this.effects=e.indexOf(t.effects),-1==this.effects&&(this.effects=2==this.type?0:1)}this.transition=e.transitions.dictionary.normal.index;const a=t.transition||t.envelope;if(null!=a){let n=e.transitions.dictionary[a];if(null==t.fadeInSeconds||null==t.fadeOutTicks){const t={binary:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},seamless:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},sudden:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},hard:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},smooth:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},soft:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},slide:{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},"cross fade":{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},"hard fade":{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},"medium fade":{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},"soft fade":{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}}[a];null!=t&&(n=e.transitions.dictionary[t.transition],this.fadeIn=St.secondsToFadeInSetting(t.fadeInSeconds),this.fadeOut=St.ticksToFadeOutSetting(t.fadeOutTicks))}null!=n&&(this.transition=n.index),this.transition!=e.transitions.dictionary.normal.index&&(this.effects=1024|this.effects)}null!=t.fadeInSeconds&&(this.fadeIn=St.secondsToFadeInSetting(+t.fadeInSeconds)),null!=t.fadeOutTicks&&(this.fadeOut=St.ticksToFadeOutSetting(+t.fadeOutTicks));{const n=t.chord,s={harmony:"simultaneous"},i=e.chords.dictionary[s[n]]||e.chords.dictionary[n];null!=i?this.chord=i.index:2==this.type?this.chord=e.chords.dictionary.arpeggio.index:7==this.type?this.chord=e.chords.dictionary.strum.index:0==this.type?this.chord=e.chords.dictionary.arpeggio.index:1==this.type?this.chord=e.chords.dictionary["custom interval"].index:this.chord=e.chords.dictionary.simultaneous.index}this.unison=e.unisons.dictionary.none.index;const r=t.unison||t.interval||t.chorus;if(null!=r){const t={union:"none",fifths:"fifth",octaves:"octave"},n=e.unisons.dictionary[t[r]]||e.unisons.dictionary[r];null!=n&&(this.unison=n.index)}"custom harmony"==t.chorus&&(this.unison=e.unisons.dictionary.hum.index,this.chord=e.chords.dictionary["custom interval"].index),this.chord==e.chords.dictionary.simultaneous.index||Array.isArray(t.effects)||(this.effects=2048|this.effects),null!=t.pitchShiftSemitones&&(this.pitchShift=Y(0,e.pitchShiftRange,Math.round(+t.pitchShiftSemitones))),null!=t.detuneCents&&(this.detune=Y(0,e.detuneMax+1,Math.round(e.detuneCenter+St.centsToDetune(+t.detuneCents)))),this.vibrato=e.vibratos.dictionary.none.index;const o=t.vibrato||t.effect;if(null!=o){const t={"vibrato light":"light","vibrato delayed":"delayed","vibrato heavy":"heavy"},n=e.vibratos.dictionary[t[r]]||e.vibratos.dictionary[o];null!=n&&(this.vibrato=n.index),n!=e.vibratos.dictionary.none&&(this.effects=512|this.effects)}if(null!=t.pan?(this.pan=Y(0,e.panMax+1,Math.round(e.panCenter+(0|t.pan)*e.panCenter/100)),this.pan!=e.panCenter&&(this.effects=4|this.effects)):this.pan=e.panCenter,null!=t.distortion&&(this.distortion=Y(0,e.distortionRange,Math.round((e.distortionRange-1)*(0|t.distortion)/100))),null!=t.bitcrusherOctave&&(this.bitcrusherFreq=e.bitcrusherFreqRange-1-+t.bitcrusherOctave/e.bitcrusherOctaveStep),null!=t.bitcrusherQuantization&&(this.bitcrusherQuantization=Y(0,e.bitcrusherQuantizationRange,Math.round((e.bitcrusherQuantizationRange-1)*(0|t.bitcrusherQuantization)/100))),null!=t.echoSustain&&(this.echoSustain=Y(0,e.echoSustainRange,Math.round((e.echoSustainRange-1)*(0|t.echoSustain)/100))),null!=t.echoDelayBeats&&(this.echoDelay=Y(0,e.echoDelayRange,Math.round(+t.echoDelayBeats*(e.ticksPerPart*e.partsPerBeat)/e.echoDelayStepTicks-1))),isNaN(t.chorus)||(this.chorus=Y(0,e.chorusRange,Math.round((e.chorusRange-1)*(0|t.chorus)/100))),null!=t.reverb?this.reverb=Y(0,e.reverbRange,Math.round((e.reverbRange-1)*(0|t.reverb)/100)):0==s?this.effects=-2&this.effects:this.reverb=s,null!=t.pulseWidth?this.pulseWidth=Y(0,e.pulseWidthRange,Math.round(Math.log2(+t.pulseWidth/50)/.5-1+8)):this.pulseWidth=e.pulseWidthRange-1,null!=t.harmonics)for(let n=0;n<e.harmonicsControlPoints;n++)this.harmonicsWave.harmonics[n]=Math.max(0,Math.min(e.harmonicsMax,Math.round(e.harmonicsMax*+t.harmonics[n]/100)));else this.harmonicsWave.reset();if(null!=t.spectrum)for(let n=0;n<e.spectrumControlPoints;n++)this.spectrumWave.spectrum[n]=Math.max(0,Math.min(e.spectrumMax,Math.round(e.spectrumMax*+t.spectrum[n]/100)));else this.spectrumWave.reset(n);null!=t.stringSustain?this.stringSustain=Y(0,e.stringSustainRange,Math.round((e.stringSustainRange-1)*(0|t.stringSustain)/100)):this.stringSustain=10,2==this.type&&(this.chipNoise=e.chipNoises.findIndex((e=>e.name==t.wave)),-1==this.chipNoise&&(this.chipNoise=1));const h={custom:"note size",steady:"none","pluck 1":"twang 1","pluck 2":"twang 2","pluck 3":"twang 3"},l=t=>null!=h[t]?e.envelopes.dictionary[h[t]]:e.envelopes.dictionary[t];if(4==this.type&&null!=t.drums)for(let n=0;n<e.drumCount;n++){const s=t.drums[n];if(null!=s){if(this.drumsetEnvelopes[n]=e.envelopes.dictionary["twang 2"].index,null!=s.filterEnvelope){const t=l(s.filterEnvelope);null!=t&&(this.drumsetEnvelopes[n]=t.index)}if(null!=s.spectrum)for(let t=0;t<e.spectrumControlPoints;t++)this.drumsetSpectrumWaves[n].spectrum[t]=Math.max(0,Math.min(e.spectrumMax,Math.round(e.spectrumMax*+s.spectrum[t]/100)))}}if(0==this.type){const n={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0};this.chipWave=null!=n[t.wave]?n[t.wave]:e.chipWaves.findIndex((e=>e.name==t.wave)),-1==this.chipWave&&(this.chipWave=1)}if(1==this.type){this.algorithm=e.algorithms.findIndex((e=>e.name==t.algorithm)),-1==this.algorithm&&(this.algorithm=0),this.feedbackType=e.feedbacks.findIndex((e=>e.name==t.feedbackType)),-1==this.feedbackType&&(this.feedbackType=0),null!=t.feedbackAmplitude?this.feedbackAmplitude=Y(0,e.operatorAmplitudeMax+1,0|t.feedbackAmplitude):this.feedbackAmplitude=0;for(let n=0;n<e.operatorCount;n++){const s=this.operators[n];let i;null!=t.operators&&(i=t.operators[n]),null==i&&(i={}),s.frequency=e.operatorFrequencies.findIndex((t=>t.name==i.frequency)),-1==s.frequency&&(s.frequency=0),null!=i.amplitude?s.amplitude=Y(0,e.operatorAmplitudeMax+1,0|i.amplitude):s.amplitude=0}}if(null!=t.noteFilter?this.noteFilter.fromJsonObject(t.noteFilter):this.noteFilter.reset(),Array.isArray(t.eqFilter))this.eqFilter.fromJsonObject(t.eqFilter);else{this.eqFilter.reset();const n={},s=8e3,i=11,a=8;if(null!=t.filterCutoffHz?n.filterCutoff=Y(0,i,Math.round(i-1+2*Math.log((0|t.filterCutoffHz)/s)/Math.LN2)):n.filterCutoff=0==this.type?6:10,null!=t.filterResonance?n.filterResonance=Y(0,a,Math.round((a-1)*(0|t.filterResonance)/100)):n.filterResonance=0,n.filterEnvelope=l(t.filterEnvelope),n.pulseEnvelope=l(t.pulseEnvelope),n.feedbackEnvelope=l(t.feedbackEnvelope),Array.isArray(t.operators)){n.operatorEnvelopes=[];for(let s=0;s<e.operatorCount;s++){let i;null!=t.operators[s]&&(i=l(t.operators[s].envelope)),n.operatorEnvelopes[s]=null!=i?i:e.envelopes.dictionary.none}}if(null!=t.filter){const e=[10,6,3,0,8,5,2],s=["none","none","none","none","decay 1","decay 2","decay 3"],i=["none","bright","medium","soft","decay bright","decay medium","decay soft"],a={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let r=null!=a[t.filter]?a[t.filter]:i.indexOf(t.filter);-1==r&&(r=0),n.filterCutoff=e[r],n.filterEnvelope=l(s[r]),n.filterResonance=0}this.convertLegacySettings(n)}if(Array.isArray(t.envelopes)){const n=t.envelopes;for(let t=0;t<n.length&&!(this.envelopeCount>=e.maxEnvelopeCount);t++){const e=new ht;e.fromJsonObject(n[t]),this.addEnvelope(e.target,e.index,e.envelope)}}}static frequencyFromPitch(t){return 440*Math.pow(2,(t-69)/12)}static drumsetIndexReferenceDelta(t){return lt.frequencyFromPitch(e.spectrumBasePitch+6*t)/44100}static T(t){return 15+Math.log2(lt.drumsetIndexReferenceDelta(t))}addEnvelope(t,n,s){if(!this.supportsEnvelopeTarget(t,n))throw new Error;if(this.envelopeCount>=e.maxEnvelopeCount)throw new Error;for(;this.envelopes.length<=this.envelopeCount;)this.envelopes[this.envelopes.length]=new ht;const i=this.envelopes[this.envelopeCount];i.target=t,i.index=n,i.envelope=s,this.envelopeCount++}supportsEnvelopeTarget(t,n){const s=e.instrumentAutomationTargets[t];return!(n>=s.maxCount)&&((null==s.compatibleInstruments||-1!=s.compatibleInstruments.indexOf(this.type))&&((null==s.effect||0!=(this.effects&1<<s.effect))&&!(s.isFilter&&n>=this.noteFilter.controlPointCount)))}clearInvalidEnvelopeTargets(){for(let t=0;t<this.envelopeCount;t++){const n=this.envelopes[t].target,s=this.envelopes[t].index;this.supportsEnvelopeTarget(n,s)||(this.envelopes[t].target=e.instrumentAutomationTargets.dictionary.none.index,this.envelopes[t].index=0)}}warmUp(t){if(2==this.type)a(this.chipNoise,G,V);else if(5==this.type)this.harmonicsWave.getCustomWave(this.type);else if(7==this.type)this.harmonicsWave.getCustomWave(this.type);else if(3==this.type)this.spectrumWave.getCustomWave(8);else if(4==this.type)for(let t=0;t<e.drumCount;t++)this.drumsetSpectrumWaves[t].getCustomWave(lt.T(t))}getDrumWave(){if(2==this.type)return a(this.chipNoise,G,V);if(3==this.type)return this.spectrumWave.getCustomWave(8);throw new Error("Unhandled instrument type in getDrumWave")}getDrumsetWave(t){if(4==this.type)return this.drumsetSpectrumWaves[t].getCustomWave(lt.T(t));throw new Error("Unhandled instrument type in getDrumsetWave")}getTransition(){return l(this.effects)?e.transitions[this.transition]:e.transitions.dictionary.normal}getFadeInSeconds(){return 4==this.type?0:St.fadeInSettingToSeconds(this.fadeIn)}getFadeOutTicks(){return 4==this.type?e.drumsetFadeOutTicks:St.fadeOutSettingToTicks(this.fadeOut)}getChord(){return c(this.effects)?e.chords[this.chord]:e.chords.dictionary.simultaneous}getDrumsetEnvelope(t){if(4!=this.type)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return e.envelopes[this.drumsetEnvelopes[t]]}}class ct{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[],this.muted=!1}}class ut{constructor(t){this.channels=[],null!=t?this.fromBase64String(t):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount}getMaxInstrumentsPerChannel(){return Math.max(this.layeredInstruments?e.layeredInstrumentCountMax:e.instrumentCountMin,this.patternInstruments?e.patternInstrumentCountMax:e.instrumentCountMin)}getMaxInstrumentsPerPattern(t){return this.getMaxInstrumentsPerPatternForChannel(this.channels[t])}getMaxInstrumentsPerPatternForChannel(t){return this.layeredInstruments?Math.min(e.layeredInstrumentCountMax,t.instruments.length):1}getChannelIsNoise(t){return t>=this.pitchChannelCount}initToDefault(t=!0){if(this.scale=0,this.key=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.rhythm=1,this.layeredInstruments=!1,this.patternInstruments=!1,t){this.pitchChannelCount=3,this.noiseChannelCount=1;for(let t=0;t<this.getChannelCount();t++){const n=t>=this.pitchChannelCount;this.channels.length<=t&&(this.channels[t]=new ct);const s=this.channels[t];s.octave=n?0:4-t;for(let t=0;t<this.patternsPerChannel;t++)s.patterns.length<=t?s.patterns[t]=new nt:s.patterns[t].reset();s.patterns.length=this.patternsPerChannel;for(let t=0;t<e.instrumentCountMin;t++)s.instruments.length<=t&&(s.instruments[t]=new lt(n)),s.instruments[t].setTypeAndReset(n?2:0,n);s.instruments.length=e.instrumentCountMin;for(let t=0;t<this.barCount;t++)s.bars[t]=t<4?1:0;s.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let t,n=[];if(n.push(Q[ut.O]),n.push(110,Q[this.pitchChannelCount],Q[this.noiseChannelCount]),n.push(115,Q[this.scale]),n.push(107,Q[this.key]),n.push(108,Q[this.loopStart>>6],Q[63&this.loopStart]),n.push(101,Q[this.loopLength-1>>6],Q[this.loopLength-1&63]),n.push(116,Q[this.tempo>>6],Q[63&this.tempo]),n.push(97,Q[this.beatsPerBar-1]),n.push(103,Q[this.barCount-1>>6],Q[this.barCount-1&63]),n.push(106,Q[this.patternsPerChannel-1>>6],Q[this.patternsPerChannel-1&63]),n.push(114,Q[this.rhythm]),n.push(105,Q[this.layeredInstruments<<1|this.patternInstruments]),this.layeredInstruments||this.patternInstruments)for(let t=0;t<this.getChannelCount();t++)n.push(Q[this.channels[t].instruments.length-e.instrumentCountMin]);n.push(111);for(let t=0;t<this.pitchChannelCount;t++)n.push(Q[this.channels[t].octave]);for(let t=0;t<this.getChannelCount();t++)for(let s=0;s<this.channels[t].instruments.length;s++){const i=this.channels[t].instruments[s];n.push(84,Q[i.type]),n.push(118,Q[i.volume]),n.push(117,Q[i.preset>>6],Q[63&i.preset]),n.push(102,Q[i.eqFilter.controlPointCount]);for(let t=0;t<i.eqFilter.controlPointCount;t++){const e=i.eqFilter.controlPoints[t];n.push(Q[e.type],Q[e.freq],Q[e.gain])}if(n.push(113,Q[i.effects>>6],Q[63&i.effects]),d(i.effects)){n.push(Q[i.noteFilter.controlPointCount]);for(let t=0;t<i.noteFilter.controlPointCount;t++){const e=i.noteFilter.controlPoints[t];n.push(Q[e.type],Q[e.freq],Q[e.gain])}}if(l(i.effects)&&n.push(Q[i.transition]),c(i.effects)&&n.push(Q[i.chord]),u(i.effects)&&n.push(Q[i.pitchShift]),p(i.effects)&&n.push(Q[i.detune]),f(i.effects)&&n.push(Q[i.vibrato]),m(i.effects)&&n.push(Q[i.distortion]),y(i.effects)&&n.push(Q[i.bitcrusherFreq],Q[i.bitcrusherQuantization]),S(i.effects)&&n.push(Q[i.pan]),g(i.effects)&&n.push(Q[i.chorus]),b(i.effects)&&n.push(Q[i.echoSustain],Q[i.echoDelay]),v(i.effects)&&n.push(Q[i.reverb]),4!=i.type&&n.push(100,Q[i.fadeIn],Q[i.fadeOut]),5==i.type||7==i.type){n.push(72);const t=new Z;for(let n=0;n<e.harmonicsControlPoints;n++)t.write(e.harmonicsControlPointBits,i.harmonicsWave.harmonics[n]);t.encodeBase64(n)}if(0==i.type)n.push(119,Q[i.chipWave]),n.push(104,Q[i.unison]);else if(1==i.type){n.push(65,Q[i.algorithm]),n.push(70,Q[i.feedbackType]),n.push(66,Q[i.feedbackAmplitude]),n.push(81);for(let t=0;t<e.operatorCount;t++)n.push(Q[i.operators[t].frequency]);n.push(80);for(let t=0;t<e.operatorCount;t++)n.push(Q[i.operators[t].amplitude])}else if(2==i.type)n.push(119,Q[i.chipNoise]);else if(3==i.type){n.push(83);const t=new Z;for(let n=0;n<e.spectrumControlPoints;n++)t.write(e.spectrumControlPointBits,i.spectrumWave.spectrum[n]);t.encodeBase64(n)}else if(4==i.type){n.push(122);for(let t=0;t<e.drumCount;t++)n.push(Q[i.drumsetEnvelopes[t]]);n.push(83);const t=new Z;for(let n=0;n<e.drumCount;n++)for(let s=0;s<e.spectrumControlPoints;s++)t.write(e.spectrumControlPointBits,i.drumsetSpectrumWaves[n].spectrum[s]);t.encodeBase64(n)}else if(5==i.type)n.push(104,Q[i.unison]);else if(6==i.type)n.push(87,Q[i.pulseWidth]);else{if(7!=i.type)throw new Error("Unknown instrument type.");n.push(104,Q[i.unison]),n.push(73,Q[i.stringSustain])}n.push(69,Q[i.envelopeCount]);for(let t=0;t<i.envelopeCount;t++)n.push(Q[i.envelopes[t].target]),e.instrumentAutomationTargets[i.envelopes[t].target].maxCount>1&&n.push(Q[i.envelopes[t].index]),n.push(Q[i.envelopes[t].envelope])}n.push(98),t=new Z;let s=0;for(;1<<s<this.patternsPerChannel+1;)s++;for(let e=0;e<this.getChannelCount();e++)for(let n=0;n<this.barCount;n++)t.write(s,this.channels[e].bars[n]);t.encodeBase64(n),n.push(112),t=new Z;const i=new Z,a=ut.getNeededBits(e.noteSizeMax);for(let n=0;n<this.getChannelCount();n++){const s=this.channels[n],r=this.getMaxInstrumentsPerPattern(n),o=ut.getNeededBits(r-e.instrumentCountMin),h=ut.getNeededBits(s.instruments.length-1),l=this.getChannelIsNoise(n),c=l?0:s.octave*e.pitchesPerOctave;let u=l?4:c;const p=l?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],f=[];for(let t=0;t<p.length;t++)p[t]+=c;for(const n of s.patterns){if(this.patternInstruments){const s=tt(e.instrumentCountMin,r,n.instruments.length);t.write(o,s-e.instrumentCountMin);for(let e=0;e<s;e++)t.write(h,n.instruments[e])}if(n.notes.length>0){t.write(1,1);let s=0;for(const r of n.notes){r.start>s&&(t.write(2,0),t.writePartDuration(r.start-s)),i.clear();for(let t=1;t<r.pitches.length;t++)i.write(1,1);r.pitches.length<e.maxChordSize&&i.write(1,0),i.writePinCount(r.pins.length-1),i.write(a,r.pins[0].size);let n=0,o=r.pitches[0],h=o;const l=[];for(let t=1;t<r.pins.length;t++){const e=r.pins[t],s=o+e.interval;h!=s?(i.write(1,1),l.push(s),h=s):i.write(1,0),i.writePartDuration(e.time-n),n=e.time,i.write(a,e.size)}const c=String.fromCharCode.apply(null,i.encodeBase64([])),d=f.indexOf(c);-1==d?(t.write(2,1),t.concat(i)):(t.write(1,1),t.writeLongTail(0,0,d),f.splice(d,1)),f.unshift(c),f.length>10&&f.pop();const m=r.pitches.concat(l);for(let e=0;e<m.length;e++){const n=m[e],s=p.indexOf(n);if(-1==s){let e=0,s=u;if(s<n)for(;s!=n;)s++,-1==p.indexOf(s)&&e++;else for(;s!=n;)s--,-1==p.indexOf(s)&&e--;t.write(1,0),t.writePitchInterval(e)}else t.write(1,1),t.write(3,s),p.splice(s,1);p.unshift(n),p.length>8&&p.pop(),u=e==r.pitches.length-1?r.pitches[0]:n}0==r.start&&t.write(1,r.continuesLastPattern?1:0),s=r.end}s<this.beatsPerBar*e.partsPerBeat&&(t.write(2,0),t.writePartDuration(this.beatsPerBar*e.partsPerBeat-s))}else t.write(1,0)}}let r=t.lengthBase64(),o=[];for(;r>0;)o.unshift(Q[63&r]),r>>=6;n.push(Q[o.length]),Array.prototype.push.apply(n,o),t.encodeBase64(n);const h=64e3;if(n.length<h)return String.fromCharCode.apply(null,n);{let t="";for(let e=0;e<n.length;e+=h)t+=String.fromCharCode.apply(null,n.slice(e,e+h));return t}}static R(t){return 0==t?t=1:1==t&&(t=0),e.envelopes[Y(0,e.envelopes.length,t)]}fromBase64String(t){if(null==t||""==t)return void this.initToDefault(!0);let n=0;for(;t.charCodeAt(n)<=32;)n++;if(35==t.charCodeAt(n)&&n++,123==t.charCodeAt(n))return void this.fromJsonObject(JSON.parse(0==n?t:t.substring(n)));const s=J[t.charCodeAt(n++)];if(-1==s||s>ut.O||s<ut.N)return;const i=s<3,a=s<4,r=s<5,o=s<6,h=s<7,M=s<8,I=s<9;if(this.initToDefault(I),i){for(const t of this.channels)t.instruments[0].transition=e.transitions.dictionary.interrupt.index,t.instruments[0].effects|=1024;this.channels[3].instruments[0].chipNoise=0}let D=null;if(I){D=[];for(let t=D.length;t<this.getChannelCount();t++){D[t]=[];for(let n=0;n<e.instrumentCountMin;n++)D[t][n]={}}}let P,x=0,F=0,w=-1;for(;n<t.length;)switch(P=t.charCodeAt(n++)){case 110:this.pitchChannelCount=J[t.charCodeAt(n++)],this.noiseChannelCount=J[t.charCodeAt(n++)],this.pitchChannelCount=tt(e.pitchChannelCountMin,e.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=tt(e.noiseChannelCountMin,e.noiseChannelCountMax,this.noiseChannelCount);for(let t=this.channels.length;t<this.getChannelCount();t++)this.channels[t]=new ct;if(this.channels.length=this.getChannelCount(),I)for(let t=D.length;t<this.getChannelCount();t++){D[t]=[];for(let n=0;n<e.instrumentCountMin;n++)D[t][n]={}}break;case 115:this.scale=J[t.charCodeAt(n++)],i&&10==this.scale&&(this.scale=11);break;case 107:this.key=Y(0,e.keys.length,h?11-J[t.charCodeAt(n++)]:J[t.charCodeAt(n++)]);break;case 108:this.loopStart=r?J[t.charCodeAt(n++)]:(J[t.charCodeAt(n++)]<<6)+J[t.charCodeAt(n++)];break;case 101:this.loopLength=r?J[t.charCodeAt(n++)]:(J[t.charCodeAt(n++)]<<6)+J[t.charCodeAt(n++)]+1;break;case 116:this.tempo=a?[95,120,151,190][J[t.charCodeAt(n++)]]:h?[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][J[t.charCodeAt(n++)]]:J[t.charCodeAt(n++)]<<6|J[t.charCodeAt(n++)],this.tempo=Y(e.tempoMin,e.tempoMax+1,this.tempo);break;case 109:I&&(x=J[t.charCodeAt(n++)],x=Y(0,4,x));break;case 97:this.beatsPerBar=i?[6,7,8,9,10][J[t.charCodeAt(n++)]]:J[t.charCodeAt(n++)]+1,this.beatsPerBar=Math.max(e.beatsPerBarMin,Math.min(e.beatsPerBarMax,this.beatsPerBar));break;case 103:{const s=(J[t.charCodeAt(n++)]<<6)+J[t.charCodeAt(n++)]+1;this.barCount=tt(e.barCountMin,e.barCountMax,s);for(let t=0;t<this.getChannelCount();t++){for(let e=this.channels[t].bars.length;e<this.barCount;e++)this.channels[t].bars[e]=1;this.channels[t].bars.length=this.barCount}}break;case 106:{let s;s=M?J[t.charCodeAt(n++)]+1:(J[t.charCodeAt(n++)]<<6)+J[t.charCodeAt(n++)]+1,this.patternsPerChannel=tt(1,e.barCountMax,s);const i=this.getChannelCount();for(let t=0;t<i;t++){const e=this.channels[t].patterns;for(let t=e.length;t<this.patternsPerChannel;t++)e[t]=new nt;e.length=this.patternsPerChannel}}break;case 105:if(I){const s=tt(e.instrumentCountMin,e.patternInstrumentCountMax,J[t.charCodeAt(n++)]+e.instrumentCountMin);this.layeredInstruments=!1,this.patternInstruments=s>1;for(let t=0;t<this.getChannelCount();t++){const e=t>=this.pitchChannelCount;for(let n=this.channels[t].instruments.length;n<s;n++)this.channels[t].instruments[n]=new lt(e);if(this.channels[t].instruments.length=s,o)for(let n=0;n<s;n++)this.channels[t].instruments[n].setTypeAndReset(e?2:0,e);for(let e=D[t].length;e<s;e++)D[t][e]={}}}else{const s=J[t.charCodeAt(n++)];this.layeredInstruments=0!=(2&s),this.patternInstruments=0!=(1&s);for(let s=0;s<this.getChannelCount();s++){let i=1;(this.layeredInstruments||this.patternInstruments)&&(i=tt(e.instrumentCountMin,this.getMaxInstrumentsPerChannel(),J[t.charCodeAt(n++)]+e.instrumentCountMin));const a=this.channels[s],r=this.getChannelIsNoise(s);for(let t=a.instruments.length;t<i;t++)a.instruments[t]=new lt(r);a.instruments.length=i}}break;case 114:this.rhythm=J[t.charCodeAt(n++)];break;case 111:if(i){const s=J[t.charCodeAt(n++)];this.channels[s].octave=Y(0,e.pitchOctaves,J[t.charCodeAt(n++)]+1),s>=this.pitchChannelCount&&(this.channels[s].octave=0)}else if(I)for(let s=0;s<this.getChannelCount();s++)this.channels[s].octave=Y(0,e.pitchOctaves,J[t.charCodeAt(n++)]+1),s>=this.pitchChannelCount&&(this.channels[s].octave=0);else for(let s=0;s<this.pitchChannelCount;s++)this.channels[s].octave=Y(0,e.pitchOctaves,J[t.charCodeAt(n++)]);break;case 84:{w++,w>=this.channels[F].instruments.length&&(F++,w=0),tt(0,this.channels.length-1,F);const s=this.channels[F].instruments[w],i=tt(0,7,J[t.charCodeAt(n++)]);s.setTypeAndReset(i,F>=this.pitchChannelCount),h&&(s.effects=0,x>0&&!this.getChannelIsNoise(F)&&(s.reverb=x,s.effects|=1),s.chord!=e.chords.dictionary.simultaneous.index&&(s.effects|=2048))}break;case 117:{const e=J[t.charCodeAt(n++)]<<6|J[t.charCodeAt(n++)];this.channels[F].instruments[w].preset=e}break;case 119:if(i){const s=[1,2,3,4,5,6,7,8,0],i=J[t.charCodeAt(n++)],a=this.channels[i].instruments[0];a.chipWave=Y(0,e.chipWaves.length,0|s[J[t.charCodeAt(n++)]]),a.convertLegacySettings(D[i][0])}else if(o){const s=[1,2,3,4,5,6,7,8,0];for(let i=0;i<this.getChannelCount();i++)for(const a of this.channels[i].instruments)i>=this.pitchChannelCount?a.chipNoise=Y(0,e.chipNoises.length,J[t.charCodeAt(n++)]):a.chipWave=Y(0,e.chipWaves.length,0|s[J[t.charCodeAt(n++)]])}else if(h){const s=[1,2,3,4,5,6,7,8,0];F>=this.pitchChannelCount?this.channels[F].instruments[w].chipNoise=Y(0,e.chipNoises.length,J[t.charCodeAt(n++)]):this.channels[F].instruments[w].chipWave=Y(0,e.chipWaves.length,0|s[J[t.charCodeAt(n++)]])}else F>=this.pitchChannelCount?this.channels[F].instruments[w].chipNoise=Y(0,e.chipNoises.length,J[t.charCodeAt(n++)]):this.channels[F].instruments[w].chipWave=Y(0,e.chipWaves.length,J[t.charCodeAt(n++)]);break;case 102:if(I)if(h){const s=[10,6,3,0,8,5,2],a=["none","none","none","none","decay 1","decay 2","decay 3"];if(i){const i=J[t.charCodeAt(n++)],r=this.channels[i].instruments[0],o=D[i][0],h=[1,3,4,5][Y(0,s.length,J[t.charCodeAt(n++)])];o.filterCutoff=s[h],o.filterResonance=0,o.filterEnvelope=e.envelopes.dictionary[a[h]],r.convertLegacySettings(o)}else if(o)for(let i=0;i<this.getChannelCount();i++)for(let r=0;r<this.channels[i].instruments.length;r++){const o=this.channels[i].instruments[r],h=D[i][r],l=Y(0,s.length,J[t.charCodeAt(n++)]+1);i<this.pitchChannelCount?(h.filterCutoff=s[l],h.filterResonance=0,h.filterEnvelope=e.envelopes.dictionary[a[l]]):(h.filterCutoff=10,h.filterResonance=0,h.filterEnvelope=e.envelopes.dictionary.none),o.convertLegacySettings(h)}else{const e=Y(0,s.length,J[t.charCodeAt(n++)]),i=this.channels[F].instruments[w],a=D[F][w];a.filterCutoff=s[e],a.filterResonance=0,i.convertLegacySettings(a)}}else{const e=11,s=this.channels[F].instruments[w],i=D[F][w];i.filterCutoff=Y(0,e,J[t.charCodeAt(n++)]),s.convertLegacySettings(i)}else{const s=this.channels[F].instruments[w],i=J[t.charCodeAt(n++)];s.eqFilter.controlPointCount=Y(0,e.filterMaxPoints+1,i);for(let t=s.eqFilter.controlPoints.length;t<s.eqFilter.controlPointCount;t++)s.eqFilter.controlPoints[t]=new rt;for(let i=0;i<s.eqFilter.controlPointCount;i++){const a=s.eqFilter.controlPoints[i];a.type=Y(0,3,J[t.charCodeAt(n++)]),a.freq=Y(0,e.filterFreqRange,J[t.charCodeAt(n++)]),a.gain=Y(0,e.filterGainRange,J[t.charCodeAt(n++)])}for(let t=s.eqFilter.controlPointCount;t<i;t++)n+=3}break;case 121:if(I){const e=8,s=this.channels[F].instruments[w],i=D[F][w];i.filterResonance=Y(0,e,J[t.charCodeAt(n++)]),s.convertLegacySettings(i)}break;case 122:{const s=this.channels[F].instruments[w];if(I)if(4==s.type)for(let i=0;i<e.drumCount;i++)s.drumsetEnvelopes[i]=ut.R(J[t.charCodeAt(n++)]).index;else{const e=D[F][w];e.filterEnvelope=ut.R(J[t.charCodeAt(n++)]),s.convertLegacySettings(e)}else for(let i=0;i<e.drumCount;i++)s.drumsetEnvelopes[i]=Y(0,e.envelopes.length,J[t.charCodeAt(n++)])}break;case 87:{const s=this.channels[F].instruments[w];if(s.pulseWidth=Y(0,e.pulseWidthRange,J[t.charCodeAt(n++)]),I){const e=D[F][w];e.pulseEnvelope=ut.R(J[t.charCodeAt(n++)]),s.convertLegacySettings(e)}}break;case 73:this.channels[F].instruments[w].stringSustain=Y(0,e.stringSustainRange,J[t.charCodeAt(n++)]);break;case 100:if(I){const s=[{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}];if(i){const i=J[t.charCodeAt(n++)],a=s[Y(0,s.length,J[t.charCodeAt(n++)])],r=this.channels[i].instruments[0];r.fadeIn=St.secondsToFadeInSetting(a.fadeInSeconds),r.fadeOut=St.ticksToFadeOutSetting(a.fadeOutTicks),r.transition=e.transitions.dictionary[a.transition].index,r.transition!=e.transitions.dictionary.normal.index&&(r.effects|=1024)}else if(o)for(let i=0;i<this.getChannelCount();i++)for(const a of this.channels[i].instruments){const i=s[Y(0,s.length,J[t.charCodeAt(n++)])];a.fadeIn=St.secondsToFadeInSetting(i.fadeInSeconds),a.fadeOut=St.ticksToFadeOutSetting(i.fadeOutTicks),a.transition=e.transitions.dictionary[i.transition].index,a.transition!=e.transitions.dictionary.normal.index&&(a.effects|=1024)}else{const i=s[Y(0,s.length,J[t.charCodeAt(n++)])],a=this.channels[F].instruments[w];a.fadeIn=St.secondsToFadeInSetting(i.fadeInSeconds),a.fadeOut=St.ticksToFadeOutSetting(i.fadeOutTicks),a.transition=e.transitions.dictionary[i.transition].index,a.transition!=e.transitions.dictionary.normal.index&&(a.effects|=1024)}}else{const s=this.channels[F].instruments[w];s.fadeIn=Y(0,e.fadeInRange,J[t.charCodeAt(n++)]),s.fadeOut=Y(0,e.fadeOutTicks.length,J[t.charCodeAt(n++)])}break;case 99:if(I)if(h)if(i){const s=[0,3,2,0],i=["none","none","none","tremolo2"],a=J[t.charCodeAt(n++)],r=Y(0,s.length,J[t.charCodeAt(n++)]),o=this.channels[a].instruments[0],h=D[a][0];o.vibrato=s[r],null!=h.filterEnvelope&&1!=h.filterEnvelope.type||(h.filterEnvelope=e.envelopes.dictionary[i[r]],o.convertLegacySettings(h)),o.vibrato!=e.vibratos.dictionary.none.index&&(o.effects|=512)}else if(o){const s=[0,1,2,3,0,0],i=["none","none","none","none","tremolo5","tremolo2"];for(let a=0;a<this.getChannelCount();a++)for(let r=0;r<this.channels[a].instruments.length;r++){const o=Y(0,s.length,J[t.charCodeAt(n++)]),h=this.channels[a].instruments[r],l=D[a][r];h.vibrato=s[o],null!=l.filterEnvelope&&1!=l.filterEnvelope.type||(l.filterEnvelope=e.envelopes.dictionary[i[o]],h.convertLegacySettings(l)),h.vibrato!=e.vibratos.dictionary.none.index&&(h.effects|=512),0==x||this.getChannelIsNoise(a)||(h.effects|=1,h.reverb=x)}}else{const s=[0,1,2,3,0,0],i=["none","none","none","none","tremolo5","tremolo2"],a=Y(0,s.length,J[t.charCodeAt(n++)]),r=this.channels[F].instruments[w],o=D[F][w];r.vibrato=s[a],null!=o.filterEnvelope&&1!=o.filterEnvelope.type||(o.filterEnvelope=e.envelopes.dictionary[i[a]],r.convertLegacySettings(o)),r.vibrato!=e.vibratos.dictionary.none.index&&(r.effects|=512),0!=x&&(r.effects|=1,r.reverb=x)}else{const s=this.channels[F].instruments[w],i=Y(0,e.vibratos.length,J[t.charCodeAt(n++)]);s.vibrato=i,s.vibrato!=e.vibratos.dictionary.none.index&&(s.effects|=512)}break;case 104:if(i){const s=J[t.charCodeAt(n++)];this.channels[s].instruments[0].unison=Y(0,e.unisons.length,J[t.charCodeAt(n++)])}else if(o)for(let s=0;s<this.getChannelCount();s++)for(const i of this.channels[s].instruments){const s=J[t.charCodeAt(n++)];let a=Y(0,e.unisons.length,s);8==s&&(a=2,i.chord=3),i.unison=a}else if(h){const s=J[t.charCodeAt(n++)];let i=Y(0,e.unisons.length,s);8==s&&(i=2,this.channels[F].instruments[w].chord=3),this.channels[F].instruments[w].unison=i}else this.channels[F].instruments[w].unison=Y(0,e.unisons.length,J[t.charCodeAt(n++)]);break;case 67:if(I){const s=this.channels[F].instruments[w];s.chord=Y(0,e.chords.length,J[t.charCodeAt(n++)]),s.chord!=e.chords.dictionary.simultaneous.index&&(s.effects|=2048)}break;case 113:{const s=this.channels[F].instruments[w];if(I){s.effects=4095&J[t.charCodeAt(n++)],0==x?s.effects&=-2:v(s.effects)&&(s.reverb=x),s.pan!=e.panCenter&&(s.effects|=4),s.vibrato!=e.vibratos.dictionary.none.index&&(s.effects|=4);const i=D[F][w];s.convertLegacySettings(i)}else{if(s.effects=J[t.charCodeAt(n++)]<<6|J[t.charCodeAt(n++)],d(s.effects)){const i=J[t.charCodeAt(n++)];s.noteFilter.controlPointCount=Y(0,e.filterMaxPoints+1,i);for(let t=s.noteFilter.controlPoints.length;t<s.noteFilter.controlPointCount;t++)s.noteFilter.controlPoints[t]=new rt;for(let i=0;i<s.noteFilter.controlPointCount;i++){const a=s.noteFilter.controlPoints[i];a.type=Y(0,3,J[t.charCodeAt(n++)]),a.freq=Y(0,e.filterFreqRange,J[t.charCodeAt(n++)]),a.gain=Y(0,e.filterGainRange,J[t.charCodeAt(n++)])}for(let t=s.noteFilter.controlPointCount;t<i;t++)n+=3}l(s.effects)&&(s.transition=Y(0,e.transitions.length,J[t.charCodeAt(n++)])),c(s.effects)&&(s.chord=Y(0,e.chords.length,J[t.charCodeAt(n++)])),u(s.effects)&&(s.pitchShift=Y(0,e.pitchShiftRange,J[t.charCodeAt(n++)])),p(s.effects)&&(s.detune=Y(0,e.detuneMax+1,J[t.charCodeAt(n++)])),f(s.effects)&&(s.vibrato=Y(0,e.vibratos.length,J[t.charCodeAt(n++)])),m(s.effects)&&(s.distortion=Y(0,e.distortionRange,J[t.charCodeAt(n++)])),y(s.effects)&&(s.bitcrusherFreq=Y(0,e.bitcrusherFreqRange,J[t.charCodeAt(n++)]),s.bitcrusherQuantization=Y(0,e.bitcrusherQuantizationRange,J[t.charCodeAt(n++)])),S(s.effects)&&(s.pan=Y(0,e.panMax+1,J[t.charCodeAt(n++)])),g(s.effects)&&(s.chorus=Y(0,e.chorusRange,J[t.charCodeAt(n++)])),b(s.effects)&&(s.echoSustain=Y(0,e.echoSustainRange,J[t.charCodeAt(n++)]),s.echoDelay=Y(0,e.echoDelayRange,J[t.charCodeAt(n++)])),v(s.effects)&&(s.reverb=Y(0,e.reverbRange,J[t.charCodeAt(n++)]))}s.effects&=4095}break;case 118:if(i){const s=J[t.charCodeAt(n++)],i=this.channels[s].instruments[0];i.volume=Y(0,e.volumeRange,J[t.charCodeAt(n++)]),5==i.volume&&(i.volume=e.volumeRange-1)}else if(o)for(let s=0;s<this.getChannelCount();s++)for(const i of this.channels[s].instruments)i.volume=Y(0,e.volumeRange,J[t.charCodeAt(n++)]),5==i.volume&&(i.volume=e.volumeRange-1);else if(h){const s=this.channels[F].instruments[w];s.volume=Y(0,e.volumeRange,J[t.charCodeAt(n++)]),5==s.volume&&(s.volume=e.volumeRange-1)}else{this.channels[F].instruments[w].volume=Y(0,e.volumeRange,J[t.charCodeAt(n++)])}break;case 76:if(I){this.channels[F].instruments[w].pan=Y(0,e.panMax+1,J[t.charCodeAt(n++)])}break;case 65:{const s=this.channels[F].instruments[w];if(s.algorithm=Y(0,e.algorithms.length,J[t.charCodeAt(n++)]),I){const t=D[F][w];s.convertLegacySettings(t)}}break;case 70:this.channels[F].instruments[w].feedbackType=Y(0,e.feedbacks.length,J[t.charCodeAt(n++)]);break;case 66:this.channels[F].instruments[w].feedbackAmplitude=Y(0,e.operatorAmplitudeMax+1,J[t.charCodeAt(n++)]);break;case 86:if(I){const e=this.channels[F].instruments[w],s=D[F][w];s.feedbackEnvelope=ut.R(J[t.charCodeAt(n++)]),e.convertLegacySettings(s)}break;case 81:for(let s=0;s<e.operatorCount;s++)this.channels[F].instruments[w].operators[s].frequency=Y(0,e.operatorFrequencies.length,J[t.charCodeAt(n++)]);break;case 80:for(let s=0;s<e.operatorCount;s++)this.channels[F].instruments[w].operators[s].amplitude=Y(0,e.operatorAmplitudeMax+1,J[t.charCodeAt(n++)]);break;case 69:{const s=this.channels[F].instruments[w];if(I){const i=D[F][w];i.operatorEnvelopes=[];for(let s=0;s<e.operatorCount;s++)i.operatorEnvelopes[s]=ut.R(J[t.charCodeAt(n++)]);s.convertLegacySettings(i)}else{const i=Y(0,e.maxEnvelopeCount+1,J[t.charCodeAt(n++)]);for(let a=0;a<i;a++){const i=Y(0,e.instrumentAutomationTargets.length,J[t.charCodeAt(n++)]);let a=0;const r=e.instrumentAutomationTargets[i].maxCount;r>1&&(a=Y(0,r,J[t.charCodeAt(n++)]));const o=Y(0,e.envelopes.length,J[t.charCodeAt(n++)]);s.addEnvelope(i,a,o)}}}break;case 83:{const s=this.channels[F].instruments[w];if(3==s.type){const i=Math.ceil(e.spectrumControlPoints*e.spectrumControlPointBits/6),a=new _(t,n,n+i);for(let t=0;t<e.spectrumControlPoints;t++)s.spectrumWave.spectrum[t]=a.read(e.spectrumControlPointBits);s.spectrumWave.markCustomWaveDirty(),n+=i}else{if(4!=s.type)throw new Error("Unhandled instrument type for spectrum song tag code.");{const i=Math.ceil(e.drumCount*e.spectrumControlPoints*e.spectrumControlPointBits/6),a=new _(t,n,n+i);for(let t=0;t<e.drumCount;t++){for(let n=0;n<e.spectrumControlPoints;n++)s.drumsetSpectrumWaves[t].spectrum[n]=a.read(e.spectrumControlPointBits);s.drumsetSpectrumWaves[t].markCustomWaveDirty()}n+=i}}}break;case 72:{const s=this.channels[F].instruments[w],i=Math.ceil(e.harmonicsControlPoints*e.harmonicsControlPointBits/6),a=new _(t,n,n+i);for(let t=0;t<e.harmonicsControlPoints;t++)s.harmonicsWave.harmonics[t]=a.read(e.harmonicsControlPointBits);s.harmonicsWave.markCustomWaveDirty(),n+=i}break;case 98:{let e;if(i){const s=J[t.charCodeAt(n++)],i=J[t.charCodeAt(n++)];e=Math.ceil(.5*i);const a=new _(t,n,n+e);for(let t=0;t<i;t++)this.channels[s].bars[t]=a.read(3)+1}else if(r){let s=0;for(;1<<s<this.patternsPerChannel;)s++;e=Math.ceil(this.getChannelCount()*this.barCount*s/6);const i=new _(t,n,n+e);for(let t=0;t<this.getChannelCount();t++)for(let e=0;e<this.barCount;e++)this.channels[t].bars[e]=i.read(s)+1}else{let s=0;for(;1<<s<this.patternsPerChannel+1;)s++;e=Math.ceil(this.getChannelCount()*this.barCount*s/6);const i=new _(t,n,n+e);for(let t=0;t<this.getChannelCount();t++)for(let e=0;e<this.barCount;e++)this.channels[t].bars[e]=i.read(s)}n+=e}break;case 112:{let s,a=0;if(i)s=J[t.charCodeAt(n++)],n++,a=J[t.charCodeAt(n++)],a<<=6,a+=J[t.charCodeAt(n++)];else{s=0;let e=tt(1,4,J[t.charCodeAt(n++)]);for(;e>0;)a<<=6,a+=J[t.charCodeAt(n++)],e--}const r=new _(t,n,n+a);n+=a;const o=ut.getNeededBits(e.noteSizeMax);for(;;){const t=this.channels[s],n=this.getChannelIsNoise(s),a=this.getMaxInstrumentsPerPattern(s),l=ut.getNeededBits(a-e.instrumentCountMin),c=ut.getNeededBits(t.instruments.length-1),u=n?0:12*t.octave;let p=n?4:u;const f=n?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],d=[];for(let t=0;t<f.length;t++)f[t]+=u;for(let n=0;n<this.patternsPerChannel;n++){const s=t.patterns[n];if(I)s.instruments[0]=tt(0,t.instruments.length-1,r.read(c)),s.instruments.length=1;else if(this.patternInstruments){const n=tt(e.instrumentCountMin,a,r.read(l)+e.instrumentCountMin);for(let e=0;e<n;e++)s.instruments[e]=tt(0,t.instruments.length-1,r.read(c));s.instruments.length=n}else s.instruments[0]=0,s.instruments.length=e.instrumentCountMin;if(!i&&0==r.read(1)){s.notes.length=0;continue}let u=0;const m=s.notes;let y=0;for(;u<this.beatsPerBar*e.partsPerBeat;){const t=1==r.read(1);let n=!1,s=0;if(t?s=tt(0,d.length-1,r.readLongTail(0,0)):n=1==r.read(1),t||n){let n,i,a;if(t)n=d[s],d.splice(s,1);else{for(n={},n.pitchCount=1;n.pitchCount<e.maxChordSize&&1==r.read(1);)n.pitchCount++;n.pinCount=r.readPinCount(),n.initialSize=r.read(o),n.pins=[],n.length=0,n.bendCount=0;for(let t=0;t<n.pinCount;t++){let t={};t.pitchBend=1==r.read(1),t.pitchBend&&n.bendCount++,n.length+=h?r.readLegacyPartDuration()*e.partsPerBeat/e.rhythms[this.rhythm].stepsPerBeat:r.readPartDuration(),t.time=n.length,t.size=r.read(o),n.pins.push(t)}}d.unshift(n),d.length>10&&d.pop(),m.length<=y?(i=new et(0,u,u+n.length,n.initialSize),m[y++]=i):(i=m[y++],i.start=u,i.end=u+n.length,i.pins[0].size=n.initialSize);let l=0;const c=[];for(let t=0;t<n.pitchCount+n.bendCount;t++){if(1==r.read(1)){const t=tt(0,f.length-1,r.read(3));a=f[t],f.splice(t,1)}else{const t=r.readPitchInterval();a=p;let e=t;for(;e>0;){for(a++;-1!=f.indexOf(a);)a++;e--}for(;e<0;){for(a--;-1!=f.indexOf(a);)a--;e++}}f.unshift(a),f.length>8&&f.pop(),t<n.pitchCount?i.pitches[l++]=a:c.push(a),p=t==n.pitchCount-1?i.pitches[0]:a}i.pitches.length=l,c.unshift(i.pitches[0]);let S=1;for(const t of n.pins){t.pitchBend&&c.shift();const e=c[0]-i.pitches[0];if(i.pins.length<=S)i.pins[S++]=X(e,t.time,t.size);else{const n=i.pins[S++];n.interval=e,n.time=t.time,n.size=t.size}}i.pins.length=S,0!=i.start||I?i.continuesLastPattern=!1:i.continuesLastPattern=1==r.read(1),u=tt(0,this.beatsPerBar*e.partsPerBeat,i.end)}else{u+=h?r.readLegacyPartDuration()*e.partsPerBeat/e.rhythms[this.rhythm].stepsPerBeat:r.readPartDuration()}}m.length=y}if(i)break;if(s++,s>=this.getChannelCount())break}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode(P)+" at index "+(n-1))}}toJsonObject(t=!0,n=1,s=!0){const i=[];for(let a=0;a<this.getChannelCount();a++){const r=this.channels[a],o=[],h=this.getChannelIsNoise(a);for(const t of r.instruments)o.push(t.toJsonObject());const l=[];for(const t of r.patterns){const n=[];for(const s of t.notes){const t=[];for(const n of s.pins)t.push({tick:(n.time+s.start)*e.rhythms[this.rhythm].stepsPerBeat/e.partsPerBeat,pitchBend:n.interval,volume:Math.round(100*n.size/3)});const i={pitches:s.pitches,points:t};0==s.start&&(i.continuesLastPattern=s.continuesLastPattern),n.push(i)}const s={notes:n};this.patternInstruments&&(s.instruments=t.instruments.map((t=>t+1))),l.push(s)}const c=[];if(t)for(let t=0;t<this.loopStart;t++)c.push(r.bars[t]);for(let t=0;t<n;t++)for(let t=this.loopStart;t<this.loopStart+this.loopLength;t++)c.push(r.bars[t]);if(s)for(let t=this.loopStart+this.loopLength;t<this.barCount;t++)c.push(r.bars[t]);const u={type:h?"drum":"pitch",instruments:o,patterns:l,sequence:c};h||(u.octaveScrollBar=r.octave-1),i.push(u)}return{format:ut.W,version:ut.O,scale:e.scales[this.scale].name,key:e.keys[this.key].name,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:e.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,layeredInstruments:this.layeredInstruments,patternInstruments:this.patternInstruments,channels:i}}fromJsonObject(t){if(this.initToDefault(!0),!t)return;if(this.scale=11,null!=t.scale){const n={"romani :)":"dbl harmonic :)","romani :(":"dbl harmonic :(",enigma:"strange"},s=null!=n[t.scale]?n[t.scale]:t.scale,i=e.scales.findIndex((t=>t.name==s));-1!=i&&(this.scale=i)}if(null!=t.key)if("number"==typeof t.key)this.key=(t.key+1200>>>0)%e.keys.length;else if("string"==typeof t.key){const e=t.key,n=e.charAt(0).toUpperCase(),s=e.charAt(1).toLowerCase();let i={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n];const a={"#":1,"♯":1,b:-1,"♭":-1}[s];null!=i&&(null!=a&&(i+=a),i<0&&(i+=12),i%=12,this.key=i)}null!=t.beatsPerMinute&&(this.tempo=Y(e.tempoMin,e.tempoMax+1,0|t.beatsPerMinute));let n=0;null!=t.reverb&&(n=Y(0,4,0|t.reverb)),null!=t.beatsPerBar&&(this.beatsPerBar=Math.max(e.beatsPerBarMin,Math.min(e.beatsPerBarMax,0|t.beatsPerBar)));let s=4;null!=t.ticksPerBeat&&(s=0|t.ticksPerBeat||4,this.rhythm=e.rhythms.findIndex((t=>t.stepsPerBeat==s)),-1==this.rhythm&&(this.rhythm=1));let i=1,a=1,r=1;if(null!=t.channels)for(const e of t.channels)e.instruments&&(i=Math.max(i,0|e.instruments.length)),e.patterns&&(a=Math.max(a,0|e.patterns.length)),e.sequence&&(r=Math.max(r,0|e.sequence.length));null!=t.layeredInstruments?this.layeredInstruments=!!t.layeredInstruments:this.layeredInstruments=!1,null!=t.patternInstruments?this.patternInstruments=!!t.patternInstruments:this.patternInstruments=i>1,this.patternsPerChannel=Math.min(a,e.barCountMax),this.barCount=Math.min(r,e.barCountMax),null!=t.introBars&&(this.loopStart=Y(0,this.barCount,0|t.introBars)),null!=t.loopBars&&(this.loopLength=Y(1,this.barCount-this.loopStart+1,0|t.loopBars));const o=[],h=[];if(null!=t.channels)for(let i=0;i<t.channels.length;i++){let a=t.channels[i];const r=new ct;let l=!1;if(l=null!=a.type?"drum"==a.type:i>=3,l?h.push(r):o.push(r),null!=a.octaveScrollBar&&(r.octave=Y(0,e.pitchOctaves,1+(0|a.octaveScrollBar)),l&&(r.octave=0)),Array.isArray(a.instruments)){const t=a.instruments;for(let e=0;e<t.length&&!(e>=this.getMaxInstrumentsPerChannel());e++){const s=new lt(l);r.instruments[e]=s,s.fromJsonObject(t[e],l,n)}}for(let t=0;t<this.patternsPerChannel;t++){const n=new nt;let i;if(r.patterns[t]=n,a.patterns&&(i=a.patterns[t]),null!=i){if(this.patternInstruments)if(Array.isArray(i.instruments)){const t=i.instruments,s=Y(e.instrumentCountMin,this.getMaxInstrumentsPerPatternForChannel(r)+1,t.length);for(let e=0;e<s;e++)n.instruments[e]=Y(0,r.instruments.length,(0|t[e])-1);n.instruments.length=s}else n.instruments[0]=Y(0,r.instruments.length,(0|i.instrument)-1),n.instruments.length=1;if(i.notes&&i.notes.length>0){const t=Math.min(this.beatsPerBar*e.partsPerBeat,i.notes.length>>>0);let a=0;for(let r=0;r<i.notes.length&&!(r>=t);r++){const t=i.notes[r];if(!(t&&t.pitches&&t.pitches.length>=1&&t.points&&t.points.length>=2))continue;const o=new et(0,0,0,0);o.pitches=[],o.pins=[];for(let n=0;n<t.pitches.length;n++){const s=0|t.pitches[n];if(-1==o.pitches.indexOf(s)&&(o.pitches.push(s),o.pitches.length>=e.maxChordSize))break}if(o.pitches.length<1)continue;let h=a,c=0;for(let n=0;n<t.points.length;n++){const i=t.points[n];if(null==i||null==i.tick)continue;const a=null==i.pitchBend?0:0|i.pitchBend,r=Math.round(+i.tick*e.partsPerBeat/s),l=null==i.volume?3:Math.max(0,Math.min(3,Math.round(3*(0|i.volume)/100)));if(!(r>this.beatsPerBar*e.partsPerBeat)){if(0==o.pins.length){if(r<h)continue;o.start=r,c=a}else if(r<=h)continue;h=r,o.pins.push(X(a-c,r-o.start,l))}}if(o.pins.length<2)continue;o.end=o.pins[o.pins.length-1].time+o.start;const u=l?e.drumCount-1:e.maxPitch;let p=u,f=0;for(let t=0;t<o.pitches.length;t++)o.pitches[t]+=c,(o.pitches[t]<0||o.pitches[t]>u)&&(o.pitches.splice(t,1),t--),o.pitches[t]<p&&(p=o.pitches[t]),o.pitches[t]>f&&(f=o.pitches[t]);if(!(o.pitches.length<1)){for(let t=0;t<o.pins.length;t++){const e=o.pins[t];e.interval+p<0&&(e.interval=-p),e.interval+f>u&&(e.interval=u-f),t>=2&&e.interval==o.pins[t-1].interval&&e.interval==o.pins[t-2].interval&&e.size==o.pins[t-1].size&&e.size==o.pins[t-2].size&&(o.pins.splice(t-1,1),t--)}0==o.start?o.continuesLastPattern=!0===t.continuesLastPattern:o.continuesLastPattern=!1,n.notes.push(o),a=o.end}}}}}r.patterns.length=this.patternsPerChannel;for(let t=0;t<this.barCount;t++)r.bars[t]=null!=a.sequence?Math.min(this.patternsPerChannel,a.sequence[t]>>>0):0;r.bars.length=this.barCount}o.length>e.pitchChannelCountMax&&(o.length=e.pitchChannelCountMax),h.length>e.noiseChannelCountMax&&(h.length=e.noiseChannelCountMax),this.pitchChannelCount=o.length,this.noiseChannelCount=h.length,this.channels.length=0,Array.prototype.push.apply(this.channels,o),Array.prototype.push.apply(this.channels,h)}getPattern(t,e){if(e<0||e>=this.barCount)return null;const n=this.channels[t].bars[e];return 0==n?null:this.channels[t].patterns[n-1]}getBeatsPerMinute(){return this.tempo}static getNeededBits(t){return 32-Math.clz32(Math.ceil(t+1)-1)}}ut.W="BeepBox",ut.N=2,ut.O=9;class pt{constructor(){this.delayLine=null,this.reset()}reset(){this.delayIndex=-1,this.allPassSample=0,this.allPassPrevInput=0,this.shelfSample=0,this.shelfPrevInput=0,this.fractionalDelaySample=0,this.prevDelayLength=-1,this.delayResetOffset=0}}class ft{constructor(){this.noteSecondsStart=0,this.noteSecondsEnd=0,this.noteTicksStart=0,this.noteTicksEnd=0,this.noteSizeStart=e.noteSizeMax,this.noteSizeEnd=e.noteSizeMax,this.prevNoteSize=e.noteSizeMax,this.nextNoteSize=e.noteSizeMax,this.V=e.noteSizeMax,this.prevNoteSecondsStart=0,this.prevNoteSecondsEnd=0,this.prevNoteTicksStart=0,this.prevNoteTicksEnd=0,this.q=e.noteSizeMax,this.prevSlideStart=!1,this.prevSlideEnd=!1,this.nextSlideStart=!1,this.nextSlideEnd=!1,this.prevSlideRatioStart=0,this.prevSlideRatioEnd=0,this.nextSlideRatioStart=0,this.nextSlideRatioEnd=0,this.envelopeStarts=[],this.envelopeEnds=[],this.lowpassCutoffDecayVolumeCompensation=1;for(let t=0;t<33;t++)this.envelopeStarts[t]=1,this.envelopeEnds[t]=1;this.reset()}reset(){this.noteSecondsEnd=0,this.noteTicksEnd=0,this.V=e.noteSizeMax,this.prevNoteSecondsEnd=0,this.prevNoteTicksEnd=0,this.q=e.noteSizeMax}computeEnvelopes(t,n,s,i,a,r){const o=t.getTransition();null==r||!r.atNoteStart||o.continues||r.forceContinueAtStart||(this.prevNoteSecondsEnd=this.noteSecondsEnd,this.prevNoteTicksEnd=this.noteTicksEnd,this.q=this.V,this.noteSecondsEnd=0,this.noteTicksEnd=0),null!=r&&(null!=r.note?this.V=r.note.pins[r.note.pins.length-1].size:this.V=e.noteSizeMax);const h=i-s,l=this.noteSecondsEnd,c=l+a,u=this.noteTicksEnd,p=u+h,f=this.prevNoteSecondsEnd,d=f+a,m=this.prevNoteTicksEnd,y=m+h,S=1/(e.ticksPerPart*e.partsPerBeat),g=S*s,b=S*i;let v=this.V,M=this.V,I=this.q,D=0,P=!1,x=!1,F=!1,w=!1,k=0,L=0,T=0,C=0;if(null!=r&&null!=r.note&&!r.passedEndOfNote){const t=r.note.getEndPinIndex(n),a=r.note.pins[t-1],h=r.note.pins[t],l=(r.note.start+a.time)*e.ticksPerPart,c=(r.note.start+h.time)*e.ticksPerPart,u=(s-l)/(c-l),p=(i-l)/(c-l);if(v=a.size+(h.size-a.size)*u,M=a.size+(h.size-a.size)*p,o.slides){const t=r.noteStartPart*e.ticksPerPart,n=r.noteEndPart*e.ticksPerPart,a=.5*(n-t),h=Math.min(a,o.slideTicks);null==r.prevNote||r.forceContinueAtStart||(s-t<h&&(P=!0,k=.5*(1-(s-t)/h)),i-t<h&&(x=!0,L=.5*(1-(i-t)/h))),null==r.nextNote||r.forceContinueAtEnd||(D=r.nextNote.pins[0].size,n-s<h&&(F=!0,T=.5*(1-(n-s)/h)),n-i<h&&(w=!0,C=.5*(1-(n-i)/h)))}}let O=1,E=!1;for(let n=0;n<=t.envelopeCount;n++){let s,i,a;if(n==t.envelopeCount){if(E)break;s=e.instrumentAutomationTargets.dictionary.noteVolume,i=0,a=e.envelopes.dictionary["note size"]}else{let r=t.envelopes[n];s=e.instrumentAutomationTargets[r.target],i=r.index,a=e.envelopes[r.envelope],0==a.type&&(E=!0)}if(null!=s.computeIndex){const e=s.computeIndex+i;let n=ft.computeEnvelope(a,l,g,v),r=ft.computeEnvelope(a,c,b,M);if(P){n+=(ft.computeEnvelope(a,f,g,I)-n)*k}if(x){r+=(ft.computeEnvelope(a,d,b,I)-r)*L}if(F){n+=(ft.computeEnvelope(a,0,g,D)-n)*T}if(w){r+=(ft.computeEnvelope(a,0,b,D)-r)*C}if(this.envelopeStarts[e]*=n,this.envelopeEnds[e]*=r,s.isFilter){const e=t.noteFilter;e.controlPointCount>i&&0==e.controlPoints[i].type&&(O=Math.max(O,ft.getLowpassCutoffDecayVolumeCompensation(a)))}}}this.noteSecondsStart=l,this.noteSecondsEnd=c,this.noteTicksStart=u,this.noteTicksEnd=p,this.prevNoteSecondsStart=f,this.prevNoteSecondsEnd=d,this.prevNoteTicksStart=m,this.prevNoteTicksEnd=y,this.prevNoteSize=I,this.nextNoteSize=D,this.noteSizeStart=v,this.noteSizeEnd=M,this.prevSlideStart=P,this.prevSlideEnd=x,this.nextSlideStart=F,this.nextSlideEnd=w,this.prevSlideRatioStart=k,this.prevSlideRatioEnd=L,this.nextSlideRatioStart=T,this.nextSlideRatioEnd=C,this.lowpassCutoffDecayVolumeCompensation=O}clearEnvelopes(t){for(let n=0;n<t.envelopeCount;n++){const s=t.envelopes[n],i=e.instrumentAutomationTargets[s.target];if(null!=i.computeIndex){const t=i.computeIndex+s.index;this.envelopeStarts[t]=1,this.envelopeEnds[t]=1}}this.envelopeStarts[0]=1,this.envelopeEnds[0]=1}static computeEnvelope(t,e,n,s){switch(t.type){case 0:return St.noteSizeToVolumeMult(s);case 1:return 1;case 4:return 1/(1+e*t.speed);case 5:return 1-1/(1+e*t.speed);case 6:return.5-.5*Math.cos(2*n*Math.PI*t.speed);case 7:return.75-.25*Math.cos(2*n*Math.PI*t.speed);case 2:return Math.max(1,2-10*e);case 3:const i=.25/Math.sqrt(t.speed);return e<i?e/i:1/(1+(e-i)*t.speed);case 8:return Math.pow(2,-t.speed*e);default:throw new Error("Unrecognized operator envelope type.")}}static getLowpassCutoffDecayVolumeCompensation(t){return 8==t.type?1.25+.025*t.speed:4==t.type?1+.02*t.speed:1}}class dt{constructor(){this.pitches=Array(e.maxChordSize).fill(0),this.pitchCount=0,this.chordSize=0,this.drumsetPitch=null,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.freshlyAllocated=!0,this.atNoteStart=!1,this.isOnLastTick=!1,this.passedEndOfNote=!1,this.forceContinueAtStart=!1,this.forceContinueAtEnd=!1,this.noteStartPart=0,this.noteEndPart=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.sample=0,this.phases=[],this.phaseDeltas=[],this.expressionStarts=[],this.expressionDeltas=[],this.phaseDeltaScales=[],this.prevVibrato=null,this.pulseWidth=0,this.pulseWidthDelta=0,this.pickedStrings=[],this.noteFilters=[],this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.specialIntervalMult=0,this.specialIntervalExpressionMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.envelopeComputer=new ft,this.reset()}reset(){this.sample=0;const t=Math.max(e.maxChordSize,e.operatorCount);for(let e=0;e<t;e++)this.phases[e]=0,this.feedbackOutputs[e]=0;for(let t=0;t<this.noteFilterCount;t++)this.noteFilters[t].resetOutput();this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.liveInputSamplesHeld=0;for(const t of this.pickedStrings)t.reset();this.envelopeComputer.reset(),this.prevVibrato=null,this.drumsetPitch=null}}class mt{constructor(){this.awake=!1,this.computed=!1,this.tonesAddedInThisTick=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0,this.activeTones=new j,this.releasedTones=new j,this.liveInputTones=new j,this.eqFilterVolumeStart=1,this.eqFilterVolumeDelta=0,this.mixVolumeStart=1,this.mixVolumeDelta=0,this.delayInputMultStart=0,this.delayInputMultDelta=0,this.distortionStart=0,this.distortionEnd=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1,this.bitcrusherPhaseDelta=0,this.bitcrusherPhaseDeltaScale=1,this.bitcrusherScale=1,this.bitcrusherScaleScale=1,this.bitcrusherFoldLevel=1,this.bitcrusherFoldLevelScale=1,this.eqFilters=[],this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.panningDelayLine=null,this.panningDelayPos=0,this.panningVolumeStartL=0,this.panningVolumeStartR=0,this.panningVolumeDeltaL=0,this.panningVolumeDeltaR=0,this.panningOffsetStartL=0,this.panningOffsetStartR=0,this.panningOffsetDeltaL=0,this.panningOffsetDeltaR=0,this.chorusDelayLineL=null,this.chorusDelayLineR=null,this.chorusDelayLineDirty=!1,this.chorusDelayPos=0,this.chorusPhase=0,this.chorusStart=0,this.chorusEnd=0,this.echoDelayLineL=null,this.echoDelayLineR=null,this.echoDelayLineDirty=!1,this.echoDelayPos=0,this.echoDelayOffsetStart=0,this.echoDelayOffsetEnd=0,this.echoDelayOffsetLastTick=0,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=0,this.echoDelayOffsetLastTickIsComputed=!1,this.echoMultStart=0,this.echoMultDelta=0,this.echoShelfA1=0,this.echoShelfB0=0,this.echoShelfB1=0,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbDelayLine=null,this.reverbDelayLineDirty=!1,this.reverbDelayPos=0,this.reverbMultStart=0,this.reverbMultDelta=0,this.reverbShelfA1=0,this.reverbShelfB0=0,this.reverbShelfB1=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0}allocateNecessaryBuffers(t,n,s){if(S(n.effects)&&(null==this.panningDelayLine||this.panningDelayLine.length<t.panningDelayBufferSize)&&(this.panningDelayLine=new Float32Array(t.panningDelayBufferSize)),g(n.effects)&&((null==this.chorusDelayLineL||this.chorusDelayLineL.length<t.chorusDelayBufferSize)&&(this.chorusDelayLineL=new Float32Array(t.chorusDelayBufferSize)),(null==this.chorusDelayLineR||this.chorusDelayLineR.length<t.chorusDelayBufferSize)&&(this.chorusDelayLineR=new Float32Array(t.chorusDelayBufferSize))),b(n.effects)){const t=Math.max(e.echoDelayRange>>1,n.echoDelay+1),i=2*St.fittingPowerOfTwo(t*e.echoDelayStepTicks*s);if(null==this.echoDelayLineL||null==this.echoDelayLineR)this.echoDelayLineL=new Float32Array(i),this.echoDelayLineR=new Float32Array(i);else if(this.echoDelayLineL.length<i||this.echoDelayLineR.length<i){const t=new Float32Array(i),e=new Float32Array(i),n=this.echoDelayLineL.length-1;for(let s=0;s<this.echoDelayLineL.length;s++)t[s]=this.echoDelayLineL[this.echoDelayPos+s&n],e[s]=this.echoDelayLineL[this.echoDelayPos+s&n];this.echoDelayPos=this.echoDelayLineL.length,this.echoDelayLineL=t,this.echoDelayLineR=e}}v(n.effects)&&null==this.reverbDelayLine&&(this.reverbDelayLine=new Float32Array(e.reverbDelayBufferSize))}deactivate(){this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1;for(let t=0;t<this.eqFilterCount;t++)this.eqFilters[t].resetOutput();if(this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.panningDelayPos=0,null!=this.panningDelayLine)for(let t=0;t<this.panningDelayLine.length;t++)this.panningDelayLine[t]=0;this.echoDelayOffsetLastTickIsComputed=!1,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.awake=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0}resetAllEffects(){if(this.deactivate(),this.chorusDelayLineDirty){for(let t=0;t<this.chorusDelayLineL.length;t++)this.chorusDelayLineL[t]=0;for(let t=0;t<this.chorusDelayLineR.length;t++)this.chorusDelayLineR[t]=0}if(this.echoDelayLineDirty){for(let t=0;t<this.echoDelayLineL.length;t++)this.echoDelayLineL[t]=0;for(let t=0;t<this.echoDelayLineR.length;t++)this.echoDelayLineR[t]=0}if(this.reverbDelayLineDirty)for(let t=0;t<this.reverbDelayLine.length;t++)this.reverbDelayLine[t]=0;this.chorusPhase=0}compute(t,n,s,i,a){this.computed=!0,this.allocateNecessaryBuffers(t,n,s);const r=t.samplesPerSecond,o=t.tickSampleCountdown,h=o/s,l=(o-i)/s,c=m(n.effects),u=y(n.effects),p=S(n.effects),f=g(n.effects),d=b(n.effects),M=v(n.effects);if(c&&(this.distortionStart=Math.min(1,n.distortion/(e.distortionRange-1)),this.distortionEnd=Math.min(1,n.distortion/(e.distortionRange-1))),u){const s=n.bitcrusherFreq,a=n.bitcrusherFreq,o=n.bitcrusherQuantization,h=n.bitcrusherQuantization,l=e.keys[t.song.key].basePitch,c=lt.frequencyFromPitch(l+60)*Math.pow(2,(e.bitcrusherFreqRange-1-s)*e.bitcrusherOctaveStep),u=lt.frequencyFromPitch(l+60)*Math.pow(2,(e.bitcrusherFreqRange-1-a)*e.bitcrusherOctaveStep),p=Math.min(1,c/r),f=Math.min(1,u/r);this.bitcrusherPhaseDelta=p,this.bitcrusherPhaseDeltaScale=Math.pow(f/p,1/i);const d=2*e.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(e.bitcrusherQuantizationRange-1-o))),m=2*e.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(e.bitcrusherQuantizationRange-1-h)));this.bitcrusherScale=d,this.bitcrusherScaleScale=Math.pow(m/d,1/i);const y=2*e.bitcrusherBaseVolume*Math.pow(1.5,e.bitcrusherQuantizationRange-1-o),S=2*e.bitcrusherBaseVolume*Math.pow(1.5,e.bitcrusherQuantizationRange-1-h);this.bitcrusherFoldLevel=y,this.bitcrusherFoldLevelScale=Math.pow(S/y,1/i)}let I=1;const D=n.eqFilter;for(let t=0;t<D.controlPointCount;t++){const e=D.controlPoints[t];e.toCoefficients(St.tempFilterStartCoefficients,r,1,1),e.toCoefficients(St.tempFilterEndCoefficients,r,1,1),this.eqFilters.length<=t&&(this.eqFilters[t]=new H),this.eqFilters[t].loadCoefficientsWithGradient(St.tempFilterStartCoefficients,St.tempFilterEndCoefficients,1/i,0==e.type),I*=e.getVolumeCompensationMult()}this.eqFilterCount=D.controlPointCount,I=Math.min(3,I);const P=St.instrumentVolumeToVolumeMult(n.volume);this.mixVolumeStart=P;const x=P;this.mixVolumeDelta=(x-this.mixVolumeStart)/i;let F=I,w=I,k=1,L=1;if(p){const t=(n.pan-e.panCenter)/e.panCenter,s=Math.max(-1,Math.min(1,t)),a=Math.max(-1,Math.min(1,t)),o=1.414*Math.cos((1+s)*Math.PI*.25),h=1.414*Math.cos((1-s)*Math.PI*.25),l=1.414*Math.cos((1+a)*Math.PI*.25),c=1.414*Math.cos((1-a)*Math.PI*.25),u=r*e.panDelaySecondsMax,p=s*u,f=a*u,d=Math.max(0,p),m=Math.max(0,-p),y=Math.max(0,f),S=Math.max(0,-f);this.panningVolumeStartL=o,this.panningVolumeStartR=h,this.panningVolumeDeltaL=(l-o)/i,this.panningVolumeDeltaR=(c-h)/i,this.panningOffsetStartL=d,this.panningOffsetStartR=m,this.panningOffsetDeltaL=(y-d)/i,this.panningOffsetDeltaR=(S-m)/i}if(f){const t=Math.min(1,n.chorus/(e.chorusRange-1)),s=Math.min(1,n.chorus/(e.chorusRange-1));this.chorusStart=.6*t+.4*Math.pow(t,6),this.chorusEnd=.6*s+.4*Math.pow(s,6)}let T=0;if(d){const a=.9*Math.min(1,Math.pow(n.echoSustain/e.echoSustainRange,1.1)),r=.9*Math.min(1,Math.pow(n.echoSustain/e.echoSustainRange,1.1));this.echoMultStart=a,this.echoMultDelta=(r-a)/i,T=Math.max(a,r);const o=Math.round((n.echoDelay+1)*e.echoDelayStepTicks*s);this.echoDelayOffsetLastTickIsComputed?this.echoDelayOffsetStart=this.echoDelayOffsetLastTick:this.echoDelayOffsetStart=o,t.isAtEndOfTick&&(this.echoDelayOffsetLastTick=o,this.echoDelayOffsetLastTickIsComputed=!0),this.echoDelayOffsetEnd=o,this.echoDelayOffsetRatio=1-h,this.echoDelayOffsetRatioDelta=(h-l)/i;const c=2*Math.PI*e.echoShelfHz/t.samplesPerSecond;St.tempFilterStartCoefficients.highShelf1stOrder(c,e.echoShelfGain),this.echoShelfA1=St.tempFilterStartCoefficients.a[1],this.echoShelfB0=St.tempFilterStartCoefficients.b[0],this.echoShelfB1=St.tempFilterStartCoefficients.b[1]}let C=0;if(M){const s=.425*Math.min(1,Math.pow(n.reverb/e.reverbRange,.667)),a=.425*Math.min(1,Math.pow(n.reverb/e.reverbRange,.667));this.reverbMultStart=s,this.reverbMultDelta=(a-s)/i,C=Math.max(s,a);const r=2*Math.PI*e.reverbShelfHz/t.samplesPerSecond;St.tempFilterStartCoefficients.highShelf1stOrder(r,e.reverbShelfGain),this.reverbShelfA1=St.tempFilterStartCoefficients.a[1],this.reverbShelfB0=St.tempFilterStartCoefficients.b[0],this.reverbShelfB1=St.tempFilterStartCoefficients.b[1]}if(this.tonesAddedInThisTick)this.attentuationProgress=0,this.flushedSamples=0,this.flushingDelayLines=!1;else if(this.flushingDelayLines){F=0,w=0,k=0,L=0;let n=0;f&&(n+=t.chorusDelayBufferSize),d&&(n+=this.echoDelayLineL.length),M&&(n+=e.reverbDelayBufferSize),this.flushedSamples+=i,this.flushedSamples>=n&&(this.deactivateAfterThisTick=!0)}else{0==this.attentuationProgress?(F*=h,w*=l):(F=0,w=0);const n=1/256,i=-Math.log2(n);let a=0;if(f&&(a+=e.chorusMaxDelay),d){const t=.5*(this.echoDelayOffsetStart+this.echoDelayOffsetEnd)/r,e=Math.pow(T,1/t);a+=-1/Math.log2(e)*i}if(M){const t=2*C,n=e.reverbDelayBufferSize/4/r,s=Math.pow(t,1/n);a+=-1/Math.log2(s)*i}const o=s/r/a,c=this.attentuationProgress+o;c>=1&&(k*=h,L*=l),t.isAtEndOfTick&&(this.attentuationProgress=c,this.attentuationProgress>=1&&(this.flushingDelayLines=!0))}this.eqFilterVolumeStart=F,this.eqFilterVolumeDelta=(w-F)/i,this.delayInputMultStart=k,this.delayInputMultDelta=(L-k)/i}}class yt{constructor(){this.instruments=[],this.muted=!1,this.singleSeamlessInstrument=null}}class St{constructor(t=null){this.samplesPerSecond=44100,this.song=null,this.liveInputDuration=0,this.liveInputStarted=!1,this.liveInputPitches=[],this.liveInputChannel=0,this.liveInputInstruments=[],this.loopRepeatCount=-1,this.volume=1,this.playheadInternal=0,this.bar=0,this.prevBar=null,this.nextBar=null,this.beat=0,this.part=0,this.tick=0,this.isAtStartOfTick=!0,this.isAtEndOfTick=!0,this.tickSampleCountdown=0,this.isPlayingSong=!1,this.liveInputEndTime=0,this.browserAutomaticallyClearsAudioBuffer=!0,this.tempDrumSetControlPoint=new rt,this.tempFrequencyResponse=new U,this.channels=[],this.tonePool=new j,this.tempMatchedPitchTones=Array(e.maxChordSize).fill(null),this.limit=0,this.tempMonoInstrumentSampleBuffer=null,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=t=>{const e=t.outputBuffer,n=e.getChannelData(0),s=e.getChannelData(1);if(!this.browserAutomaticallyClearsAudioBuffer||0==n[0]&&0==s[0]&&0==n[e.length-1]&&0==s[e.length-1]||(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const t=e.length;for(let e=0;e<t;e++)n[e]=0,s[e]=0}performance.now()<this.liveInputEndTime||this.isPlayingSong?this.synthesize(n,s,e.length,this.isPlayingSong):this.deactivateAudio()},this.computeDelayBufferSizes(),null!=t&&this.setSong(t)}syncSongState(){const t=this.song.getChannelCount();for(let e=this.channels.length;e<t;e++)this.channels[e]=new yt;this.channels.length=t;for(let e=0;e<t;e++){const t=this.song.channels[e],n=this.channels[e];for(let e=n.instruments.length;e<t.instruments.length;e++)n.instruments[e]=new mt;if(n.instruments.length=t.instruments.length,n.muted!=t.muted&&(n.muted=t.muted,n.muted))for(const t of n.instruments)t.resetAllEffects()}}warmUpSynthesizer(t){if(null!=t){this.syncSongState();const e=this.getSamplesPerTick();for(let n=0;n<t.getChannelCount();n++)for(let s=0;s<t.channels[n].instruments.length;s++){const i=t.channels[n].instruments[s],a=this.channels[n].instruments[s];St.getInstrumentSynthFunction(i),i.warmUp(this.samplesPerSecond),a.allocateNecessaryBuffers(this,i,e)}}}static operatorAmplitudeCurve(t){return(Math.pow(16,t/15)-1)/15}get playing(){return this.isPlayingSong}get playhead(){return this.playheadInternal}set playhead(t){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,t));let n=this.playheadInternal;this.bar=Math.floor(n),n=this.song.beatsPerBar*(n-this.bar),this.beat=Math.floor(n),n=e.partsPerBeat*(n-this.beat),this.part=Math.floor(n),n=e.ticksPerPart*(n-this.part),this.tick=Math.floor(n);const s=this.getSamplesPerTick();n=s*(n-this.tick),this.tickSampleCountdown=s-n,this.prevBar=null}}getSamplesPerBar(){if(null==this.song)throw new Error;return this.getSamplesPerTick()*e.ticksPerPart*e.partsPerBeat*this.song.beatsPerBar}getTicksIntoBar(){return(this.beat*e.partsPerBeat+this.part)*e.ticksPerPart+this.tick}getCurrentPart(){return this.beat*e.partsPerBeat+this.part}getTotalBars(t,e){if(null==this.song)throw new Error;let n=this.song.loopLength*(this.loopRepeatCount+1);return t&&(n+=this.song.loopStart),e&&(n+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),n}setSong(t){"string"==typeof t?this.song=new ut(t):t instanceof ut&&(this.song=t),this.prevBar=null}computeDelayBufferSizes(){this.panningDelayBufferSize=St.fittingPowerOfTwo(this.samplesPerSecond*e.panDelaySecondsMax),this.panningDelayBufferMask=this.panningDelayBufferSize-1,this.chorusDelayBufferSize=St.fittingPowerOfTwo(this.samplesPerSecond*e.chorusMaxDelay),this.chorusDelayBufferMask=this.chorusDelayBufferSize-1}activateAudio(){null!=this.audioCtx&&null!=this.scriptNode||(this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(2048,0,2):this.audioCtx.createJavaScriptNode(2048,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination),this.computeDelayBufferSizes()),this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.isPlayingSong=!0,this.activateAudio(),this.warmUpSynthesizer(this.song))}pause(){this.isPlayingSong&&(this.isPlayingSong=!1)}snapToStart(){this.bar=0,this.snapToBar()}goToBar(t){this.bar=t,this.playheadInternal=this.bar,this.prevBar=null}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0,this.isAtStartOfTick=!0,this.prevBar=null}resetEffects(){if(this.limit=0,this.freeAllTones(),null!=this.song)for(const t of this.channels)for(const e of t.instruments)e.resetAllEffects()}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const t=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-t,this.prevBar=null}}goToNextBar(){if(!this.song)return;this.prevBar=this.bar;const t=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-t}goToPrevBar(){if(!this.song)return;this.prevBar=null;const t=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-t}synthesize(t,n,s,i=!0){if(null==this.song){for(let e=0;e<s;e++)t[e]=0,n[e]=0;return void this.deactivateAudio()}const a=this.song,r=this.getSamplesPerTick();let o=!1;for(;this.tickSampleCountdown<=0;)this.tickSampleCountdown+=r;this.tickSampleCountdown>r&&(this.tickSampleCountdown=r),i&&(this.beat>=a.beatsPerBar&&(this.bar++,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=r,0!=this.loopRepeatCount&&this.bar==a.loopStart+a.loopLength&&(this.bar=a.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--)),this.bar>=a.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.pause()))),this.syncSongState(),(null==this.tempMonoInstrumentSampleBuffer||this.tempMonoInstrumentSampleBuffer.length<s)&&(this.tempMonoInstrumentSampleBuffer=new Float32Array(s));const h=+this.volume,l=1-Math.pow(.5,4/this.samplesPerSecond),c=1-Math.pow(.5,4e3/this.samplesPerSecond);let u=+this.limit,p=0;for(;p<s&&!o;){this.nextBar=this.bar+1,0!=this.loopRepeatCount&&this.nextBar==a.loopStart+a.loopLength&&(this.nextBar=a.loopStart),this.nextBar>=a.barCount&&(this.nextBar=null);const f=s-p,d=Math.ceil(this.tickSampleCountdown),m=Math.min(d,f);this.isAtEndOfTick=m>=this.tickSampleCountdown;for(let s=0;s<a.getChannelCount();s++){const o=a.channels[s],h=this.channels[s];this.determineCurrentActiveTones(a,s,i),this.determineLiveInputTones(a,s);for(let i=0;i<o.instruments.length;i++){const l=o.instruments[i],c=h.instruments[i];let u=0;for(let t=0;t<c.activeTones.count();t++){const e=c.activeTones.get(t);this.playTone(a,s,r,p,m,e,!1,!1),u++}for(let t=0;t<c.liveInputTones.count();t++){const e=c.liveInputTones.get(t);this.playTone(a,s,r,p,m,e,!1,!1),u++}for(let t=0;t<c.releasedTones.count();t++){const n=c.releasedTones.get(t);if(n.ticksSinceReleased>=Math.abs(l.getFadeOutTicks())){this.freeReleasedTone(c,t),t--;continue}const i=u>=e.maximumTonesPerChannel;this.playTone(a,s,r,p,m,n,!0,i),u++}c.awake&&(c.computed||c.compute(this,l,r,m,null),St.effectsSynth(this,t,n,p,m,l,c),c.computed=!1)}}const y=p+m;for(let e=p;e<y;e++){const s=t[e],i=n[e],a=Math.max(Math.abs(s),Math.abs(i));u+=(a-u)*(u<a?c:l*(1+u));const r=h/(u>=1?1.05*u:.8*u+.25);t[e]=s*r,n[e]=i*r}if(p+=m,this.isAtStartOfTick=!1,this.tickSampleCountdown-=m,this.tickSampleCountdown<=0){this.isAtStartOfTick=!0;for(const t of this.channels)for(const e of t.instruments){for(let t=0;t<e.releasedTones.count();t++){const n=e.releasedTones.get(t);n.isOnLastTick?(this.freeReleasedTone(e,t),t--):n.ticksSinceReleased++}e.deactivateAfterThisTick&&e.deactivate(),e.tonesAddedInThisTick=!1}this.tick++,this.tickSampleCountdown+=r,this.tick==e.ticksPerPart&&(this.tick=0,this.part++,this.liveInputDuration--,this.part==e.partsPerBeat&&(this.part=0,i&&(this.beat++,this.beat==a.beatsPerBar&&(this.beat=0,this.prevBar=this.bar,this.bar++,0!=this.loopRepeatCount&&this.bar==a.loopStart+a.loopLength&&(this.bar=a.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=a.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.resetEffects(),this.pause()))))))}}(!Number.isFinite(u)||Math.abs(u)<K)&&(u=0),this.limit=u,i&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/r)/2+this.part)/e.partsPerBeat+this.beat)/a.beatsPerBar+this.bar)}freeTone(t){this.tonePool.pushBack(t)}newTone(){if(this.tonePool.count()>0){const t=this.tonePool.popBack();return t.freshlyAllocated=!0,t}return new dt}releaseTone(t,e){t.releasedTones.pushFront(e),e.atNoteStart=!1,e.passedEndOfNote=!0}freeReleasedTone(t,e){this.freeTone(t.releasedTones.get(e)),t.releasedTones.remove(e)}freeAllTones(){for(const t of this.channels)for(const e of t.instruments){for(;e.activeTones.count()>0;)this.freeTone(e.activeTones.popBack());for(;e.releasedTones.count()>0;)this.freeTone(e.releasedTones.popBack());for(;e.liveInputTones.count()>0;)this.freeTone(e.liveInputTones.popBack())}}determineLiveInputTones(t,e){const n=t.channels[e],s=this.channels[e],i=this.liveInputPitches;for(let t=0;t<n.instruments.length;t++){const a=s.instruments[t],r=a.liveInputTones;let o=0;if(this.liveInputDuration>0&&e==this.liveInputChannel&&i.length>0&&-1!=this.liveInputInstruments.indexOf(t)){const e=n.instruments[t];if(e.getChord().singleTone){let n;r.count()<=o?(n=this.newTone(),r.pushBack(n)):!e.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(a,r.get(o)),n=this.newTone(),r.set(o,n)):n=r.get(o),o++;for(let t=0;t<i.length;t++)n.pitches[t]=i[t];n.pitchCount=i.length,n.chordSize=1,n.instrumentIndex=t,n.note=n.prevNote=n.nextNote=null,n.atNoteStart=this.liveInputStarted,n.forceContinueAtStart=!1,n.forceContinueAtEnd=!1}else for(let n=0;n<i.length;n++){let s;r.count()<=o?(s=this.newTone(),r.pushBack(s)):!e.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(a,r.get(o)),s=this.newTone(),r.set(o,s)):s=r.get(o),o++,s.pitches[0]=i[n],s.pitchCount=1,s.chordSize=i.length,s.instrumentIndex=t,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1}}for(;r.count()>o;)this.releaseTone(a,r.popBack())}this.liveInputStarted=!1}adjacentPatternHasCompatibleInstrumentTransition(t,e,n,s,i,a,r,o,h,l){if(t.patternInstruments&&-1==s.instruments.indexOf(i)){if(n.instruments.length>1||s.instruments.length>1)return null;const t=e.instruments[s.instruments[0]];if(l)return t.getChord();const i=t.getTransition();return a.includeAdjacentPatterns&&i.includeAdjacentPatterns&&i.slides==a.slides?t.getChord():null}return l||a.includeAdjacentPatterns?r:null}static adjacentNotesHaveMatchingPitches(t,e){if(t.pitches.length!=e.pitches.length)return!1;const n=t.pins[t.pins.length-1].interval;for(const s of t.pitches)if(-1==e.pitches.indexOf(s+n))return!1;return!0}determineCurrentActiveTones(t,n,s){const i=t.channels[n],a=this.channels[n],r=t.getPattern(n,this.bar),o=this.getCurrentPart(),h=this.tick+e.ticksPerPart*o;let l=null,c=null,u=null;if(s&&null!=r&&!i.muted){for(let t=0;t<r.notes.length;t++)if(r.notes[t].end<=o)c=r.notes[t];else if(r.notes[t].start<=o&&r.notes[t].end>o)l=r.notes[t];else if(r.notes[t].start>o){u=r.notes[t];break}null!=l&&(null!=c&&c.end!=l.start&&(c=null),null!=u&&u.start!=l.end&&(u=null))}if(null!=r&&(!t.layeredInstruments||1==i.instruments.length||t.patternInstruments&&1==r.instruments.length)){const e=t.patternInstruments?r.instruments[0]:0;if(null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=e&&a.singleSeamlessInstrument<a.instruments.length){const t=a.instruments[a.singleSeamlessInstrument],n=a.instruments[e];for(;t.activeTones.count()>0;)n.activeTones.pushFront(t.activeTones.popBack())}a.singleSeamlessInstrument=e}else a.singleSeamlessInstrument=null;for(let s=0;s<i.instruments.length;s++){const p=a.instruments[s],f=p.activeTones;let d=0;if(null!=l&&(!t.patternInstruments||-1!=r.instruments.indexOf(s))){const a=i.instruments[s];let m=c,y=u;const S=e.partsPerBeat*t.beatsPerBar,g=a.getTransition(),b=a.getChord();let v=!1,M=!1,I=0,D=0;if(0==l.start){let e=null==this.prevBar?null:t.getPattern(n,this.prevBar);if(null!=e){const n=e.notes.length<=0?null:e.notes[e.notes.length-1];if(null!=n&&n.end==S){const a=l.continuesLastPattern&&St.adjacentNotesHaveMatchingPitches(n,l),o=this.adjacentPatternHasCompatibleInstrumentTransition(t,i,r,e,s,g,b,l,n,a);null!=o&&(m=n,I=o.singleTone?1:m.pitches.length,v=a)}}}else null!=m&&(I=b.singleTone?1:m.pitches.length);if(l.end==S){let e=null==this.nextBar?null:t.getPattern(n,this.nextBar);if(null!=e){const n=e.notes.length<=0?null:e.notes[0];if(null!=n&&0==n.start){const a=n.continuesLastPattern&&St.adjacentNotesHaveMatchingPitches(l,n),o=this.adjacentPatternHasCompatibleInstrumentTransition(t,i,r,e,s,g,b,l,n,a);null!=o&&(y=n,D=o.singleTone?1:y.pitches.length,M=a)}}}else null!=y&&(D=b.singleTone?1:y.pitches.length);if(b.singleTone){const t=e.ticksPerPart*l.start==h&&this.isAtStartOfTick;let n;if(f.count()<=d)n=this.newTone(),f.pushBack(n);else if(!t||(g.isSeamless||v)&&null!=m)n=f.get(d);else{const t=f.get(d);t.isOnLastTick?this.freeTone(t):this.releaseTone(p,t),n=this.newTone(),f.set(d,n)}d++;for(let t=0;t<l.pitches.length;t++)n.pitches[t]=l.pitches[t];n.pitchCount=l.pitches.length,n.chordSize=1,n.instrumentIndex=s,n.note=l,n.noteStartPart=l.start,n.noteEndPart=l.end,n.prevNote=m,n.nextNote=y,n.prevNotePitchIndex=0,n.nextNotePitchIndex=0,n.atNoteStart=t,n.passedEndOfNote=!1,n.forceContinueAtStart=v,n.forceContinueAtEnd=M}else{const t=a.getTransition();if((t.isSeamless&&!t.slides&&0==b.strumParts||v)&&e.ticksPerPart*l.start==h&&this.isAtStartOfTick&&null!=m){for(let t=0;t<f.count();t++){const e=f.get(t),n=e.pitches[0]+e.lastInterval;for(let s=0;s<l.pitches.length;s++)if(l.pitches[s]==n){this.tempMatchedPitchTones[s]=e,f.remove(t),t--;break}}for(;f.count()>0;){const t=f.popFront();for(let e=0;e<this.tempMatchedPitchTones.length;e++)if(null==this.tempMatchedPitchTones[e]){this.tempMatchedPitchTones[e]=t;break}}}let n=0;for(let i=0;i<l.pitches.length;i++){let a=I>i?m:null,r=l,c=D>i?y:null,u=r.start+n,S=!1;if(u>o){if(!(f.count()>i&&(t.isSeamless||v)&&null!=a))break;c=r,r=a,a=null,u=r.start+n,S=!0}let g=r.end;(t.isSeamless||v)&&null!=c&&(g=Math.min(e.partsPerBeat*this.song.beatsPerBar,g+n)),(t.continues||v)&&null!=a||(n+=b.strumParts);const P=e.ticksPerPart*u==h&&this.isAtStartOfTick;let x;if(null!=this.tempMatchedPitchTones[d])x=this.tempMatchedPitchTones[d],this.tempMatchedPitchTones[d]=null,f.pushBack(x);else if(f.count()<=d)x=this.newTone(),f.pushBack(x);else if(!P||(t.isSeamless||v)&&null!=a)x=f.get(d);else{const t=f.get(d);t.isOnLastTick?this.freeTone(t):this.releaseTone(p,t),x=this.newTone(),f.set(d,x)}d++,x.pitches[0]=r.pitches[i],x.pitchCount=1,x.chordSize=r.pitches.length,x.instrumentIndex=s,x.note=r,x.noteStartPart=u,x.noteEndPart=g,x.prevNote=a,x.nextNote=c,x.prevNotePitchIndex=i,x.nextNotePitchIndex=i,x.atNoteStart=P,x.passedEndOfNote=S,x.forceContinueAtStart=v&&null!=a,x.forceContinueAtEnd=M&&null!=c}}}for(;f.count()>d;){const e=f.popBack(),s=t.channels[n];if(e.instrumentIndex<s.instruments.length&&!e.isOnLastTick){const t=this.channels[n].instruments[e.instrumentIndex];this.releaseTone(t,e)}else this.freeTone(e)}for(let t=d;t<this.tempMatchedPitchTones.length;t++){const e=this.tempMatchedPitchTones[t];null!=e&&(e.isOnLastTick?this.freeTone(e):this.releaseTone(p,e),this.tempMatchedPitchTones[t]=null)}}}playTone(t,e,n,s,i,a,r,o){const h=t.channels[e],l=this.channels[e],c=h.instruments[a.instrumentIndex],u=l.instruments[a.instrumentIndex];u.awake=!0,u.tonesAddedInThisTick=!0,u.computed||u.compute(this,c,n,i,a),St.computeTone(this,t,e,n,i,a,r,o);St.getInstrumentSynthFunction(c)(this,s,i,a,c),a.envelopeComputer.clearEnvelopes(c)}static computeChordExpression(t){return 1/(.25*(t-1)+1)}static computeTone(t,n,s,a,r,h,l,c){const m=n.channels[s].instruments[h.instrumentIndex],y=m.getTransition(),S=m.getChord(),g=S.singleTone?1:St.computeChordExpression(h.chordSize),b=n.getChannelIsNoise(s),v=b?e.noiseInterval:1,M=e.ticksPerPart*a/t.samplesPerSecond,I=1/t.samplesPerSecond,D=1/e.partsPerBeat,P=t.tickSampleCountdown,x=1-P/a,F=1-(P-r)/a,w=t.getTicksIntoBar(),k=w/e.ticksPerPart,L=(w+1)/e.ticksPerPart,T=k+(L-k)*x,C=k+(L-k)*F,O=t.getCurrentPart();h.specialIntervalMult=1,h.specialIntervalExpressionMult=1;let E=c,R=0,B=0,A=1,N=1,z=g,W=g,V=16,q=e.keys[n.key].basePitch,G=1,j=48;if(3==m.type)G=e.spectrumBaseExpression,b&&(q=e.spectrumBasePitch,G*=2),V=e.spectrumBasePitch,j=28;else if(4==m.type)q=e.spectrumBasePitch,G=e.drumsetBaseExpression,V=q;else if(2==m.type)q=e.chipNoises[m.chipNoise].basePitch,G=e.noiseBaseExpression,V=q,j=e.chipNoises[m.chipNoise].isSoft?24:60;else if(1==m.type)G=e.fmBaseExpression;else if(0==m.type)G=e.chipBaseExpression;else if(5==m.type)G=e.harmonicsBaseExpression;else if(6==m.type)G=e.pwmBaseExpression;else{if(7!=m.type)throw new Error("Unknown instrument type in computeTone.");G=e.pickedStringBaseExpression}(h.atNoteStart&&!y.isSeamless&&!h.forceContinueAtStart||h.freshlyAllocated)&&h.reset(),h.freshlyAllocated=!1;const $=Math.max(e.maxChordSize,e.operatorCount);for(let t=0;t<$;t++)h.phaseDeltas[t]=0,h.expressionStarts[t]=0,h.expressionDeltas[t]=0,h.phaseDeltaScales[t]=0;if(l){const t=h.ticksSinceReleased+x,n=h.ticksSinceReleased+F;R=B=h.lastInterval;const s=Math.abs(m.getFadeOutTicks());A=St.noteSizeToVolumeMult((1-t/s)*e.noteSizeMax),N=St.noteSizeToVolumeMult((1-n/s)*e.noteSizeMax),c&&(A*=1-x,N*=1-F),h.ticksSinceReleased+1>=s&&(E=!0)}else if(null==h.note)A=N=1,h.lastInterval=0,h.ticksSinceReleased=0,h.liveInputSamplesHeld+=r;else{const n=h.note,s=h.nextNote,i=h.noteStartPart,a=h.noteEndPart,r=n.getEndPinIndex(O),o=n.pins[r-1],l=n.pins[r],c=i*e.ticksPerPart,u=a*e.ticksPerPart,p=(n.start+o.time)*e.ticksPerPart,f=(n.start+l.time)*e.ticksPerPart;h.ticksSinceReleased=0;const d=O*e.ticksPerPart+t.tick,S=O*e.ticksPerPart+t.tick+1,g=d-c,b=S-c,v=Math.min(1,(d-p)/(f-p)),M=Math.min(1,(S-p)/(f-p));let I=1,D=1,P=o.interval+(l.interval-o.interval)*v,w=o.interval+(l.interval-o.interval)*M;if(h.lastInterval=w,!y.isSeamless&&!h.forceContinueAtEnd||null==s){const t=-m.getFadeOutTicks();if(t>0){const e=u-c;I*=Math.min(1,(e-g)/t),D*=Math.min(1,(e-b)/t),S>=c+e&&(E=!0)}}R=P+(w-P)*x,B=P+(w-P)*F,A=I+(D-I)*x,N=I+(D-I)*F}h.isOnLastTick=E;const U=h.envelopeComputer;U.computeEnvelopes(m,O,e.ticksPerPart*T,e.ticksPerPart*C,M*(C-T),h);const K=h.envelopeComputer.envelopeStarts,Q=h.envelopeComputer.envelopeEnds;if(null!=h.note&&y.slides){const t=h.prevNote,e=h.nextNote;if(null!=t){const e=t.pitches[h.prevNotePitchIndex]+t.pins[t.pins.length-1].interval-h.pitches[0];if(U.prevSlideStart&&(R+=e*U.prevSlideRatioStart),U.prevSlideEnd&&(B+=e*U.prevSlideRatioEnd),!S.singleTone){const e=t.pitches.length-h.chordSize;U.prevSlideStart&&(z=St.computeChordExpression(h.chordSize+e*U.prevSlideRatioStart)),U.prevSlideEnd&&(W=St.computeChordExpression(h.chordSize+e*U.prevSlideRatioEnd))}}if(null!=e){const t=e.pitches[h.nextNotePitchIndex]-(h.pitches[0]+h.note.pins[h.note.pins.length-1].interval);if(U.nextSlideStart&&(R+=t*U.nextSlideRatioStart),U.nextSlideEnd&&(B+=t*U.nextSlideRatioEnd),!S.singleTone){const t=e.pitches.length-h.chordSize;U.nextSlideStart&&(z=St.computeChordExpression(h.chordSize+t*U.nextSlideRatioStart)),U.nextSlideEnd&&(W=St.computeChordExpression(h.chordSize+t*U.nextSlideRatioEnd))}}}if(u(m.effects)){const t=e.justIntonationSemitones[m.pitchShift]/v;R+=t*K[14],B+=t*Q[14]}if(p(m.effects)){const t=K[15],n=Q[15];R+=St.detuneToCents((m.detune-e.detuneCenter)*t)*e.pitchesPerOctave/1200,B+=St.detuneToCents((m.detune-e.detuneCenter)*n)*e.pitchesPerOctave/1200}if(f(m.effects)){const t=e.vibratos[m.vibrato].delayTicks,n=e.vibratos[m.vibrato].amplitude;let s;if(null!=h.prevVibrato)s=h.prevVibrato;else{if(s=n*St.getLFOAmplitude(m,M*T)*K[16],t>0){const e=t-U.noteTicksStart;s*=Math.max(0,Math.min(1,1-e/2))}}let i=n*St.getLFOAmplitude(m,M*C)*Q[16];if(t>0){const e=t-U.noteTicksEnd;i*=Math.max(0,Math.min(1,1-e/2))}h.prevVibrato=i,R+=s,B+=i}if(!y.isSeamless&&!h.forceContinueAtStart||null==h.prevNote){const t=m.getFadeInSeconds();t>0&&(A*=Math.min(1,U.noteSecondsStart/t),N*=Math.min(1,U.noteSecondsEnd/t))}4==m.type&&null==h.drumsetPitch&&(h.drumsetPitch=h.pitches[0],null!=h.note&&(h.drumsetPitch+=h.note.pickMainInterval()),h.drumsetPitch=Math.max(0,Math.min(e.drumCount-1,h.drumsetPitch)));let J=U.lowpassCutoffDecayVolumeCompensation;if(d(m.effects)){const e=m.noteFilter,n=K[1],s=Q[1];for(let i=0;i<e.controlPointCount;i++){const a=K[17+i],o=Q[17+i],l=K[25+i],c=Q[25+i],u=e.controlPoints[i];u.toCoefficients(St.tempFilterStartCoefficients,t.samplesPerSecond,n*a,l),u.toCoefficients(St.tempFilterEndCoefficients,t.samplesPerSecond,s*o,c),h.noteFilters.length<=i&&(h.noteFilters[i]=new H),h.noteFilters[i].loadCoefficientsWithGradient(St.tempFilterStartCoefficients,St.tempFilterEndCoefficients,1/r,0==u.type),J*=u.getVolumeCompensationMult()}h.noteFilterCount=e.controlPointCount}else h.noteFilterCount=0;if(4==m.type){const e=m.getDrumsetEnvelope(h.drumsetPitch);J*=ft.getLowpassCutoffDecayVolumeCompensation(e);let n=ft.computeEnvelope(e,U.noteSecondsStart,D*T,U.noteSizeStart),s=ft.computeEnvelope(e,U.noteSecondsEnd,D*C,U.noteSizeEnd);if(U.prevSlideStart){n+=(ft.computeEnvelope(e,U.prevNoteSecondsStart,D*T,U.prevNoteSize)-n)*U.prevSlideRatioStart}if(U.prevSlideEnd){s+=(ft.computeEnvelope(e,U.prevNoteSecondsEnd,D*C,U.prevNoteSize)-s)*U.prevSlideRatioEnd}if(U.nextSlideStart){n+=(ft.computeEnvelope(e,0,D*T,U.nextNoteSize)-n)*U.nextSlideRatioStart}if(U.nextSlideEnd){s+=(ft.computeEnvelope(e,0,D*C,U.nextNoteSize)-s)*U.nextSlideRatioEnd}const i=t.tempDrumSetControlPoint;i.type=0,i.gain=rt.getRoundedSettingValueFromLinearGain(.5),i.freq=rt.getRoundedSettingValueFromHz(8e3),i.toCoefficients(St.tempFilterStartCoefficients,t.samplesPerSecond,n*(1+n),1),i.toCoefficients(St.tempFilterEndCoefficients,t.samplesPerSecond,s*(1+s),1),h.noteFilters.length==h.noteFilterCount&&(h.noteFilters[h.noteFilterCount]=new H),h.noteFilters[h.noteFilterCount].loadCoefficientsWithGradient(St.tempFilterStartCoefficients,St.tempFilterEndCoefficients,1/r,!0),h.noteFilterCount++}if(J=Math.min(3,J),1==m.type){let s=1,i=0,a=0;const l=S.arpeggiates;if(h.pitchCount>1&&l){const s=Math.floor((t.tick+t.part*e.ticksPerPart)/e.rhythms[n.rhythm].ticksPerArpeggio);a=h.pitches[o(h.pitchCount,n.rhythm,s)]-h.pitches[0]}const c=e.algorithms[m.algorithm].carrierCount;for(let t=0;t<e.operatorCount;t++){const n=e.algorithms[m.algorithm].associatedCarrier[t]-1,o=h.pitches[l?0:t<h.pitchCount?t:n<h.pitchCount?n:0],u=e.operatorFrequencies[m.operators[t].frequency].mult,p=e.operatorCarrierInterval[n]+a,f=q+(o+R)*v+p,d=q+(o+B)*v+p,y=lt.frequencyFromPitch(f),S=lt.frequencyFromPitch(d),g=e.operatorFrequencies[m.operators[t].frequency].hzOffset,b=u*y+g,M=u*S+g,D=K[5+t],P=Q[5+t];let x,F;1!=D||1!=P?(x=Math.pow(2,Math.log2(b/y)*D)*y,F=Math.pow(2,Math.log2(M/S)*P)*S):(x=b,F=M),h.phaseDeltas[t]=x*I*e.sineWaveLength,h.phaseDeltaScales[t]=Math.pow(F/x,1/r);const w=St.operatorAmplitudeCurve(m.operators[t].amplitude),k=w*e.operatorFrequencies[m.operators[t].frequency].amplitudeSign;let L=k,T=k;if(t<c){const t=Math.pow(2,-(f-V)/j),e=Math.pow(2,-(d-V)/j);L*=G*t*A*J*z,T*=G*e*N*J*W,L*=K[0],T*=Q[0],i+=w}else L*=1.5*e.sineWaveLength,T*=1.5*e.sineWaveLength,s*=1-Math.min(1,m.operators[t].amplitude/15);L*=K[9+t],T*=Q[9+t],h.expressionStarts[t]=L,h.expressionDeltas[t]=(T-L)/r}s*=(Math.pow(2,2-1.4*m.feedbackAmplitude/15)-1)/3,s*=1-Math.min(1,Math.max(0,i-1)/2),s=1+3*s;for(let t=0;t<c;t++)h.expressionStarts[t]*=s,h.expressionDeltas[t]*=s;const u=.3*e.sineWaveLength*m.feedbackAmplitude/15;let p=u*K[13],f=u*Q[13];h.feedbackMult=p,h.feedbackDelta=(f-h.feedbackMult)/r}else{const s=Math.pow(2,(B-R)*v/12/r);let a=h.pitches[0];if(h.pitchCount>1&&(S.arpeggiates||S.customInterval)){const s=Math.floor((t.tick+t.part*e.ticksPerPart)/e.rhythms[n.rhythm].ticksPerArpeggio);if(S.customInterval){const t=h.pitches[1+o(h.pitchCount-1,n.rhythm,s)]-h.pitches[0];h.specialIntervalMult=Math.pow(2,t/12),h.specialIntervalExpressionMult=Math.pow(2,-t/j)}else a=h.pitches[o(h.pitchCount,n.rhythm,s)]}const l=q+(a+R)*v,c=q+(a+B)*v,u=Math.pow(2,-(l-V)/j),p=Math.pow(2,-(c-V)/j);let f=G*J;if(2==m.type&&(f*=e.chipNoises[m.chipNoise].expression),0==m.type&&(f*=e.chipWaves[m.chipWave].expression),6==m.type){const t=i(m.pulseWidth),e=t*K[2],n=t*Q[2];h.pulseWidth=e,h.pulseWidthDelta=(n-e)/r}if(7==m.type){f*=Math.pow(2,.7*(1-m.stringSustain/(e.stringSustainRange-1)));const t=e.unisons[m.unison];for(let e=h.pickedStrings.length;e<t.voices;e++)h.pickedStrings[e]=new pt;if(h.atNoteStart&&!y.continues&&!h.forceContinueAtStart)for(const t of h.pickedStrings)t.delayIndex=-1}const d=lt.frequencyFromPitch(l);if(0==m.type||5==m.type||7==m.type){const t=e.unisons[m.unison],n=7==m.type?1:t.voices/2;f*=t.expression*n;const i=K[4],a=Q[4],o=Math.pow(2,(t.offset+t.spread)*i/12),l=Math.pow(2,(t.offset+t.spread)*a/12),c=Math.pow(2,(t.offset-t.spread)*i/12)*h.specialIntervalMult,u=Math.pow(2,(t.offset-t.spread)*a/12)*h.specialIntervalMult;h.phaseDeltas[0]=d*I*o,h.phaseDeltas[1]=d*I*c,h.phaseDeltaScales[0]=s*Math.pow(l/o,1/r),h.phaseDeltaScales[1]=s*Math.pow(u/c,1/r)}else h.phaseDeltas[0]=d*I,h.phaseDeltaScales[0]=s;let g=f*A*z*u*K[0],b=f*N*W*p*Q[0];h.expressionStarts[0]=g,h.expressionDeltas[0]=(b-g)/r}}static getLFOAmplitude(t,n){let s=0;for(const i of e.vibratos[t.vibrato].periodsSeconds)s+=Math.sin(2*Math.PI*n/i);return s}static getInstrumentSynthFunction(t){if(1==t.type){const n=t.algorithm+"_"+t.feedbackType;if(null==St.fmSynthFunctionCache[n]){const s=[];for(const n of St.fmSourceTemplate)if(-1!=n.indexOf("// CARRIER OUTPUTS")){const i=[];for(let n=0;n<e.algorithms[t.algorithm].carrierCount;n++)i.push("operator"+n+"Scaled");s.push(n.replace("/*operator#Scaled*/",i.join(" + ")))}else if(-1!=n.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let n=e.operatorCount-1;n>=0;n--)for(const i of St.operatorSourceTemplate)if(-1!=i.indexOf("/* + operator@Scaled*/")){let a="";for(const s of e.algorithms[t.algorithm].modulatedBy[n])a+=" + operator"+(s-1)+"Scaled";const r=e.feedbacks[t.feedbackType].indices[n];if(r.length>0){a+=" + feedbackMult * (";const t=[];for(const e of r)t.push("operator"+(e-1)+"Output");a+=t.join(" + ")+")"}s.push(i.replace(/\#/g,n+"").replace("/* + operator@Scaled*/",a))}else s.push(i.replace(/\#/g,n+""));else if(-1!=n.indexOf("#"))for(let t=0;t<e.operatorCount;t++)s.push(n.replace(/\#/g,t+""));else s.push(n);St.fmSynthFunctionCache[n]=new Function("synth","bufferIndex","runLength","tone","instrument",s.join("\n"))}return St.fmSynthFunctionCache[n]}if(0==t.type)return St.chipSynth;if(5==t.type)return St.harmonicsSynth;if(6==t.type)return St.pulseWidthSynth;if(7==t.type)return St.pickedStringSynth;if(2==t.type)return St.noiseSynth;if(3==t.type)return St.spectrumSynth;if(4==t.type)return St.drumsetSynth;throw new Error("Unrecognized instrument type: "+t.type)}static chipSynth(t,n,s,i,a){const r=t.tempMonoInstrumentSampleBuffer,o=e.chipWaves[a.chipWave].samples,h=o.length-1,l=i.specialIntervalExpressionMult*e.unisons[a.unison].sign;0!=a.unison||a.getChord().customInterval||(i.phases[1]=i.phases[0]);let c=i.phaseDeltas[0]*h,u=i.phaseDeltas[1]*h;const p=+i.phaseDeltaScales[0],f=+i.phaseDeltaScales[1];let d=+i.expressionStarts[0];const m=+i.expressionDeltas[0];let y=i.phases[0]%1*h,S=i.phases[1]%1*h;const g=i.noteFilters,b=0|i.noteFilterCount;let v=+i.initialNoteFilterInput1,M=+i.initialNoteFilterInput2;const I=St.applyFilters,D=0|y,P=0|S,x=D%h,F=P%h,w=y-D,k=S-P;let L=+o[x],T=+o[F];L+=(o[x+1]-L)*w,T+=(o[F+1]-T)*k;const C=n+s;for(let t=n;t<C;t++){y+=c,S+=u;const e=0|y,n=0|S,s=e%h,i=n%h;let a=o[s],D=o[i];const P=y-e,x=S-n;a+=(o[s+1]-a)*P,D+=(o[i+1]-D)*x;const F=(a-L)/c,w=(D-T)/u;L=a,T=D;const k=F+w*l,C=I(k,v,M,b,g);M=v,v=k,c*=p,u*=f;const O=C*d;d+=m,r[t]+=O}i.phases[0]=y/h,i.phases[1]=S/h,t.sanitizeFilters(g),i.initialNoteFilterInput1=v,i.initialNoteFilterInput2=M}static harmonicsSynth(t,n,s,i,a){const r=t.tempMonoInstrumentSampleBuffer,o=a.harmonicsWave.getCustomWave(a.type),h=o.length-1,l=i.specialIntervalExpressionMult*e.unisons[a.unison].sign;0!=a.unison||a.getChord().customInterval||(i.phases[1]=i.phases[0]);let c=i.phaseDeltas[0]*h,u=i.phaseDeltas[1]*h;const p=+i.phaseDeltaScales[0],f=+i.phaseDeltaScales[1];let d=+i.expressionStarts[0];const m=+i.expressionDeltas[0];let y=i.phases[0]%1*h,S=i.phases[1]%1*h;const g=i.noteFilters,b=0|i.noteFilterCount;let v=+i.initialNoteFilterInput1,M=+i.initialNoteFilterInput2;const I=St.applyFilters,D=0|y,P=0|S,x=D%h,F=P%h,w=y-D,k=S-P;let L=+o[x],T=+o[F];L+=(o[x+1]-L)*w,T+=(o[F+1]-T)*k;const C=n+s;for(let t=n;t<C;t++){y+=c,S+=u;const e=0|y,n=0|S,s=e%h,i=n%h;let a=o[s],D=o[i];const P=y-e,x=S-n;a+=(o[s+1]-a)*P,D+=(o[i+1]-D)*x;const F=(a-L)/c,w=(D-T)/u;L=a,T=D;const k=F+w*l,C=I(k,v,M,b,g);M=v,v=k,c*=p,u*=f;const O=C*d;d+=m,r[t]+=O}i.phases[0]=y/h,i.phases[1]=S/h,t.sanitizeFilters(g),i.initialNoteFilterInput1=v,i.initialNoteFilterInput2=M}static pickedStringSynth(t,n,s,i,a){const r=e.unisons[a.unison].voices;let o=St.pickedStringFunctionCache[r];if(null==o){let t="";t+=`\n\t\t\t\t\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst NoteAutomationStringSustainIndex = 3;\n\t\t\t\tconst voiceCount = ${r};\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tconst sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[NoteAutomationStringSustainIndex];\n\t\t\t\tconst sustainEnvelopeEnd   = tone.envelopeComputer.envelopeEnds[  NoteAutomationStringSustainIndex];\n\t\t\t\tconst stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * instrument.stringSustain / (Config.stringSustainRange - 1));\n\t\t\t\tconst stringDecayEnd   = 1.0 - Math.min(1.0, sustainEnvelopeEnd   * instrument.stringSustain / (Config.stringSustainRange - 1));\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\t\n\t\t\t\tconst prevDelayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet shelfSample# = +pickedString#.shelfSample;\n\t\t\t\tlet shelfPrevInput# = +pickedString#.shelfPrevInput;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expressionStarts[0];\n\t\t\t\tconst expressionDelta = +tone.expressionDeltas[0];\n\t\t\t\t\n\t\t\t\tconst phaseDeltaStart# = +tone.phaseDeltas[#];\n\t\t\t\tconst phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\t\t\t\tconst phaseDeltaEnd# = phaseDeltaStart# * Math.pow(phaseDeltaScale#, runLength);\n\t\t\t\t\n\t\t\t\tconst radiansPerSampleStart# = Math.PI * 2.0 * phaseDeltaStart#;\n\t\t\t\tconst radiansPerSampleEnd#   = Math.PI * 2.0 * phaseDeltaEnd#;\n\t\t\t\t\n\t\t\t\tconst centerHarmonicStart# = radiansPerSampleStart# * 2.0;\n\t\t\t\tconst centerHarmonicEnd#   = radiansPerSampleEnd# * 2.0;\n\t\t\t\t\n\t\t\t\tconst allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n\t\t\t\tconst allPassRadiansStart# = Math.min(Math.PI, radiansPerSampleStart# * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart#, Config.pickedStringDispersionFreqScale));\n\t\t\t\tconst allPassRadiansEnd# = Math.min(Math.PI, radiansPerSampleEnd# * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd#, Config.pickedStringDispersionFreqScale));\n\t\t\t\t\n\t\t\t\tconst shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n\t\t\t\tconst decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n\t\t\t\tconst decayCurveEnd   = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\n\t\t\t\tconst decayRateStart# = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart#);\n\t\t\t\tconst decayRateEnd#   = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd#);\n\t\t\t\tconst shelfGainStart# = Math.pow(decayRateStart#, Config.stringDecayRate);\n\t\t\t\tconst shelfGainEnd#   = Math.pow(decayRateEnd#,   Config.stringDecayRate);\n\t\t\t\tconst expressionDecayStart# = Math.pow(decayRateStart#, 0.002);\n\t\t\t\tconst expressionDecayEnd#   = Math.pow(decayRateEnd#,   0.002);`;for(let e=0;e<r;e++)t+="\n\t\t\t\t\n\t\t\t\tSynth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart#);\n\t\t\t\tlet allPassG# = +Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\n\t\t\t\tconst allPassPhaseDelayStart# = -synth.tempFrequencyResponse.angle() / centerHarmonicStart#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd#);\n\t\t\t\tconst allPassGEnd# = +Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\n\t\t\t\tconst allPassPhaseDelayEnd# = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, shelfGainStart#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart#)\n\t\t\t\tlet shelfA1# = +Synth.tempFilterStartCoefficients.a[1]\n\t\t\t\tlet shelfB0# = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart#\n\t\t\t\tlet shelfB1# = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart#\n\t\t\t\tconst shelfPhaseDelayStart# = -synth.tempFrequencyResponse.angle() / centerHarmonicStart#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterEndCoefficients.highShelf1stOrder(shelfRadians, shelfGainEnd#)\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd#)\n\t\t\t\tconst shelfA1End# = +Synth.tempFilterEndCoefficients.a[1]\n\t\t\t\tconst shelfB0End# = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd#\n\t\t\t\tconst shelfB1End# = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd#\n\t\t\t\tconst shelfPhaseDelayEnd# = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd#;".replace(/\#/g,String(e));t+="\n\t\t\t\t\n\t\t\t\tconst periodLengthStart# = 1.0 / phaseDeltaStart#;\n\t\t\t\tconst periodLengthEnd# = 1.0 / phaseDeltaEnd#;\n\t\t\t\tconst minBufferLength# = Math.ceil(Math.max(periodLengthStart#, periodLengthEnd#) * 2);\n\t\t\t\tlet delayLength# = periodLengthStart# - allPassPhaseDelayStart# - shelfPhaseDelayStart#;\n\t\t\t\tconst delayLengthEnd# = periodLengthEnd# - allPassPhaseDelayEnd# - shelfPhaseDelayEnd#;\n\t\t\t\t\n\t\t\t\tconst delayLengthDelta# = (delayLengthEnd# - delayLength#) / runLength;\n\t\t\t\tconst allPassGDelta# = (allPassGEnd# - allPassG#) / runLength;\n\t\t\t\tconst shelfA1Delta# = (shelfA1End# - shelfA1#) / runLength;\n\t\t\t\tconst shelfB0Delta# = (shelfB0End# - shelfB0#) / runLength;\n\t\t\t\tconst shelfB1Delta# = (shelfB1End# - shelfB1#) / runLength;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst pitchChanged# = Math.abs(Math.log2(delayLength# / prevDelayLength#)) > 0.01;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;";for(let e=0;e<r;e++)t+="\n\t\t\t\t\n\t\t\t\tconst reinitializeImpulse# = (delayIndex# == -1 || pitchChanged#);\n\t\t\t\tif (pickedString#.delayLine == null || pickedString#.delayLine.length <= minBufferLength#) {\n\t\t\t\t\t// The delay line buffer will get reused for other tones so might as well\n\t\t\t\t\t// start off with a buffer size that is big enough for most notes.\n\t\t\t\t\tconst likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / beepbox.Instrument.frequencyFromPitch(12));\n\t\t\t\t\tconst newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength#)));\n\t\t\t\t\tif (!reinitializeImpulse# && pickedString#.delayLine != null) {\n\t\t\t\t\t\t// If the tone has already started but the buffer needs to be reallocated,\n\t\t\t\t\t\t// transfer the old data to the new buffer.\n\t\t\t\t\t\tconst oldDelayBufferMask = (pickedString#.delayLine.length - 1) >> 0;\n\t\t\t\t\t\tconst startCopyingFromIndex = delayIndex# + pickedString#.delayResetOffset;\n\t\t\t\t\t\tdelayIndex# = pickedString#.delayLine.length - pickedString#.delayResetOffset;\n\t\t\t\t\t\tfor (let i = 0; i < pickedString#.delayLine.length; i++) {\n\t\t\t\t\t\t\tnewDelayLine[i] = pickedString#.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpickedString#.delayLine = newDelayLine;\n\t\t\t\t}\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\t\n\t\t\t\tif (reinitializeImpulse#) {\n\t\t\t\t\t// -1 delay index means the tone was reset.\n\t\t\t\t\t// Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\n\t\t\t\t\t\n\t\t\t\t\tdelayIndex# = 0;\n\t\t\t\t\tallPassSample# = 0.0;\n\t\t\t\t\tallPassPrevInput# = 0.0;\n\t\t\t\t\tshelfSample# = 0.0;\n\t\t\t\t\tshelfPrevInput# = 0.0;\n\t\t\t\t\tfractionalDelaySample# = 0.0;\n\t\t\t\t\t\n\t\t\t\t\t// Clear away a region of the delay buffer for the new impulse.\n\t\t\t\t\tconst startImpulseFrom = -delayLength#;\n\t\t\t\t\tconst startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart# / 2);\n\t\t\t\t\tconst stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart# * 2);\n\t\t\t\t\tpickedString#.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\n\t\t\t\t\tfor (let i = startZerosFrom; i <= stopZerosAt; i++) {\n\t\t\t\t\t\tdelayLine#[i & delayBufferMask#] = 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst impulseWave = instrument.harmonicsWave.getCustomWave(instrument.type);\n\t\t\t\t\tconst impulseWaveLength = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\t\t\t\t\tconst impulsePhaseDelta = impulseWaveLength / periodLengthStart#;\n\t\t\t\t\t\n\t\t\t\t\tconst fadeDuration = Math.min(periodLengthStart# * 0.2, synth.samplesPerSecond * 0.003);\n\t\t\t\t\tconst startImpulseFromSample = Math.ceil(startImpulseFrom);\n\t\t\t\t\tconst stopImpulseAt = startImpulseFrom + periodLengthStart# + fadeDuration;\n\t\t\t\t\tconst stopImpulseAtSample = stopImpulseAt;\n\t\t\t\t\tlet impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n\t\t\t\t\tlet prevWaveIntegral = 0.0;\n\t\t\t\t\tfor (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n\t\t\t\t\t\tconst impulsePhaseInt = impulsePhase|0;\n\t\t\t\t\t\tconst index = impulsePhaseInt % impulseWaveLength;\n\t\t\t\t\t\tlet nextWaveIntegral = impulseWave[index];\n\t\t\t\t\t\tconst phaseRatio = impulsePhase - impulsePhaseInt;\n\t\t\t\t\t\tnextWaveIntegral += (impulseWave[index+1] - nextWaveIntegral) * phaseRatio;\n\t\t\t\t\t\tconst sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n\t\t\t\t\t\tconst fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n\t\t\t\t\t\tconst fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n\t\t\t\t\t\tconst combinedFade = fadeIn * fadeOut;\n\t\t\t\t\t\tconst curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\n\t\t\t\t\t\tdelayLine#[i & delayBufferMask#] += sample * curvedFade;\n\t\t\t\t\t\tprevWaveIntegral = nextWaveIntegral;\n\t\t\t\t\t\timpulsePhase += impulsePhaseDelta;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;".replace(/\#/g,String(e));t+="\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * Config.unisons[instrument.unison].sign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tshelfSample# = shelfB0# * allPassSample# + shelfB1# * shelfPrevInput# - shelfA1# * shelfSample#;\n\t\t\t\t\tshelfPrevInput# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += shelfSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (";const e=[];for(let t=0;t<r;t++)e.push("fractionalDelaySample"+t+(1==t?" * unisonSign":""));t+=e.join(" + "),t+=") * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tshelfA1# += shelfA1Delta#;\n\t\t\t\t\tshelfB0# += shelfB0Delta#;\n\t\t\t\t\tshelfB1# += shelfB1Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfSample#) || Math.abs(shelfSample#) < epsilon) shelfSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfPrevInput#) || Math.abs(shelfPrevInput#) < epsilon) shelfPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.shelfSample = shelfSample#;\n\t\t\t\tpickedString#.shelfPrevInput = shelfPrevInput#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;",t=t.replace(/^.*\#.*$/gm,(t=>{const e=[];for(let n=0;n<r;n++)e.push(t.replace(/\#/g,String(n)));return e.join("\n")})),o=new Function("synth","bufferIndex","runLength","tone","instrument",t),St.pickedStringFunctionCache[r]=o}o(t,n,s,i,a)}static effectsSynth(t,n,s,i,a,r,o){const h=m(r.effects)&&0!=r.distortion,l=y(r.effects),c=o.eqFilterCount>0,u=S(r.effects)&&r.pan!=e.panCenter,p=g(r.effects)&&0!=r.chorus,f=b(r.effects)&&0!=r.echoSustain,d=v(r.effects)&&0!=r.reverb;let M=0;h&&(M|=1),M<<=1,l&&(M|=1),M<<=1,c&&(M|=1),M<<=1,u&&(M|=1),M<<=1,p&&(M|=1),M<<=1,f&&(M|=1),M<<=1,d&&(M|=1);let I=St.effectsFunctionCache[M];if(null==I){let t="";const e=p||d||f;t+="\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolumeStart;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;",e&&(t+="\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMultStart;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;"),h&&(t+="\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +beepbox.Config.distortionBaseVolume;\n\t\t\t\tconst distortionStart = +Math.pow(1.0 - 0.895 * (Math.pow(20.0, instrumentState.distortionStart) - 1.0) / 19.0, 2.0)\n\t\t\t\tconst distortionEnd   = +Math.pow(1.0 - 0.895 * (Math.pow(20.0, instrumentState.distortionEnd  ) - 1.0) / 19.0, 2.0)\n\t\t\t\tlet distortion = distortionStart;\n\t\t\t\tconst distortionDelta = (distortionEnd - distortionStart) / runLength;\n\t\t\t\tconst distortionDriveStart = (1.0 + 2.0 * instrumentState.distortionStart) / distortionBaseVolume;\n\t\t\t\tconst distortionDriveEnd   = (1.0 + 2.0 * instrumentState.distortionEnd)   / distortionBaseVolume;\n\t\t\t\tlet distortionDrive = distortionDriveStart;\n\t\t\t\tconst distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / runLength;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;"),l&&(t+="\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;"),c&&(t+="\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = beepbox.Synth.applyFilters;"),t+="\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolumeStart;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;",u&&(t+="\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeStartL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeStartR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = panningDelayPos - instrumentState.panningOffsetStartL + synth.panningDelayBufferSize;\n\t\t\t\tlet   panningOffsetR      = panningDelayPos - instrumentState.panningOffsetStartR + synth.panningDelayBufferSize;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;"),p&&(t+="\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tconst chorusStart = +instrumentState.chorusStart;\n\t\t\t\tconst chorusEnd   = +instrumentState.chorusEnd;\n\t\t\t\tlet chorusVoiceMult = chorusStart;\n\t\t\t\tconst chorusVoiceMultDelta = (chorusEnd - chorusStart) / runLength;\n\t\t\t\tlet chorusCombinedMult = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n\t\t\t\tconst chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n\t\t\t\tconst chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMult) / runLength;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;"),f&&(t+="\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMultStart;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;"),d&&(t+="\n\t\t\t\t\n\t\t\t\tconst reverbMask = beepbox.Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMultStart;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;"),t+="\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;",h&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;"),l&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;"),c&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;"),t+="\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;",t+=u?"\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;":"\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;",p&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;"),f&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;"),d&&(t+="\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;"),t+="\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;",e&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;"),t+="\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);",h&&(t+="\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;"),l&&(t+="\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;"),c&&(t+="\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;"),u&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;"),p&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;"),f&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;"),d&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos  = reverbDelayPos;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;"),I=new Function("synth","outputDataL","outputDataR","bufferIndex","runLength","instrument","instrumentState",t),St.effectsFunctionCache[M]=I}I(t,n,s,i,a,r,o)}static pulseWidthSynth(t,e,n,s,i){const a=t.tempMonoInstrumentSampleBuffer;let r=s.phaseDeltas[0];const o=+s.phaseDeltaScales[0];let h=+s.expressionStarts[0];const l=+s.expressionDeltas[0];let c=s.phases[0]%1,u=s.pulseWidth;const p=s.pulseWidthDelta,f=s.noteFilters,d=0|s.noteFilterCount;let m=+s.initialNoteFilterInput1,y=+s.initialNoteFilterInput2;const S=St.applyFilters,g=e+n;for(let t=e;t<g;t++){const e=c%1,n=(c+u)%1;let s=n-e;if(e<r)s+=.5*((b=e/r)+b-b*b-1);else if(e>1-r){s+=.5*((b=(e-1)/r)+b+b*b+1)}if(n<r)s-=.5*((b=n/r)+b-b*b-1);else if(n>1-r){var b;s-=.5*((b=(n-1)/r)+b+b*b+1)}const i=s,g=S(i,m,y,d,f);y=m,m=i,c+=r,r*=o,u+=p;const v=g*h;h+=l,a[t]+=v}s.phases[0]=c,t.sanitizeFilters(f),s.initialNoteFilterInput1=m,s.initialNoteFilterInput2=y}static noiseSynth(t,n,s,i,a){const r=t.tempMonoInstrumentSampleBuffer;let o=a.getDrumWave(),h=+i.phaseDeltas[0];const l=+i.phaseDeltaScales[0];let c=+i.expressionStarts[0];const u=+i.expressionDeltas[0];let p=i.phases[0]%1*e.chipNoiseLength;0==i.phases[0]&&(p=Math.random()*e.chipNoiseLength);const f=e.chipNoiseLength-1;let d=+i.sample;const m=i.noteFilters,y=0|i.noteFilterCount;let S=+i.initialNoteFilterInput1,g=+i.initialNoteFilterInput2;const b=St.applyFilters,v=Math.min(1,i.phaseDeltas[0]*e.chipNoises[a.chipNoise].pitchFilterMult),M=n+s;for(let t=n;t<M;t++){d+=(o[p&f]-d)*v;const e=d,n=b(e,S,g,y,m);g=S,S=e,p+=h,h*=l;const s=n*c;c+=u,r[t]+=s}i.phases[0]=p/e.chipNoiseLength,i.sample=d,t.sanitizeFilters(m),i.initialNoteFilterInput1=S,i.initialNoteFilterInput2=g}static spectrumSynth(t,n,s,i,a){const r=t.tempMonoInstrumentSampleBuffer;let o=a.getDrumWave(),h=128*i.phaseDeltas[0];const l=+i.phaseDeltaScales[0];let c=+i.expressionStarts[0];const u=+i.expressionDeltas[0];let p=+i.sample;const f=i.noteFilters,d=0|i.noteFilterCount;let m=+i.initialNoteFilterInput1,y=+i.initialNoteFilterInput2;const S=St.applyFilters;let g=i.phases[0]%1*e.spectrumNoiseLength;0==i.phases[0]&&(g=St.findRandomZeroCrossing(o,e.spectrumNoiseLength)+h);const b=e.spectrumNoiseLength-1,v=Math.min(1,h),M=n+s;for(let t=n;t<M;t++){const e=0|g,n=e&b;let s=o[n];const i=g-e;s+=(o[n+1]-s)*i,p+=(s-p)*v;const a=p,M=S(a,m,y,d,f);y=m,m=a,g+=h,h*=l;const I=M*c;c+=u,r[t]+=I}i.phases[0]=g/e.spectrumNoiseLength,i.sample=p,t.sanitizeFilters(f),i.initialNoteFilterInput1=m,i.initialNoteFilterInput2=y}static drumsetSynth(t,n,s,i,a){const r=t.tempMonoInstrumentSampleBuffer;let o=a.getDrumsetWave(i.drumsetPitch),h=i.phaseDeltas[0]/lt.drumsetIndexReferenceDelta(i.drumsetPitch);const l=+i.phaseDeltaScales[0];let c=+i.expressionStarts[0];const u=+i.expressionDeltas[0],p=i.noteFilters,f=0|i.noteFilterCount;let d=+i.initialNoteFilterInput1,m=+i.initialNoteFilterInput2;const y=St.applyFilters;let S=i.phases[0]%1*e.spectrumNoiseLength;0==i.phases[0]&&(S=St.findRandomZeroCrossing(o,e.spectrumNoiseLength)+h);const g=e.spectrumNoiseLength-1,b=n+s;for(let t=n;t<b;t++){const e=0|S,n=e&g;let s=o[n];const i=S-e;s+=(o[n+1]-s)*i;const a=s,b=y(a,d,m,f,p);m=d,d=a,S+=h,h*=l;const v=b*c;c+=u,r[t]+=v}i.phases[0]=S/e.spectrumNoiseLength,t.sanitizeFilters(p),i.initialNoteFilterInput1=d,i.initialNoteFilterInput2=m}static findRandomZeroCrossing(t,e){let n=Math.random()*e;const s=e-1;let i=n&s,a=t[i];for(let r=128;r>0;r--){const r=i+16&s,o=t[r];if(a*o<=0){for(let r=0;r<16;r++){const r=i+1&s,o=t[r];if(a*o<=0){const t=o-a;n=i,Math.abs(t)>1e-8&&(n+=-a/t),n=Math.max(0,n)%e;break}i=r,a=o}break}i=r,a=o}return n}static instrumentVolumeToVolumeMult(t){return t==e.volumeRange-1?0:Math.pow(2,e.volumeLogScale*t)}static volumeMultToInstrumentVolume(t){return t<=0?e.volumeRange-1:Math.min(e.volumeRange-2,Math.log2(t)/e.volumeLogScale)}static noteSizeToVolumeMult(t){return Math.pow(Math.max(0,t)/e.noteSizeMax,1.5)}static volumeMultToNoteSize(t){return Math.pow(Math.max(0,t),1/1.5)*e.noteSizeMax}static fadeInSettingToSeconds(t){return.0125*(.95*t+.05*t*t)}static secondsToFadeInSetting(t){return Y(0,e.fadeInRange,Math.round((-.95+Math.sqrt(.9025+.2*t/.0125))/.1))}static fadeOutSettingToTicks(t){return e.fadeOutTicks[t]}static ticksToFadeOutSetting(t){let n=e.fadeOutTicks[0];if(t<=n)return 0;for(let s=1;s<e.fadeOutTicks.length;s++){let i=e.fadeOutTicks[s];if(t<=i)return t<(n+i)/2?s-1:s;n=i}return e.fadeOutTicks.length-1}static detuneToCents(t){return t*(Math.abs(t)+1)/2}static centsToDetune(t){return Math.sign(t)*(Math.sqrt(1+8*Math.abs(t))-1)/2}getSamplesPerTick(){if(null==this.song)return 0;const t=this.song.getBeatsPerMinute()/60,n=e.partsPerBeat*t,s=e.ticksPerPart*n;return this.samplesPerSecond/s}static fittingPowerOfTwo(t){return 1<<32-Math.clz32(Math.ceil(t)-1)}sanitizeFilters(t){let e=!1;for(const n of t){const t=Math.abs(n.output1),s=Math.abs(n.output2);if(!(t<100&&s<100)){e=!0;break}t<K&&(n.output1=0),s<K&&(n.output2=0)}if(e)for(const e of t)e.output1=0,e.output2=0}static sanitizeDelayLine(t,e,n){for(;;){const s=--e&n,i=Math.abs(t[s]);if(Number.isFinite(i)&&(0==i||i>=K))break;t[s]=0}}static applyFilters(t,e,n,s,i){for(let a=0;a<s;a++){const s=i[a],r=s.output1,o=s.output2,h=s.a1,l=s.a2,c=s.b0,u=s.b1,p=s.b2;t=c*t+u*e+p*n-h*r-l*o,s.a1=h+s.a1Delta,s.a2=l+s.a2Delta,s.useMultiplicativeInputCoefficients?(s.b0=c*s.b0Delta,s.b1=u*s.b1Delta,s.b2=p*s.b2Delta):(s.b0=c+s.b0Delta,s.b1=u+s.b1Delta,s.b2=p+s.b2Delta),s.output2=r,s.output1=t,n=o,e=r}return t}}St.tempFilterStartCoefficients=new $,St.tempFilterEndCoefficients=new $,St.fmSynthFunctionCache={},St.effectsFunctionCache=Array(128).fill(void 0),St.pickedStringFunctionCache=Array(3).fill(void 0),St.fmSourceTemplate=("\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = beepbox.Config.sineWave;\n\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#];\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.expressionStarts[#];\n\t\tconst operator#OutputDelta = +tone.expressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta      = +tone.feedbackDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = beepbox.Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + runLength;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tfeedbackMult += feedbackDelta;\n\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tdata[sampleIndex] += sample;\n\t\t}\n\t\t\n\t\ttone.phases[#] = operator#Phase / "+e.sineWaveLength+";\n\t\ttone.feedbackOutputs[#] = operator#Output;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t").split("\n"),St.operatorSourceTemplate=("\n\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\tconst operator#Index    = operator#PhaseInt & "+e.sineWaveMask+";\n\t\t\tconst operator#Sample   = sineWave[operator#Index];\n\t\t\toperator#Output         = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t").split("\n");const{a:gt,button:bt,div:vt,h1:Mt,input:It}=C,{svg:Dt,circle:Pt,rect:xt,path:Ft}=O;document.head.appendChild(C.style({type:"text/css"},`\n\tbody {\n\t\tcolor: ${W.primaryText};\n\t\tbackground: ${W.editorBackground};\n\t}\n\th1 {\n\t\tfont-weight: bold;\n\t\tfont-size: 14px;\n\t\tline-height: 22px;\n\t\ttext-align: initial;\n\t\tmargin: 0;\n\t}\n\ta {\n\t\tfont-weight: bold;\n\t\tfont-size: 12px;\n\t\tline-height: 22px;\n\t\twhite-space: nowrap;\n\t\tcolor: ${W.linkAccent};\n\t}\n\tbutton {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tposition: relative;\n\t\tborder: none;\n\t\tborder-radius: 5px;\n\t\tbackground: ${W.uiWidgetBackground};\n\t\tcolor: ${W.primaryText};\n\t\tcursor: pointer;\n\t\tfont-size: 14px;\n\t\tfont-family: inherit;\n\t}\n\tbutton:hover, button:focus {\n\t\tbackground: ${W.uiWidgetFocus};\n\t}\n\t.playButton, .pauseButton {\n\t\tpadding-left: 24px;\n\t\tpadding-right: 6px;\n\t}\n\t.playButton::before {\n\t\tcontent: "";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${W.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><path d="M 6 0 L -5 6 L -5 -6 z" fill="gray"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><path d="M 6 0 L -5 6 L -5 -6 z" fill="gray"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t.pauseButton::before {\n\t\tcontent: "";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${W.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><rect x="-5" y="-6" width="3" height="12" fill="gray"/><rect x="2"  y="-6" width="3" height="12" fill="gray"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><rect x="-5" y="-6" width="3" height="12" fill="gray"/><rect x="2"  y="-6" width="3" height="12" fill="gray"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t\n\tinput[type=range] {\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t\theight: 16px;\n\t\tmargin: 0;\n\t\tcursor: pointer;\n\t\tbackground-color: ${W.editorBackground};\n\t\ttouch-action: pan-y;\n\t}\n\tinput[type=range]:focus {\n\t\toutline: none;\n\t}\n\tinput[type=range]::-webkit-slider-runnable-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${W.uiWidgetBackground};\n\t}\n\tinput[type=range]::-webkit-slider-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${W.primaryText};\n\t\tcursor: pointer;\n\t\t-webkit-appearance: none;\n\t\tmargin-top: -6px;\n\t}\n\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\n\t\tbackground: ${W.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${W.uiWidgetBackground};\n\t}\n\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\n\t\tbackground: ${W.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tborder: none;\n\t\tbackground: ${W.primaryText};\n\t\tcursor: pointer;\n\t}\n\tinput[type=range]::-ms-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${W.uiWidgetBackground};\n\t\tborder-color: transparent;\n\t}\n\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\n\t\tbackground: ${W.uiWidgetFocus};\n\t}\n\tinput[type=range]::-ms-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${W.primaryText};\n\t\tcursor: pointer;\n\t}\n`)),W.setTheme("dark classic");let wt,kt=null,Lt=(4294967295*Math.random()>>>0).toString(16),Tt=!1,Ct=!1,Ot=1;const Et=new St;let Rt=Mt({style:"flex-grow: 1; margin: 0 1px;"},""),Bt=gt({target:"_top",style:"margin: 0 4px;"},"✎ Edit"),At=gt({href:"javascript:void(0)",style:"margin: 0 4px;"},"⎘ Copy URL"),Nt=gt({href:"javascript:void(0)",style:"margin: 0 4px;"},"⤳ Share"),zt=gt({target:"_top",style:"margin: 0 4px;"},"⇱ Fullscreen"),Wt=!1;const Vt=bt({style:"width: 100%; height: 100%; max-height: 50px;"}),qt=vt({style:"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;"},Vt),Gt=Ft({d:"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z"}),jt=bt({title:"loop",style:"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;"},Dt({width:12,height:12,viewBox:"0 0 12 12"},Gt)),$t=Dt({style:"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;",viewBox:"0 0 12 12"},Ft({fill:W.uiWidgetBackground,d:"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z"})),Ut=It({title:"volume",type:"range",value:75,min:0,max:100,step:1,style:"width: 12vw; max-width: 100px; margin: 0 1px;"}),Ht=Dt({width:12,height:12,viewBox:"0 0 12 12"},Pt({cx:"5",cy:"5",r:"4.5","stroke-width":"1",stroke:"currentColor",fill:"none"}),Ft({stroke:"currentColor","stroke-width":"2",d:"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5",fill:"none"})),Kt=bt({title:"zoom",style:"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;"},Ht),Qt=Dt({style:"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;"}),Jt=vt({style:`position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${W.playhead}; pointer-events: none;`}),_t=vt({style:"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;"},Qt,Jt),Zt=vt({style:"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;"},_t);function Xt(t,e){Et.setSong(t),Et.snapToStart();const n=Et.song.toBase64String();Bt.href="../#"+n;const s=new URLSearchParams(e?location.hash.slice(1):"");s.set("song",n),location.hash=s.toString()}function Yt(){let t=location.hash;if(kt!=t&&""!=t){kt=t,"#"==t.charAt(0)&&(t=t.substring(1)),zt.href=location.href;for(const e of t.split("&")){let n=e.indexOf("=");if(-1!=n){let t=e.substring(0,n),s=e.substring(n+1);switch(t){case"song":Xt(s,!0);break;case"loop":Et.loopRepeatCount="1"!=s?0:-1,ue()}}else Xt(t,!1)}he()}}function te(){Et.playing&&(wt=requestAnimationFrame(te),localStorage.getItem("playerId")!=Lt&&ee(),oe()),Tt!=Et.playing&&ce()}function ee(){null!=Et.song&&(null!=wt&&cancelAnimationFrame(wt),wt=null,Et.playing?Et.pause():(Et.play(),localStorage.setItem("playerId",Lt),te())),ce()}function ne(t){t.preventDefault(),ie(t.clientX||t.pageX)}function se(t){ie(t.touches[0].clientX)}function ie(t){if(Wt&&null!=Et.song){const e=Zt.getBoundingClientRect();Et.playhead=Et.song.barCount*(t-e.left)/(e.right-e.left),oe()}}function ae(){Wt=!1}function re(){const t=+Ut.value;Et.volume=Math.min(1,Math.pow(t/50,.5))*Math.pow(2,(t-75)/25)}function oe(){if(null!=Et.song){let t=Et.playhead/Et.song.barCount;Jt.style.left=Ot*t+"px";const e=Zt.getBoundingClientRect();Zt.scrollLeft=t*(Ot-e.width)}}function he(){if(Qt.innerHTML="",null==Et.song)return;const t=Zt.getBoundingClientRect();let n,s,i;if(Ct){n=t.height,s=Math.max(1,Math.min(e.pitchOctaves,Math.round(n/24))),i=12*s+1;const a=(n-1)/i,r=Math.max(8,4*a);Ot=Math.max(t.width,r*Et.song.barCount*Et.song.beatsPerBar)}else{Ot=t.width;const a=Math.max(1,Ot/(Et.song.barCount*Et.song.beatsPerBar)/3);n=Math.min(t.height,a*(e.maxPitch+1)+1),s=Math.max(3,Math.min(e.pitchOctaves,Math.round(n/(12*a)))),i=12*s+1}_t.style.width=Ot+"px",_t.style.height=n+"px",Qt.style.width=Ot+"px",Qt.style.height=n+"px";const a=Ot/Et.song.barCount,r=a/(Et.song.beatsPerBar*e.partsPerBeat),o=(n-1)/i,h=(n-1)/e.drumCount;for(let t=0;t<Et.song.barCount+1;t++){const e=t==Et.song.loopStart||t==Et.song.loopStart+Et.song.loopLength?W.loopAccent:W.uiWidgetBackground;Qt.appendChild(xt({x:t*a-1,y:0,width:2,height:n,fill:e}))}for(let t=0;t<=s;t++)Qt.appendChild(xt({x:0,y:12*t*o,width:Ot,height:o+1,fill:W.tonic,opacity:.75}));for(let t=Et.song.channels.length-1;t>=0;t--){const i=Et.song.getChannelIsNoise(t),l=i?h:o,c=Et.song.channels[t].octave,u=Math.max(0,Math.min(e.pitchOctaves-s,Math.ceil(c-.5*s)))*l*12+n-.5*l-.5;for(let e=0;e<Et.song.barCount;e++){const n=Et.song.getPattern(t,e);if(null==n)continue;const s=e*a;for(let e=0;e<n.notes.length;e++){const a=n.notes[e];for(const e of a.pitches){const n=le(e,a.start,a.pins,(l+1)/2,s,u,r,l),o=Ft({d:n,fill:W.getChannelColor(Et.song,t).primaryChannel});i&&(o.style.opacity=String(.6)),Qt.appendChild(o)}}}}oe()}function le(t,n,s,i,a,r,o,h){let l=`M ${a+o*(n+s[0].time)} ${r-t*h+i*(s[0].size/e.noteSizeMax)} `;for(let c=0;c<s.length;c++){const u=s[c];l+=`L ${a+o*(n+u.time)} ${r-h*(t+u.interval)-i*(u.size/e.noteSizeMax)} `}for(let c=s.length-1;c>=0;c--){const u=s[c];l+=`L ${a+o*(n+u.time)} ${r-h*(t+u.interval)+i*(u.size/e.noteSizeMax)} `}return l}function ce(){Et.playing?(Vt.classList.remove("playButton"),Vt.classList.add("pauseButton"),Vt.title="Pause (Space)",Vt.textContent="Pause"):(Vt.classList.remove("pauseButton"),Vt.classList.add("playButton"),Vt.title="Play (Space)",Vt.textContent="Play"),Tt=Et.playing}function ue(){Gt.setAttribute("fill",-1==Et.loopRepeatCount?W.linkAccent:W.uiWidgetBackground)}function pe(){Ht.style.color=Ct?W.linkAccent:W.uiWidgetBackground}return document.body.appendChild(Zt),document.body.appendChild(vt({style:"flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;"},qt,jt,$t,Ut,Kt,Rt,Bt,At,Nt,zt)),top!==self?(At.style.display="none",Nt.style.display="none"):(zt.style.display="none","share"in navigator||(Nt.style.display="none")),null!=localStorage.getItem("volume")&&(Ut.value=localStorage.getItem("volume")),re(),window.addEventListener("resize",(function(){he()})),window.addEventListener("keydown",(function(t){switch(t.keyCode){case 32:ee(),t.preventDefault();break;case 219:Et.goToPrevBar(),oe(),t.preventDefault();break;case 221:Et.goToNextBar(),oe(),t.preventDefault()}})),Qt.addEventListener("mousedown",(function(t){Wt=!0,ne(t)})),window.addEventListener("mousemove",ne),window.addEventListener("mouseup",ae),Qt.addEventListener("touchstart",(function(t){Wt=!0,se(t)})),Qt.addEventListener("touchmove",se),Qt.addEventListener("touchend",ae),Qt.addEventListener("touchcancel",ae),Vt.addEventListener("click",ee),jt.addEventListener("click",(function(){-1==Et.loopRepeatCount?Et.loopRepeatCount=0:Et.loopRepeatCount=-1,ue()})),Ut.addEventListener("input",(function(){localStorage.setItem("volume",Ut.value),re()})),Kt.addEventListener("click",(function(){Ct=!Ct,pe(),he()})),At.addEventListener("click",(function(){if(navigator.clipboard&&navigator.clipboard.writeText)return void navigator.clipboard.writeText(location.href).catch((()=>{window.prompt("Copy to clipboard:",location.href)}));const t=document.createElement("textarea");t.textContent=location.href,document.body.appendChild(t),t.select();const e=document.execCommand("copy");t.remove(),e||window.prompt("Copy this:",location.href)})),Nt.addEventListener("click",(function(){navigator.share({url:location.href})})),window.addEventListener("hashchange",Yt),Yt(),ue(),pe(),ce(),t.Channel=ct,t.Config=e,t.Instrument=lt,t.Note=et,t.Pattern=nt,t.Synth=St,Object.defineProperty(t,"j",{value:!0}),t}({});
//# sourceMappingURL=beepbox_player.min.js.map