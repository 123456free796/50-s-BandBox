{"version":3,"sources":["../../synth/SynthConfig.ts","../../node_modules/imperative-html/src/elements-base.ts","../../node_modules/imperative-html/src/elements-strict.ts","../../editor/ColorConfig.ts","../../synth/FFT.ts","../../synth/Deque.ts","../../synth/filtering.ts","../../synth/synth.ts","../../player/main.ts"],"names":["Config","centerWave","wave","sum","i","length","average","performIntegral","push","Float64Array","cumulative","temp","getPulseWidthRatio","pulseWidth","Math","pow","pulseWidthRange","pulseWidthStepPower","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","Float32Array","chipNoiseLength","drumBuffer","newBuffer","random","Error","drawNoiseSpectrum","sqrt","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","highIndex","min","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","PI","cos","sin","getArpeggioPitchIndex","pitchCount","rhythm","arpeggio","arpeggioPattern","rhythms","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","effectsIncludeNoteFilter","effectsIncludeDistortion","effectsIncludeBitcrusher","effectsIncludePanning","effectsIncludeChorus","effectsIncludeEcho","effectsIncludeReverb","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","stepsPerBeat","ticksPerArpeggio","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","chipWaves","expression","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","periodsSeconds","delayTicks","unisons","voices","spread","offset","sign","effectNames","effectOrder","noteSizeMax","volumeRange","volumeLogScale","panCenter","panMax","panDelaySecondsMax","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","max","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","type","speed","feedbacks","indices","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","pitchOctaves","maxPitch","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","sineWaveLength","sineWaveMask","sineWave","generateSineWave","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","compatibleInstruments","applyElementArgs","element","args","args_1","__values","args_1_1","next","done","arg","Node","appendChild","document","createTextNode","Array","isArray","Symbol","iterator","__spread","constructor","Object","Element","_d","e_2","_e","key","setAttribute","join","console","warn","tagName","_f","e_3","_g","styleKey","style","setProperty","removeAttribute","svgNS","HTML","_i","arguments","createRange","createContextualFragment","SVG","fragment","createDocumentFragment","svgParser","DOMParser","parseFromString","documentElement","firstChild","importNode","name_1","createElement","_c","split","name_2","createElementNS","test","snakeCaseName","replace","ColorConfig","static","song","channel","pitchChannelCount","pitchChannels","noiseChannels","this","_styleElement","textContent","themes","themeColor","querySelector","getComputedStyle","getPropertyValue","factor","countBits","n","isPowerOf2","round","log","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","reverseIndexBits","pageMargin","editorBackground","hoverPreview","playhead","primaryText","secondaryText","invertedText","textSelection","boxSelectionFill","loopAccent","linkAccent","uiWidgetBackground","uiWidgetFocus","pitchBackground","tonic","fifthNote","whitePianoKey","blackPianoKey","secondaryChannel","primaryChannel","secondaryNote","primaryNote","head","Deque","_capacity","_buffer","undefined","_mask","_offset","_count","pushFront","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","set","get","remove","oldBuffer","size","FilterCoefficients","a","b","order","linearGain0thOrder","linearGain","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","filterResonance","feedback","highPass2ndOrderButterworth","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","b0","b1","b2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","epsilon","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","read","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","clear","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","other","encodeBase64","buffer","lengthBase64","ceil","makeNotePin","interval","time","clamp","val","validateRange","Note","pitch","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","instruments","cloneNotes","note","reset","Operator","frequency","SpectrumWave","isNoiseChannel","spectrum","_wave","_waveIsReady","isHarmonic","markCustomWaveDirty","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","point","floor","value1","value2","octave1","octave2","HarmonicsWave","harmonics","instrumentType","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","FilterControlPoint","freq","gain","freqSetting","gainSetting","getHz","getHzFromSettingValue","hz","getSettingValueFromHz","getLinearGain","peakMult","power","neutral","interpolatedPower","toCoefficients","sampleRate","freqMult","getVolumeCompensationMult","octave","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","FilterSettings","controlPoints","controlPointCount","addPoint","controlPoint","toJsonObject","filterArray","cutoffHz","fromJsonObject","filterObject","pointObject","indexOf","getRoundedSettingValueFromHz","getRoundedSettingValueFromLinearGain","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","asin","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","finalRadians","legacyFilter","response","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","EnvelopeSettings","target","envelope","envelopeObject","Instrument","preset","chipWave","chipNoise","eqFilter","noteFilter","envelopeCount","fadeIn","fadeOut","transition","pitchShift","detune","vibrato","unison","chord","volume","pan","stringSustain","distortion","bitcrusherFreq","bitcrusherQuantization","chorus","reverb","echoSustain","echoDelay","algorithm","feedbackType","feedbackAmplitude","operators","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","spectrumWave","setTypeAndReset","legacySettings","filterCutoff","legacyFilterEnv","filterEnvelope","legacyPulseEnv","pulseEnvelope","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","feedbackEnvelope","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","Synth","detuneToCents","fadeInSettingToSeconds","fadeOutSettingToTicks","getDrumsetEnvelope","operatorArray","operator","legacyGlobalReverb","legacyEffectsNames","transitionProperty","binary","fadeInSeconds","seamless","sudden","hard","smooth","soft","slide","secondsToFadeInSetting","ticksToFadeOutSetting","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","centsToDetune","vibratoProperty","legacyVibratoNames","isNaN","findIndex","legacyEnvelopeNames","custom","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","operatorObject","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","frequencyFromPitch","drumsetIndexReferenceDelta","supportsEnvelopeTarget","envelopeSettings","automationTarget","clearInvalidEnvelopeTargets","envelopeIndex","warmUp","samplesPerSecond","_drumsetIndexToSpectrumOctave","getDrumsetWave","getTransition","getFadeInSeconds","getFadeOutTicks","Channel","patterns","bars","muted","Song","string","channels","fromBase64String","initToDefault","getChannelCount","noiseChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","patternInstruments","getMaxInstrumentsPerPattern","channelIndex","getMaxInstrumentsPerPatternForChannel","getChannelIsNoise","andResetChannels","scale","loopStart","loopLength","tempo","beatsPerBar","barCount","patternsPerChannel","pattern","instrument","bar","toBase64String","bits","_latestVersion","harmonicsBits","o","spectrumBits","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","octaveOffset","lastPitch","recentPitches","recentShapes","instrumentCount","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","slice","legacyIndex","compressed","charIndex","JSON","parse","substring","version","_oldestVersion","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","beforeNine","legacySettingsCache","command","instrumentChannelIterator","instrumentIndexIterator","channelCount","instrumentsPerChannel","instrumentIndex","instrumentsFlagBits","presetValue","legacyWaves","originalControlPointCount","_envelopeFromLegacyIndex","settings","legacyEffects","legacyEnvelopes","originalValue","byteCount","subStringLength","bitStringLength","bitStringLengthLength","newPattern","newNotes","noteCount","useOldShape","shape","pinCount","initialSize","bendCount","pinObj","pitchBend","intervalIter","shift","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","noteArray","pointArray","tick","noteObject","points","patternObject","sequenceArray","l","channelObject","sequence","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","enigma","scaleName","letter","charAt","toUpperCase","symbol","toLowerCase","C","D","E","F","G","A","B","importedPartsPerBeat","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","instrumentObjects","maxNoteCount","tickClock","k","noteClock","startInterval","lowestPitch","highestPitch","getPattern","patternIndex","getBeatsPerMinute","maxValue","clz32","PickedString","delayLine","delayIndex","allPassSample","allPassPrevInput","shelfSample","shelfPrevInput","fractionalDelaySample","prevDelayLength","delayResetOffset","EnvelopeComputer","noteSecondsStart","noteSecondsEnd","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsEnd","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","envelopeStarts","envelopeEnds","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","tickTimeEnd","secondsPassing","tone","atNoteStart","forceContinueAtStart","ticksPassing","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","beats","noteSize","noteSizeToVolumeMult","attack","Tone","fill","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","lastInterval","sample","phases","phaseDeltas","expressionStarts","expressionDeltas","phaseDeltaScales","prevVibrato","pulseWidthDelta","pickedStrings","noteFilters","noteFilterCount","initialNoteFilterInput1","initialNoteFilterInput2","specialIntervalMult","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","envelopeComputer","maxWaves","pickedString","InstrumentState","awake","computed","tonesAddedInThisTick","flushingDelayLines","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","releasedTones","liveInputTones","eqFilterVolumeStart","eqFilterVolumeDelta","mixVolumeStart","mixVolumeDelta","delayInputMultStart","delayInputMultDelta","distortionStart","distortionEnd","distortionFractionalInput1","distortionFractionalInput2","distortionFractionalInput3","distortionPrevInput","distortionNextOutput","bitcrusherPrevInput","bitcrusherCurrentOutput","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFilters","eqFilterCount","initialEqFilterInput1","initialEqFilterInput2","panningDelayLine","panningDelayPos","panningVolumeStartL","panningVolumeStartR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetStartL","panningOffsetStartR","panningOffsetDeltaL","panningOffsetDeltaR","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusStart","chorusEnd","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPos","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetLastTick","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoDelayOffsetLastTickIsComputed","echoMultStart","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMultStart","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","allocateNecessaryBuffers","synth","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","safeEchoDelaySteps","safeEchoDelayBufferSize","fittingPowerOfTwo","newDelayLineL","newDelayLineR","oldMask","deactivate","resetAllEffects","compute","runLength","tickSampleCountdown","tickRemainingStart","tickRemainingEnd","usesDistortion","usesBitcrusher","usesPanning","usesChorus","usesEcho","usesReverb","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","phaseDeltaStart","phaseDeltaEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterVolume","eqFilterSettings","tempFilterStartCoefficients","tempFilterEndCoefficients","mainInstrumentVolume","instrumentVolumeToVolumeMult","mixVolumeEnd","eqFilterVolumeEnd","delayInputMultEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","maxEchoMult","echoMultEnd","echoDelayOffset","isAtEndOfTick","shelfRadians","maxReverbMult","reverbStart","reverbEnd","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","averageDelaySeconds","attenuationPerSecond","averageMult","progressInTick","progressAtEndOfTick","ChannelState","singleSeamlessInstrument","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","liveInputInstruments","loopRepeatCount","playheadInternal","prevBar","nextBar","beat","isAtStartOfTick","isPlayingSong","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","tempFrequencyResponse","tonePool","tempMatchedPitchTones","limit","tempMonoInstrumentSampleBuffer","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","synthesize","deactivateAudio","computeDelayBufferSizes","setSong","syncSongState","channelState","instrumentState","warmUpSynthesizer","getSamplesPerTick","getInstrumentSynthFunction","playing","remainder","getSamplesPerBar","getTicksIntoBar","getCurrentPart","getTotalBars","panningDelayBufferMask","chorusDelayBufferMask","activateAudio","window","AudioContext","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","maintainLiveInput","play","pause","snapToStart","snapToBar","goToBar","resetEffects","freeAllTones","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","outputBufferLength","playSong","ended","limitDecay","limitRise","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","determineCurrentActiveTones","determineLiveInputTones","tonesPlayedInThisInstrument","playTone","abs","freeReleasedTone","shouldFadeOutFast","effectsSynth","runEnd","sampleL","sampleR","limitedVolume","Number","isFinite","freeTone","newTone","releaseTone","toneIndex","toneList","toneCount","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","firstNote","secondNote","firstNoteInterval","currentTick","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","partsPerBar","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","adjacentNotesHaveMatchingPitches","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","oldTone","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","computeTone","synthesizer","chordExpression","computeChordExpression","intervalScale","secondsPerPart","sampleTime","beatsPerPart","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","toneIsOnLastTick","intervalStart","intervalEnd","transitionExpressionStart","transitionExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","transitionExpressionTickStart","transitionExpressionTickEnd","intervalTickStart","intervalTickEnd","noteLengthTicks","intervalDiff","chordSizeDiff","vibratoAmplitude","vibratoStart","getLFOAmplitude","ticksUntilVibratoStart","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteFilterSettings","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","drumsetFilterEnvelope","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeCurve","operatorAmplitudeCurve","amplitudeMult","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","feedbackStart","feedbackEnd","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthStart","pulseWidthEnd","startFreq","voiceCountExpression","unisonEnvelopeStart","unisonEnvelopeEnd","unisonAStart","unisonAEnd","unisonBStart","unisonBEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","data","unisonSign","phaseDeltaA","phaseDeltaB","phaseDeltaScaleA","phaseDeltaScaleB","expressionDelta","phaseA","phaseB","filters","filterCount","initialFilterInput1","initialFilterInput2","applyFilters","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","prevWaveIntegralA","prevWaveIntegralB","sampleIndex","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","inputSample","output","sanitizeFilters","voiceCount","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","voice","sampleList","lines","usesEqFilter","signature","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","phaseDelta","phaseDeltaScale","phase","sawPhaseA","sawPhaseB","pulseWave","t","phaseMask","noiseSample","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","phaseRatio","indexPrev","wavePrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","volumeMult","setting","seconds","ticks","lower","upper","cents","beatsPerSecond","partsPerSecond","tickPerSecond","lastIndex","mask","input1","input2","button","div","h1","input","svg","circle","rect","path","setTheme","animationRequest","prevHash","id","toString","pauseButtonDisplayed","zoomEnabled","timelineWidth","titleText","editLink","copyLink","href","shareLink","fullscreenLink","draggingPlayhead","playButton","playButtonContainer","loopIcon","d","loopButton","title","width","height","viewBox","volumeIcon","volumeSlider","step","zoomIcon","cx","cy","r","stroke","zoomButton","timeline","timelineContainer","visualizationContainer","loadSong","songString","reuseParams","updatedSongString","hashQueryParams","URLSearchParams","location","hash","hashUpdatedExternally","myHash","parameter","equalsIndex","paramName","renderLoopIcon","renderTimeline","animate","requestAnimationFrame","localStorage","getItem","onTogglePlay","renderPlayhead","renderPlayButton","cancelAnimationFrame","setItem","onTimelineMouseMove","event","preventDefault","onTimelineCursorMove","clientX","pageX","onTimelineTouchMove","touches","mouseX","boundingRect","getBoundingClientRect","left","right","onTimelineCursorUp","setSynthVolume","pos","scrollLeft","innerHTML","timelineHeight","windowOctaves","windowPitchCount","semitoneHeight","targetBeatWidth","targetSemitoneHeight","barWidth","partWidth","wavePitchHeight","drumPitchHeight","color","opacity","isNoise","pitchHeight","configuredOctaveScroll","offsetY","offsetX","drawNote","noteElement","getChannelColor","radius","classList","add","renderZoomIcon","body","top","self","display","navigator","addEventListener","keyCode","clipboard","writeText","catch","prompt","textField","select","succeeded","execCommand","share","url"],"mappings":"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","sourcesContent":["/*!\nCopyright (C) 2021 John Nesky\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.\n*/\n\nexport interface Dictionary<T> {\n\t[K: string]: T;\n}\n\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\n\tdictionary: Dictionary<T>;\n}\n\nexport const enum FilterType {\n\tlowPass,\n\thighPass,\n\tpeak,\n\tlength,\n}\n\nexport const enum EnvelopeType {\n\tnoteSize,\n\tnone,\n\tpunch,\n\tflare,\n\ttwang,\n\tswell,\n\ttremolo,\n\ttremolo2,\n\tdecay,\n}\n\nexport const enum InstrumentType {\n\tchip,\n\tfm,\n\tnoise,\n\tspectrum,\n\tdrumset,\n\tharmonics,\n\tpwm,\n\tpickedString,\n\tlength,\n}\n\nexport const enum EffectType {\n\treverb,\n\tchorus,\n\tpanning,\n\tdistortion,\n\tbitcrusher,\n\tnoteFilter,\n\techo,\n\tpitchShift,\n\tdetune,\n\tvibrato,\n\ttransition,\n\tchord,\n\t// If you add more, you'll also have to extend the bitfield used in Base64 which currently uses two six-bit characters.\n\tlength,\n}\n\nexport const enum NoteAutomationIndex {\n\tnoteVolume,\n\tnoteFilterAllFreqs,\n\tpulseWidth,\n\tstringSustain,\n\tunison,\n\toperatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3,\n\toperatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3,\n\tfeedbackAmplitude,\n\tpitchShift,\n\tdetune,\n\tvibratoDepth,\n\tnoteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\n\tnoteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\n\tlength,\n}\n\n/*\nexport const enum InstrumentAutomationIndex {\n\tmixVolume,\n\teqFilterAllFreqs,\n\teqFilterFreq0, eqFilterFreq1, eqFilterFreq2, eqFilterFreq3, eqFilterFreq4, eqFilterFreq5, eqFilterFreq6, eqFilterFreq7,\n\teqFilterGain0, eqFilterGain1, eqFilterGain2, eqFilterGain3, eqFilterGain4, eqFilterGain5, eqFilterGain6, eqFilterGain7,\n\tdistortion,\n\tbitcrusherQuantization,\n\tbitcrusherFrequency,\n\tpanning,\n\tchorus,\n\techoSustain,\n\t//echoDelay, // Wait until tick settings can be computed once for multiple run lengths.\n\treverb,\n\tlength,\n}\n*/\n\nexport interface BeepBoxOption {\n\treadonly index: number;\n\treadonly name: string;\n}\n\nexport interface Scale extends BeepBoxOption {\n\treadonly flags: ReadonlyArray<boolean>;\n\treadonly realName: string;\n}\n\nexport interface Key extends BeepBoxOption {\n\treadonly isWhiteKey: boolean;\n\treadonly basePitch: number;\n}\n\nexport interface Rhythm extends BeepBoxOption {\n\treadonly stepsPerBeat: number;\n\treadonly ticksPerArpeggio: number;\n\treadonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>>;\n\treadonly roundUpThresholds: number[] | null;\n}\n\nexport interface ChipWave extends BeepBoxOption {\n\treadonly expression: number;\n\treadonly samples: Float64Array;\n}\n\nexport interface ChipNoise extends BeepBoxOption {\n\treadonly expression: number;\n\treadonly basePitch: number;\n\treadonly pitchFilterMult: number;\n\treadonly isSoft: boolean;\n\tsamples: Float32Array | null;\n}\n\nexport interface Transition extends BeepBoxOption {\n\treadonly isSeamless: boolean;\n\treadonly continues: boolean;\n\treadonly slides: boolean;\n\treadonly slideTicks: number;\n\treadonly includeAdjacentPatterns: boolean;\n}\n\nexport interface Vibrato extends BeepBoxOption {\n\treadonly amplitude: number;\n\treadonly periodsSeconds: ReadonlyArray<number>;\n\treadonly delayTicks: number;\n}\n\nexport interface Unison extends BeepBoxOption {\n\treadonly voices: number;\n\treadonly spread: number;\n\treadonly offset: number;\n\treadonly expression: number;\n\treadonly sign: number;\n}\n\nexport interface Chord extends BeepBoxOption {\n\treadonly customInterval: boolean;\n\treadonly arpeggiates: boolean;\n\treadonly strumParts: number;\n\treadonly singleTone: boolean;\n}\n\nexport interface Algorithm extends BeepBoxOption {\n\treadonly carrierCount: number;\n\treadonly associatedCarrier: ReadonlyArray<number>;\n\treadonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface OperatorFrequency extends BeepBoxOption {\n\treadonly mult: number;\n\treadonly hzOffset: number;\n\treadonly amplitudeSign: number;\n}\n\nexport interface Feedback extends BeepBoxOption {\n\treadonly indices: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface Envelope extends BeepBoxOption {\n\treadonly type: EnvelopeType;\n\treadonly speed: number;\n}\n\nexport interface AutomationTarget extends BeepBoxOption {\n\treadonly computeIndex: NoteAutomationIndex /*| InstrumentAutomationIndex*/ | null;\n\treadonly displayName: string;\n\t//readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\n\treadonly interleave: boolean; // Whether to interleave this target with the next one in the menu.\n\treadonly isFilter: boolean; // Filters have a variable maxCount in practice.\n\t//readonly range: number | null; // set if automation is allowed.\n\treadonly maxCount: number;\n\treadonly effect: EffectType | null;\n\treadonly compatibleInstruments: InstrumentType[] | null;\n}\n\nexport class Config {\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\n\t\t{name: \"easy :)\",         realName: \"pentatonic major\",      flags: [true, false,  true, false,  true, false, false,  true, false,  true, false, false]},\n\t\t{name: \"easy :(\",         realName: \"pentatonic minor\",      flags: [true, false, false,  true, false,  true, false,  true, false, false,  true, false]},\n\t\t{name: \"island :)\",       realName: \"ryukyu\",                flags: [true, false, false, false,  true,  true, false,  true, false, false, false,  true]},\n\t\t{name: \"island :(\",       realName: \"pelog selisir\",         flags: [true,  true, false,  true, false, false, false,  true,  true, false, false, false]},\n\t\t{name: \"blues :)\",        realName: \"blues major\",           flags: [true, false,  true,  true,  true, false, false,  true, false,  true, false, false]},\n\t\t{name: \"blues :(\",        realName: \"blues\",                 flags: [true, false, false,  true, false,  true,  true,  true, false, false,  true, false]},\n\t\t{name: \"normal :)\",       realName: \"ionian\",                flags: [true, false,  true, false,  true,  true, false,  true, false,  true, false,  true]},\n\t\t{name: \"normal :(\",       realName: \"aeolian\",               flags: [true, false,  true,  true, false,  true, false,  true,  true, false,  true, false]},\n\t\t{name: \"dbl harmonic :)\", realName: \"double harmonic major\", flags: [true,  true, false, false,  true,  true, false,  true,  true, false, false,  true]},\n\t\t{name: \"dbl harmonic :(\", realName: \"double harmonic minor\", flags: [true, false,  true,  true, false, false,  true,  true,  true, false, false,  true]},\n\t\t{name: \"strange\",         realName: \"whole tone\",            flags: [true, false,  true, false,  true, false,  true, false,  true, false,  true, false]},\n\t\t{name: \"expert\",          realName: \"chromatic\",             flags: [true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true]},\n\t]);\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\n\t\t{name: \"C\",  isWhiteKey:  true, basePitch: 12}, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\n\t\t{name: \"C♯\", isWhiteKey: false, basePitch: 13},\n\t\t{name: \"D\",  isWhiteKey:  true, basePitch: 14},\n\t\t{name: \"D♯\", isWhiteKey: false, basePitch: 15},\n\t\t{name: \"E\",  isWhiteKey:  true, basePitch: 16},\n\t\t{name: \"F\",  isWhiteKey:  true, basePitch: 17},\n\t\t{name: \"F♯\", isWhiteKey: false, basePitch: 18},\n\t\t{name: \"G\",  isWhiteKey:  true, basePitch: 19},\n\t\t{name: \"G♯\", isWhiteKey: false, basePitch: 20},\n\t\t{name: \"A\",  isWhiteKey:  true, basePitch: 21},\n\t\t{name: \"A♯\", isWhiteKey: false, basePitch: 22},\n\t\t{name: \"B\",  isWhiteKey:  true, basePitch: 23},\n\t]);\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\n\tpublic static readonly tempoMin: number = 30;\n\tpublic static readonly tempoMax: number = 300;\n\tpublic static readonly echoDelayRange: number = 24;\n\tpublic static readonly echoDelayStepTicks: number = 4;\n\tpublic static readonly echoSustainRange: number = 8;\n\tpublic static readonly echoShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\n\tpublic static readonly echoShelfGain: number = Math.pow(2.0, -0.5);\n\tpublic static readonly reverbShelfHz: number = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\n\tpublic static readonly reverbShelfGain: number = Math.pow(2.0, -1.5);\n\tpublic static readonly reverbRange: number = 4;\n\tpublic static readonly reverbDelayBufferSize: number = 16384; // TODO: Compute a buffer size based on sample rate.\n\tpublic static readonly reverbDelayBufferMask: number = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\n\tpublic static readonly beatsPerBarMin: number = 3;\n\tpublic static readonly beatsPerBarMax: number = 16;\n\tpublic static readonly barCountMin: number = 1;\n\tpublic static readonly barCountMax: number = 128;\n\tpublic static readonly instrumentCountMin: number = 1;\n\tpublic static readonly layeredInstrumentCountMax: number = 4;\n\tpublic static readonly patternInstrumentCountMax: number = 10;\n\tpublic static readonly partsPerBeat: number = 24;\n\tpublic static readonly ticksPerPart: number = 2;\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\n\t\t{name: \"÷3 (triplets)\", stepsPerBeat: 3, ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]], roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/]},\n\t\t{name: \"÷4 (standard)\", stepsPerBeat: 4, ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]], roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/]},\n\t\t{name: \"÷6\",            stepsPerBeat: 6, ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1],       [0, 1, 2, 1]], roundUpThresholds: null},\n\t\t{name: \"÷8\",            stepsPerBeat: 8, ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1],       [0, 1, 2, 1]], roundUpThresholds: null},\n\t\t{name: \"freehand\",      stepsPerBeat:24, ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1],       [0, 1, 2, 1]], roundUpThresholds: null},\n\t]);\n\t\n\tpublic static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\"]; // See InstrumentType enum above.\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false];\n\tpublic static readonly chipBaseExpression:      number = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape.\n\tpublic static readonly fmBaseExpression:        number = 0.03;\n\tpublic static readonly noiseBaseExpression:     number = 0.19;\n\tpublic static readonly spectrumBaseExpression:  number = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\n\tpublic static readonly drumsetBaseExpression:   number = 0.45; // Drums tend to be loud but brief!\n\tpublic static readonly harmonicsBaseExpression: number = 0.025;\n\tpublic static readonly pwmBaseExpression:       number = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/π times the measured square wave amplitude.\n\tpublic static readonly pickedStringBaseExpression: number = 0.025; // Same as harmonics.\n\tpublic static readonly distortionBaseVolume:    number = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\n\tpublic static readonly bitcrusherBaseVolume:    number = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\n\t\n\tpublic static readonly chipWaves: DictionaryArray<ChipWave> = toNameMap([\n\t\t{name: \"rounded\",      expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2])},\n\t\t{name: \"triangle\",     expression: 1.0,  samples: centerWave([1.0/15.0, 3.0/15.0, 5.0/15.0, 7.0/15.0, 9.0/15.0, 11.0/15.0, 13.0/15.0, 15.0/15.0, 15.0/15.0, 13.0/15.0, 11.0/15.0, 9.0/15.0, 7.0/15.0, 5.0/15.0, 3.0/15.0, 1.0/15.0, -1.0/15.0, -3.0/15.0, -5.0/15.0, -7.0/15.0, -9.0/15.0, -11.0/15.0, -13.0/15.0, -15.0/15.0, -15.0/15.0, -13.0/15.0, -11.0/15.0, -9.0/15.0, -7.0/15.0, -5.0/15.0, -3.0/15.0, -1.0/15.0])},\n\t\t{name: \"square\",       expression: 0.5,  samples: centerWave([1.0, -1.0])},\n\t\t{name: \"1/4 pulse\",    expression: 0.5,  samples: centerWave([1.0, -1.0, -1.0, -1.0])},\n\t\t{name: \"1/8 pulse\",    expression: 0.5,  samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0])},\n\t\t{name: \"sawtooth\",     expression: 0.65, samples: centerWave([1.0/31.0, 3.0/31.0, 5.0/31.0, 7.0/31.0, 9.0/31.0, 11.0/31.0, 13.0/31.0, 15.0/31.0, 17.0/31.0, 19.0/31.0, 21.0/31.0, 23.0/31.0, 25.0/31.0, 27.0/31.0, 29.0/31.0, 31.0/31.0, -31.0/31.0, -29.0/31.0, -27.0/31.0, -25.0/31.0, -23.0/31.0, -21.0/31.0, -19.0/31.0, -17.0/31.0, -15.0/31.0, -13.0/31.0, -11.0/31.0, -9.0/31.0, -7.0/31.0, -5.0/31.0, -3.0/31.0, -1.0/31.0])},\n\t\t{name: \"double saw\",   expression: 0.5,  samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2])},\n\t\t{name: \"double pulse\", expression: 0.4,  samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0])},\n\t\t{name: \"spiky\",        expression: 0.4,  samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0])},\n\t]);\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\n\t\t{name: \"retro\",   expression: 0.25, basePitch: 69,  pitchFilterMult: 1024.0, isSoft: false, samples: null},\n\t\t{name: \"white\",   expression: 1.0,  basePitch: 69,  pitchFilterMult:    8.0, isSoft: true,  samples: null},\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\n\t\t{name: \"clang\",   expression: 0.4,  basePitch: 69,  pitchFilterMult: 1024.0, isSoft: false, samples: null},\n\t\t{name: \"buzz\",    expression: 0.3,  basePitch: 69,  pitchFilterMult: 1024.0, isSoft: false, samples: null},\n\t\t{name: \"hollow\",  expression: 1.5,  basePitch: 96,  pitchFilterMult:    1.0, isSoft: true,  samples: null},\n\t]);\n\t\n\tpublic static readonly filterFreqStep: number = 1.0/4.0;\n\tpublic static readonly filterFreqRange: number = 34;\n\tpublic static readonly filterFreqReferenceSetting: number = 28;\n\tpublic static readonly filterFreqReferenceHz: number = 8000.0;\n\tpublic static readonly filterFreqMaxHz: number = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\n\tpublic static readonly filterFreqMinHz: number = 8.0;\n\tpublic static readonly filterGainRange: number = 15;\n\tpublic static readonly filterGainCenter: number = 7;\n\tpublic static readonly filterGainStep: number = 1.0/2.0;\n\tpublic static readonly filterMaxPoints: number = 8;\n\tpublic static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\n\t\n\tpublic static readonly fadeInRange: number = 10;\n\tpublic static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\n\tpublic static readonly fadeOutNeutral: number = 4;\n\tpublic static readonly drumsetFadeOutTicks: number = 48;\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\n\t\t{name: \"normal\",        isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false},\n\t\t{name: \"interrupt\",     isSeamless: true,  continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true},\n\t\t{name: \"continue\",      isSeamless: true,  continues: true,  slides: false, slideTicks: 3, includeAdjacentPatterns: true},\n\t\t{name: \"slide\",         isSeamless: true,  continues: false, slides: true,  slideTicks: 3, includeAdjacentPatterns: true},\n\t\t{name: \"slide in pattern\", isSeamless: true,  continues: false, slides: true,  slideTicks: 3, includeAdjacentPatterns: false},\n\t]);\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\n\t\t{name: \"none\",    amplitude: 0.0,  periodsSeconds: [0.14], delayTicks: 0},\n\t\t{name: \"light\",   amplitude: 0.15, periodsSeconds: [0.14], delayTicks: 0},\n\t\t{name: \"delayed\", amplitude: 0.3,  periodsSeconds: [0.14], delayTicks: 37}, // It will fade in over the previous two ticks.\n\t\t{name: \"heavy\",   amplitude: 0.45, periodsSeconds: [0.14], delayTicks: 0},\n\t\t{name: \"shaky\",   amplitude: 0.1,  periodsSeconds: [0.11, 1.618*0.11, 3*0.11], delayTicks: 0},\n\t]);\n\tpublic static readonly unisons: DictionaryArray<Unison> = toNameMap([\n\t\t{name: \"none\",       voices: 1, spread: 0.0,  offset: 0.0, expression: 1.4, sign: 1.0},\n\t\t{name: \"shimmer\",    voices: 2, spread: 0.018,offset: 0.0, expression: 0.8, sign: 1.0},\n\t\t{name: \"hum\",        voices: 2, spread: 0.045,offset: 0.0, expression: 1.0, sign: 1.0},\n\t\t{name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0},\n\t\t{name: \"dissonant\",  voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0},\n\t\t{name: \"fifth\",      voices: 2, spread: 3.5,  offset: 3.5, expression: 0.9, sign: 1.0},\n\t\t{name: \"octave\",     voices: 2, spread: 6.0,  offset: 6.0, expression: 0.8, sign: 1.0},\n\t\t{name: \"bowed\",      voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign:-1.0},\n\t\t{name: \"piano\",      voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7},\n\t]);\n\tpublic static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\"];\n\tpublic static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.transition, EffectType.chord, EffectType.pitchShift, EffectType.detune, EffectType.vibrato, EffectType.noteFilter, EffectType.distortion, EffectType.bitcrusher, EffectType.panning, EffectType.chorus, EffectType.echo, EffectType.reverb];\n\tpublic static readonly noteSizeMax: number = 3;\n\tpublic static readonly volumeRange: number = 8;\n\tpublic static readonly volumeLogScale: number = -0.5;\n\tpublic static readonly panCenter: number = 4;\n\tpublic static readonly panMax: number = Config.panCenter * 2;\n\tpublic static readonly panDelaySecondsMax: number = 0.0005;\n\tpublic static readonly chorusRange: number = 4;\n\tpublic static readonly chorusPeriodSeconds: number = 2.0;\n\tpublic static readonly chorusDelayRange: number = 0.0034;\n\tpublic static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\n\tpublic static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\n\tpublic static readonly chorusMaxDelay: number = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x,y)=>Math.max(x,y)));\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\n\t\t{name: \"simultaneous\",    customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false},\n\t\t{name: \"strum\",           customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false},\n\t\t{name: \"arpeggio\",        customInterval: false, arpeggiates:  true, strumParts: 0, singleTone:  true},\n\t\t{name: \"custom interval\", customInterval:  true, arpeggiates: false, strumParts: 0, singleTone:  true},\n\t]);\n\tpublic static readonly maxChordSize: number = 4;\n\tpublic static readonly operatorCount: number = 4;\n\tpublic static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\n\t\t{name: \"1←(2 3 4)\",   carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [],     [],  []]},\n\t\t{name: \"1←(2 3←4)\",   carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3],    [],     [4], []]},\n\t\t{name: \"1←2←(3 4)\",   carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2],       [3, 4], [],  []]},\n\t\t{name: \"1←(2 3)←4\",   carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3],    [4],    [4], []]},\n\t\t{name: \"1←2←3←4\",     carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2],       [3],    [4], []]},\n\t\t{name: \"1←3 2←4\",     carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3],       [4],    [],  []]},\n\t\t{name: \"1 2←(3 4)\",   carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[],        [3, 4], [],  []]},\n\t\t{name: \"1 2←3←4\",     carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[],        [3],    [4], []]},\n\t\t{name: \"(1 2)←3←4\",   carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3],       [3],    [4], []]},\n\t\t{name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4],    [3, 4], [],  []]},\n\t\t{name: \"1 2 3←4\",     carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[],        [],     [4], []]},\n\t\t{name: \"(1 2 3)←4\",   carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4],       [4],    [4], []]},\n\t\t{name: \"1 2 3 4\",     carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[],        [],     [],  []]},\n\t]);\n\tpublic static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\n\tpublic static readonly operatorAmplitudeMax: number = 15;\n\tpublic static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\n\t\t{name:  \"1×\", mult:  1.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name: \"~1×\", mult:  1.0, hzOffset: 1.5, amplitudeSign:-1.0},\n\t\t{name:  \"2×\", mult:  2.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name: \"~2×\", mult:  2.0, hzOffset:-1.3, amplitudeSign:-1.0},\n\t\t{name:  \"3×\", mult:  3.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name:  \"4×\", mult:  4.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name:  \"5×\", mult:  5.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name:  \"6×\", mult:  6.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name:  \"7×\", mult:  7.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name:  \"8×\", mult:  8.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name:  \"9×\", mult:  9.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t\t{name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0},\n\t]);\n\tpublic static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\n\t\t{name: \"none\",     type: EnvelopeType.none,     speed:  0.0},\n\t\t{name: \"note size\",type: EnvelopeType.noteSize, speed:  0.0},\n\t\t{name: \"punch\",    type: EnvelopeType.punch,    speed:  0.0},\n\t\t{name: \"flare 1\",  type: EnvelopeType.flare,    speed: 32.0},\n\t\t{name: \"flare 2\",  type: EnvelopeType.flare,    speed:  8.0},\n\t\t{name: \"flare 3\",  type: EnvelopeType.flare,    speed:  2.0},\n\t\t{name: \"twang 1\",  type: EnvelopeType.twang,    speed: 32.0},\n\t\t{name: \"twang 2\",  type: EnvelopeType.twang,    speed:  8.0},\n\t\t{name: \"twang 3\",  type: EnvelopeType.twang,    speed:  2.0},\n\t\t{name: \"swell 1\",  type: EnvelopeType.swell,    speed: 32.0},\n\t\t{name: \"swell 2\",  type: EnvelopeType.swell,    speed:  8.0},\n\t\t{name: \"swell 3\",  type: EnvelopeType.swell,    speed:  2.0},\n\t\t{name: \"tremolo1\", type: EnvelopeType.tremolo,  speed:  4.0},\n\t\t{name: \"tremolo2\", type: EnvelopeType.tremolo,  speed:  2.0},\n\t\t{name: \"tremolo3\", type: EnvelopeType.tremolo,  speed:  1.0},\n\t\t{name: \"tremolo4\", type: EnvelopeType.tremolo2, speed:  4.0},\n\t\t{name: \"tremolo5\", type: EnvelopeType.tremolo2, speed:  2.0},\n\t\t{name: \"tremolo6\", type: EnvelopeType.tremolo2, speed:  1.0},\n\t\t{name: \"decay 1\",  type: EnvelopeType.decay,    speed: 10.0},\n\t\t{name: \"decay 2\",  type: EnvelopeType.decay,    speed:  7.0},\n\t\t{name: \"decay 3\",  type: EnvelopeType.decay,    speed:  4.0},\n\t]);\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\n\t\t{name: \"1⟲\",          indices: [[1],  [],  [],  []]},\n\t\t{name: \"2⟲\",          indices: [ [], [2],  [],  []]},\n\t\t{name: \"3⟲\",          indices: [ [],  [], [3],  []]},\n\t\t{name: \"4⟲\",          indices: [ [],  [],  [], [4]]},\n\t\t{name: \"1⟲ 2⟲\",       indices: [[1], [2],  [],  []]},\n\t\t{name: \"3⟲ 4⟲\",       indices: [ [],  [], [3], [4]]},\n\t\t{name: \"1⟲ 2⟲ 3⟲\",    indices: [[1], [2], [3],  []]},\n\t\t{name: \"2⟲ 3⟲ 4⟲\",    indices: [ [], [2], [3], [4]]},\n\t\t{name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]]},\n\t\t{name: \"1→2\",         indices: [ [], [1],  [],  []]},\n\t\t{name: \"1→3\",         indices: [ [],  [], [1],  []]},\n\t\t{name: \"1→4\",         indices: [ [],  [],  [], [1]]},\n\t\t{name: \"2→3\",         indices: [ [],  [], [2],  []]},\n\t\t{name: \"2→4\",         indices: [ [],  [],  [], [2]]},\n\t\t{name: \"3→4\",         indices: [ [],  [],  [], [3]]},\n\t\t{name: \"1→3 2→4\",     indices: [ [],  [], [1], [2]]},\n\t\t{name: \"1→4 2→3\",     indices: [ [],  [], [2], [1]]},\n\t\t{name: \"1→2→3→4\",     indices: [ [], [1], [2], [3]]},\n\t]);\n\tpublic static readonly chipNoiseLength: number = 1 << 15; // 32768\n\tpublic static readonly spectrumNoiseLength: number = 1 << 15; // 32768\n\tpublic static readonly spectrumBasePitch: number = 24;\n\tpublic static readonly spectrumControlPoints: number = 30;\n\tpublic static readonly spectrumControlPointsPerOctave: number = 7;\n\tpublic static readonly spectrumControlPointBits: number = 3;\n\tpublic static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\n\tpublic static readonly harmonicsControlPoints: number = 28;\n\tpublic static readonly harmonicsRendered: number = 64;\n\tpublic static readonly harmonicsRenderedForPickedString: number = 1 << 8; // 256\n\tpublic static readonly harmonicsControlPointBits: number = 3;\n\tpublic static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\n\tpublic static readonly harmonicsWavelength: number = 1 << 11; // 2048\n\tpublic static readonly pulseWidthRange: number = 8;\n\tpublic static readonly pulseWidthStepPower: number = 0.5;\n\tpublic static readonly pitchChannelCountMin: number = 1;\n\tpublic static readonly pitchChannelCountMax: number = 10;\n\tpublic static readonly noiseChannelCountMin: number = 0;\n\tpublic static readonly noiseChannelCountMax: number = 5;\n\tpublic static readonly noiseInterval: number = 6;\n\tpublic static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\n\tpublic static readonly drumCount: number = 12;\n\tpublic static readonly pitchOctaves: number = 7;\n\tpublic static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\n\tpublic static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\n\tpublic static readonly justIntonationSemitones: number[] = [1.0/2.0, 8.0/15.0, 9.0/16.0, 3.0/5.0, 5.0/8.0, 2.0/3.0, 32.0/45.0, 3.0/4.0, 4.0/5.0, 5.0/6.0, 8.0/9.0, 15.0/16.0, 1.0, 16.0/15.0, 9.0/8.0, 6.0/5.0, 5.0/4.0, 4.0/3.0, 45.0/32.0, 3.0/2.0, 8.0/5.0, 5.0/3.0, 16.0/9.0, 15.0/8.0, 2.0].map(x=>Math.log2(x) * Config.pitchesPerOctave);\n\tpublic static readonly pitchShiftRange: number = Config.justIntonationSemitones.length;\n\tpublic static readonly pitchShiftCenter: number = Config.pitchShiftRange >> 1;\n\tpublic static readonly detuneCenter: number = 9;\n\tpublic static readonly detuneMax: number = Config.detuneCenter * 2;\n\tpublic static readonly sineWaveLength: number = 1 << 8; // 256\n\tpublic static readonly sineWaveMask: number = Config.sineWaveLength - 1;\n\tpublic static readonly sineWave: Float64Array = generateSineWave();\n\t\n\t// Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\n\tpublic static readonly pickedStringDispersionCenterFreq: number = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\n\tpublic static readonly pickedStringDispersionFreqScale: number = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\n\tpublic static readonly pickedStringDispersionFreqMult: number = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\n\tpublic static readonly pickedStringShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\n\t\n\tpublic static readonly distortionRange: number = 8;\n\tpublic static readonly stringSustainRange: number = 15;\n\tpublic static readonly stringDecayRate: number = 0.12;\n\tpublic static readonly bitcrusherFreqRange: number = 14;\n\tpublic static readonly bitcrusherOctaveStep: number = 0.5;\n\tpublic static readonly bitcrusherQuantizationRange: number = 8;\n\t\n\tpublic static readonly maxEnvelopeCount: number = 12;\n\tpublic static readonly defaultAutomationRange: number = 13;\n\tpublic static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\n\t\t{name: \"none\",                   computeIndex:                           null,                   displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1,    effect: null,                    compatibleInstruments: null},\n\t\t{name: \"noteVolume\",             computeIndex:       NoteAutomationIndex.noteVolume,             displayName: \"note volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1,    effect: null,                    compatibleInstruments: null},\n\t\t{name: \"pulseWidth\",             computeIndex:       NoteAutomationIndex.pulseWidth,             displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.pwm]},\n\t\t{name: \"stringSustain\",          computeIndex:       NoteAutomationIndex.stringSustain,          displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.pickedString]},\n\t\t{name: \"unison\",                 computeIndex:       NoteAutomationIndex.unison,                 displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString]},\n\t\t{name: \"operatorFrequency\",      computeIndex:       NoteAutomationIndex.operatorFrequency0,     displayName: \"fm# freq\",         /*perNote:  true,*/ interleave:  true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount, effect: null,    compatibleInstruments: [InstrumentType.fm]},\n\t\t{name: \"operatorAmplitude\",      computeIndex:       NoteAutomationIndex.operatorAmplitude0,     displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount, effect: null,    compatibleInstruments: [InstrumentType.fm]},\n\t\t{name: \"feedbackAmplitude\",      computeIndex:       NoteAutomationIndex.feedbackAmplitude,      displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.fm]},\n\t\t{name: \"pitchShift\",             computeIndex:       NoteAutomationIndex.pitchShift,             displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1,    effect: EffectType.pitchShift,   compatibleInstruments: null},\n\t\t{name: \"detune\",                 computeIndex:       NoteAutomationIndex.detune,                 displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1,    effect: EffectType.detune,       compatibleInstruments: null},\n\t\t{name: \"vibratoDepth\",           computeIndex:       NoteAutomationIndex.vibratoDepth,           displayName: \"vibrato range\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1,    effect: EffectType.vibrato,      compatibleInstruments: null},\n\t\t{name: \"noteFilterAllFreqs\",     computeIndex:       NoteAutomationIndex.noteFilterAllFreqs,     displayName: \"n. filter freqs\",  /*perNote:  true,*/ interleave: false, isFilter:  true, /*range: null,                           */    maxCount: 1,    effect: EffectType.noteFilter,   compatibleInstruments: null},\n\t\t{name: \"noteFilterFreq\",         computeIndex:       NoteAutomationIndex.noteFilterFreq0,        displayName: \"n. filter # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter:  true, /*range: Config.filterFreqRange,     */        maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\n\t\t// Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for now...\n\t\t//{name: \"noteFilterGain\",         computeIndex:       NoteAutomationIndex.noteFilterGain0,        displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\n\t\t/*\n\t\t{name: \"distortion\",             computeIndex: InstrumentAutomationIndex.distortion,             displayName: \"distortion\",       perNote: false, interleave: false, isFilter: false, range: Config.distortionRange,             maxCount: 1,    effect: EffectType.distortion,   compatibleInstruments: null},\n\t\t{name: \"bitcrusherQuantization\", computeIndex: InstrumentAutomationIndex.bitcrusherQuantization, displayName: \"bit crush\",        perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherQuantizationRange, maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\n\t\t{name: \"bitcrusherFrequency\",    computeIndex: InstrumentAutomationIndex.bitcrusherFrequency,    displayName: \"freq crush\",       perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherFreqRange,         maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\n\t\t{name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\n\t\t{name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n\t\t{name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n\t\t{name: \"panning\",                computeIndex: InstrumentAutomationIndex.panning,                displayName: \"panning\",          perNote: false, interleave: false, isFilter: false, range: Config.panMax + 1,                  maxCount: 1,    effect: EffectType.panning,      compatibleInstruments: null},\n\t\t{name: \"chorus\",                 computeIndex: InstrumentAutomationIndex.chorus,                 displayName: \"chorus\",           perNote: false, interleave: false, isFilter: false, range: Config.chorusRange,                 maxCount: 1,    effect: EffectType.chorus,       compatibleInstruments: null},\n\t\t{name: \"echoSustain\",            computeIndex: InstrumentAutomationIndex.echoSustain,            displayName: \"echo\",             perNote: false, interleave: false, isFilter: false, range: Config.echoSustainRange,            maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null},\n\t\t{name: \"echoDelay\",              computeIndex: InstrumentAutomationIndex.echoDelay,              displayName: \"echo delay\",       perNote: false, interleave: false, isFilter: false, range: Config.echoDelayRange,              maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null}, // wait until after we're computing a tick's settings for multiple run lengths.\n\t\t{name: \"reverb\",                 computeIndex: InstrumentAutomationIndex.reverb,                 displayName: \"reverb\",           perNote: false, interleave: false, isFilter: false, range: Config.reverbRange,                 maxCount: 1,    effect: EffectType.reverb,       compatibleInstruments: null},\n\t\t{name: \"mixVolume\",              computeIndex: InstrumentAutomationIndex.mixVolume,              displayName: \"mix volume\",       perNote: false, interleave: false, isFilter: false, range: Config.volumeRange,                 maxCount: 1,    effect: null,                    compatibleInstruments: null},\n\t\t{name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\n\t\t*/\n\t]);\n}\n\nfunction centerWave(wave: Array<number>): Float64Array {\n\tlet sum: number = 0.0;\n\tfor (let i: number = 0; i < wave.length; i++) sum += wave[i];\n\tconst average: number = sum / wave.length;\n\tfor (let i: number = 0; i < wave.length; i++) wave[i] -= average;\n\tperformIntegral(wave);\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n\twave.push(0);\n\treturn new Float64Array(wave);\n}\n\nexport function performIntegral(wave: {length: number, [index: number]: number}): void {\n\t// Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\n\tlet cumulative: number = 0.0;\n\tfor (let i: number = 0; i < wave.length; i++) {\n\t\tconst temp = wave[i];\n\t\twave[i] = cumulative;\n\t\tcumulative += temp;\n\t}\n}\n\nexport function getPulseWidthRatio(pulseWidth: number): number {\n\treturn Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\n}\n\n// The function arguments will be defined in FFT.ts, but I want\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\n\tlet wave: Float32Array | null = Config.chipNoises[index].samples;\n\tif (wave == null) {\n\t\twave = new Float32Array(Config.chipNoiseLength + 1);\n\t\tConfig.chipNoises[index].samples = wave;\n\t\t\n\t\tif (index == 0) {\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 1 << 14;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 1) {\n\t\t\t// White noise is just random values for each sample.\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\n\t\t\t}\n\t\t} else if (index == 2) {\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 2 << 14;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 3) {\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 10 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 4) {\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n\t\t} else {\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\n\t\t}\n\t\t\n\t\twave[Config.chipNoiseLength] = wave[0];\n\t}\n\t\n\treturn wave;\n}\n\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\n\tconst referenceOctave: number = 11;\n\tconst referenceIndex: number = 1 << referenceOctave;\n\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\n\tconst highIndex: number = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n\tconst retroWave: Float32Array = getDrumWave(0, null, null);\n\tlet combinedAmplitude: number = 0.0;\n\tfor (let i: number = lowIndex; i < highIndex; i++) {\n\t\t\n\t\tlet lerped: number = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n\t\tlet amplitude: number = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n\t\t\n\t\tamplitude *= Math.pow(i / referenceIndex, overallSlope);\n\t\t\n\t\tcombinedAmplitude += amplitude;\n\t\t\n\t\t// Add two different sources of psuedo-randomness to the noise\n\t\t// (individually they aren't random enough) but in a deterministic\n\t\t// way so that live spectrum editing doesn't result in audible pops.\n\t\t// Multiply all the sine wave amplitudes by 1 or -1 based on the\n\t\t// LFSR retro wave (effectively random), and also rotate the phase\n\t\t// of each sine wave based on the golden angle to disrupt the symmetry.\n\t\tamplitude *= retroWave[i];\n\t\tconst radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\n\t\t\n\t\twave[i] = Math.cos(radians) * amplitude;\n\t\twave[waveLength - i] = Math.sin(radians) * amplitude;\n\t}\n\t\n\treturn combinedAmplitude;\n}\n\nfunction generateSineWave(): Float64Array {\n\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\n\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\n\t}\n\treturn wave;\n}\n\nexport function getArpeggioPitchIndex(pitchCount: number, rhythm: number, arpeggio: number): number {\n\tconst arpeggioPattern: ReadonlyArray<number> = Config.rhythms[rhythm].arpeggioPatterns[pitchCount - 1];\n\tif (arpeggioPattern != null) {\n\t\treturn arpeggioPattern[arpeggio % arpeggioPattern.length];\n\t} else {\n\t\treturn arpeggio % pitchCount;\n\t}\n}\n\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\n\tconst dictionary: Dictionary<T> = {};\n\tfor (let i: number = 0; i < array.length; i++) {\n\t\tconst value: any = array[i];\n\t\tvalue.index = i;\n\t\tdictionary[value.name] = <T> value;\n\t}\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>> <any> array;\n\tresult.dictionary = dictionary;\n\treturn result;\n}\n\nexport function effectsIncludeTransition(effects: number): boolean {\n\treturn (effects & (1 << EffectType.transition)) != 0;\n}\nexport function effectsIncludeChord(effects: number): boolean {\n\treturn (effects & (1 << EffectType.chord)) != 0;\n}\nexport function effectsIncludePitchShift(effects: number): boolean {\n\treturn (effects & (1 << EffectType.pitchShift)) != 0;\n}\nexport function effectsIncludeDetune(effects: number): boolean {\n\treturn (effects & (1 << EffectType.detune)) != 0;\n}\nexport function effectsIncludeVibrato(effects: number): boolean {\n\treturn (effects & (1 << EffectType.vibrato)) != 0;\n}\nexport function effectsIncludeNoteFilter(effects: number): boolean {\n\treturn (effects & (1 << EffectType.noteFilter)) != 0;\n}\nexport function effectsIncludeDistortion(effects: number): boolean {\n\treturn (effects & (1 << EffectType.distortion)) != 0;\n}\nexport function effectsIncludeBitcrusher(effects: number): boolean {\n\treturn (effects & (1 << EffectType.bitcrusher)) != 0;\n}\nexport function effectsIncludePanning(effects: number): boolean {\n\treturn (effects & (1 << EffectType.panning)) != 0;\n}\nexport function effectsIncludeChorus(effects: number): boolean {\n\treturn (effects & (1 << EffectType.chorus)) != 0;\n}\nexport function effectsIncludeEcho(effects: number): boolean {\n\treturn (effects & (1 << EffectType.echo)) != 0;\n}\nexport function effectsIncludeReverb(effects: number): boolean {\n\treturn (effects & (1 << EffectType.reverb)) != 0;\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport const HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport const SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n}\nfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\tif (/-/.test(name)) {\n\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t}\n}\n","// Copyright (C) 2021 John Nesky, distributed under the MIT license.\n\nimport {BeepBoxOption, DictionaryArray, toNameMap} from \"../synth/SynthConfig\";\nimport {Song} from \"../synth/synth\";\nimport {HTML} from \"imperative-html/dist/esm/elements-strict\";\n\nexport interface ChannelColors extends BeepBoxOption {\n\treadonly secondaryChannel: string;\n\treadonly primaryChannel:   string;\n\treadonly secondaryNote: string;\n\treadonly primaryNote: string;\n}\n\nexport class ColorConfig {\n\tpublic static readonly themes: {[name: string]: string} = {\n\t\t\"dark classic\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n\t\t\t}\n\t\t`,\n\t\t\"light classic\": `\n\t\t\t:root {\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t--page-margin: #685d88;\n\t\t\t\t--editor-background: white;\n\t\t\t\t--hover-preview: black;\n\t\t\t\t--playhead: rgba(0,0,0,0.5);\n\t\t\t\t--primary-text: black;\n\t\t\t\t--secondary-text: #777;\n\t\t\t\t--inverted-text: white;\n\t\t\t\t--text-selection: rgba(200,170,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\n\t\t\t\t--loop-accent: #98f;\n\t\t\t\t--link-accent: #74f;\n\t\t\t\t--ui-widget-background: #ececec;\n\t\t\t\t--ui-widget-focus: #eee;\n\t\t\t\t--pitch-background: #ececec;\n\t\t\t\t--tonic: #f0d6b6;\n\t\t\t\t--fifth-note: #bbddf0;\n\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t--black-piano-key: #666;\n\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\n\t\t\t\t--pitch1-primary-channel:   #00A0BD;\n\t\t\t\t--pitch1-secondary-note:    #34C2DC;\n\t\t\t\t--pitch1-primary-note:      #00758A;\n\t\t\t\t--pitch2-secondary-channel: #E3C941;\n\t\t\t\t--pitch2-primary-channel:   #B49700;\n\t\t\t\t--pitch2-secondary-note:    #D1B628;\n\t\t\t\t--pitch2-primary-note:      #836E00;\n\t\t\t\t--pitch3-secondary-channel: #FF9D61;\n\t\t\t\t--pitch3-primary-channel:   #E14E00;\n\t\t\t\t--pitch3-secondary-note:    #F67D3C;\n\t\t\t\t--pitch3-primary-note:      #B64000;\n\t\t\t\t--pitch4-secondary-channel: #4BE24B;\n\t\t\t\t--pitch4-primary-channel:   #00A800;\n\t\t\t\t--pitch4-secondary-note:    #2DC82D;\n\t\t\t\t--pitch4-primary-note:      #008000;\n\t\t\t\t--pitch5-secondary-channel: #FF90FF;\n\t\t\t\t--pitch5-primary-channel:   #E12EDF;\n\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\n\t\t\t\t--pitch5-primary-note:      #A600A5;\n\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\n\t\t\t\t--pitch6-primary-channel:   #6969FD;\n\t\t\t\t--pitch6-secondary-note:    #9393FE;\n\t\t\t\t--pitch6-primary-note:      #4A4AD7;\n\t\t\t\t--pitch7-secondary-channel: #C2D848;\n\t\t\t\t--pitch7-primary-channel:   #8EA800;\n\t\t\t\t--pitch7-secondary-note:    #B0C82D;\n\t\t\t\t--pitch7-primary-note:      #6C8000;\n\t\t\t\t--pitch8-secondary-channel: #FF90A4;\n\t\t\t\t--pitch8-primary-channel:   #E12E4D;\n\t\t\t\t--pitch8-secondary-note:    #EC6E85;\n\t\t\t\t--pitch8-primary-note:      #A6001D;\n\t\t\t\t--pitch9-secondary-channel: #41E3B5;\n\t\t\t\t--pitch9-primary-channel:   #00B481;\n\t\t\t\t--pitch9-secondary-note:    #28D1A1;\n\t\t\t\t--pitch9-primary-note:      #00835E;\n\t\t\t\t--pitch10-secondary-channel:#CA77FF;\n\t\t\t\t--pitch10-primary-channel:  #9609FF;\n\t\t\t\t--pitch10-secondary-note:   #B54FFF;\n\t\t\t\t--pitch10-primary-note:     #8400E3;\n\t\t\t\t--noise1-secondary-channel: #C1C1C1;\n\t\t\t\t--noise1-primary-channel:   #898989;\n\t\t\t\t--noise1-secondary-note:    #ADADAD;\n\t\t\t\t--noise1-primary-note:      #6C6C6C;\n\t\t\t\t--noise2-secondary-channel: #E8BB8C;\n\t\t\t\t--noise2-primary-channel:   #BD7D3A;\n\t\t\t\t--noise2-secondary-note:    #D1A374;\n\t\t\t\t--noise2-primary-note:      #836342;\n\t\t\t\t--noise3-secondary-channel: #9BC4EB;\n\t\t\t\t--noise3-primary-channel:   #4481BE;\n\t\t\t\t--noise3-secondary-note:    #7CA7D3;\n\t\t\t\t--noise3-primary-note:      #476685;\n\t\t\t\t--noise4-secondary-channel: #C5A5E0;\n\t\t\t\t--noise4-primary-channel:   #8553AE;\n\t\t\t\t--noise4-secondary-note:    #B290CC;\n\t\t\t\t--noise4-primary-note:      #684F7D;\n\t\t\t\t--noise5-secondary-channel: #B8CE93;\n\t\t\t\t--noise5-primary-channel:   #87A74F;\n\t\t\t\t--noise5-secondary-note:    #ABC183;\n\t\t\t\t--noise5-primary-note:      #68784C;\n\t\t\t}\n\t\t\t\n\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t}\n\t\t`,\n\t};\n\t\n\tpublic static readonly pageMargin: string = \"var(--page-margin)\";\n\tpublic static readonly editorBackground: string = \"var(--editor-background)\";\n\tpublic static readonly hoverPreview: string = \"var(--hover-preview)\";\n\tpublic static readonly playhead: string = \"var(--playhead)\";\n\tpublic static readonly primaryText: string = \"var(--primary-text)\";\n\tpublic static readonly secondaryText: string = \"var(--secondary-text)\";\n\tpublic static readonly invertedText: string = \"var(--inverted-text)\";\n\tpublic static readonly textSelection: string = \"var(--text-selection)\";\n\tpublic static readonly boxSelectionFill: string = \"var(--box-selection-fill)\";\n\tpublic static readonly loopAccent: string = \"var(--loop-accent)\";\n\tpublic static readonly linkAccent: string = \"var(--link-accent)\";\n\tpublic static readonly uiWidgetBackground: string = \"var(--ui-widget-background)\";\n\tpublic static readonly uiWidgetFocus: string = \"var(--ui-widget-focus)\";\n\tpublic static readonly pitchBackground: string = \"var(--pitch-background)\";\n\tpublic static readonly tonic: string = \"var(--tonic)\";\n\tpublic static readonly fifthNote: string = \"var(--fifth-note)\";\n\tpublic static readonly whitePianoKey: string = \"var(--white-piano-key)\";\n\tpublic static readonly blackPianoKey: string = \"var(--black-piano-key)\";\n\t\n\tpublic static readonly pitchChannels: DictionaryArray<ChannelColors> = toNameMap([\n\t\t{\n\t\t\tname: \"pitch1\", // cyan\n\t\t\tsecondaryChannel: \"var(--pitch1-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch1-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch1-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch1-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch2\", // yellow\n\t\t\tsecondaryChannel: \"var(--pitch2-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch2-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch2-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch2-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch3\", // orange\n\t\t\tsecondaryChannel: \"var(--pitch3-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch3-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch3-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch3-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch4\", // green\n\t\t\tsecondaryChannel: \"var(--pitch4-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch4-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch4-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch4-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch5\", // magenta\n\t\t\tsecondaryChannel: \"var(--pitch5-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch5-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch5-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch5-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch6\", // blue\n\t\t\tsecondaryChannel: \"var(--pitch6-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch6-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch6-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch6-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch7\", // olive\n\t\t\tsecondaryChannel: \"var(--pitch7-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch7-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch7-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch7-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch8\", // red\n\t\t\tsecondaryChannel: \"var(--pitch8-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch8-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch8-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch8-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch9\", // teal\n\t\t\tsecondaryChannel: \"var(--pitch9-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch9-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch9-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch9-primary-note)\",\n\t\t}, {\n\t\t\tname: \"pitch10\", // purple\n\t\t\tsecondaryChannel: \"var(--pitch10-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--pitch10-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--pitch10-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--pitch10-primary-note)\",\n\t\t},\n\t]);\n\tpublic static readonly noiseChannels: DictionaryArray<ChannelColors> = toNameMap([\n\t\t{\n\t\t\tname: \"noise1\", // gray\n\t\t\tsecondaryChannel: \"var(--noise1-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--noise1-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--noise1-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--noise1-primary-note)\",\n\t\t}, {\n\t\t\tname: \"noise2\", // brown\n\t\t\tsecondaryChannel: \"var(--noise2-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--noise2-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--noise2-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--noise2-primary-note)\",\n\t\t}, {\n\t\t\tname: \"noise3\", // azure\n\t\t\tsecondaryChannel: \"var(--noise3-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--noise3-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--noise3-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--noise3-primary-note)\",\n\t\t}, {\n\t\t\tname: \"noise4\", // purple\n\t\t\tsecondaryChannel: \"var(--noise4-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--noise4-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--noise4-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--noise4-primary-note)\",\n\t\t}, {\n\t\t\tname: \"noise5\", // sage\n\t\t\tsecondaryChannel: \"var(--noise5-secondary-channel)\",\n\t\t\tprimaryChannel:   \"var(--noise5-primary-channel)\",\n\t\t\tsecondaryNote:    \"var(--noise5-secondary-note)\",\n\t\t\tprimaryNote:      \"var(--noise5-primary-note)\",\n\t\t},\n\t]);\n\t\n\tpublic static getChannelColor(song: Song, channel: number): ChannelColors {\n\t\treturn channel < song.pitchChannelCount\n\t\t\t? ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length]\n\t\t\t: ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % ColorConfig.noiseChannels.length];\n\t}\n\t\n\tprivate static readonly _styleElement: HTMLStyleElement = document.head.appendChild(HTML.style({type: \"text/css\"}));\n\t\n\tpublic static setTheme(name: string): void {\n\t\tthis._styleElement.textContent = this.themes[name];\n\t\t\n\t\tconst themeColor = <HTMLMetaElement> document.querySelector(\"meta[name='theme-color']\");\n\t\tif (themeColor != null) {\n\t\t\tthemeColor.setAttribute(\"content\", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));\n\t\t}\n\t}\n}\n","// Copyright (C) 2021 John Nesky, distributed under the MIT license.\n\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\ninterface NumberArray {\n\tlength: number;\n\t[index: number]: number;\n}\n\n// A basic FFT operation scales the overall magnitude of elements by the\n// square root of the length of the array, √N. Performing a forward FFT and\n// then an inverse FFT results in the original array, but multiplied by N.\n// This helper function can be used to compensate for that. \nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\n\tfor (let i: number = 0; i < array.length; i++) {\n\t\tarray[i] *= factor;\n\t}\n}\n\nfunction isPowerOf2(n: number): boolean {\n\treturn !!n && !(n & (n - 1));\n}\n\nfunction countBits(n: number): number {\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\n\treturn Math.round(Math.log(n) / Math.log(2));\n}\n\n// Rearranges the elements of the array, swapping the element at an index\n// with an element at an index that is the bitwise reverse of the first\n// index in base 2. Useful for computing the FFT.\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\n\tconst bitCount: number = countBits(fullArrayLength);\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\n\tconst finalShift: number = 16 - bitCount;\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\n\t\tlet j: number;\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\n\t\tif (j > i) {\n\t\t\tlet temp: number = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t}\n\t}\n}\n\n// Provided for educational purposes. Easier to read than\n// fastFourierTransform(), but computes the same result.\n// Takes two parallel arrays representing the real and imaginary elements,\n// respectively, and returns an array containing two new arrays, which\n// contain the complex result of the transform.\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\n\tconst fullArrayLength: number = realArray.length;\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\tconst realOut: number[] = [];\n\tconst imagOut: number[] = [];\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\trealOut[i] = 0.0;\n\t\timagOut[i] = 0.0;\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\n\t\t\tconst c: number = Math.cos(radians);\n\t\t\tconst s: number = Math.sin(radians);\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\n\t\t}\n\t}\n\treturn [realOut, imagOut];\n}\n\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\n// input real and imaginary arrays. Can be used for both forward and inverse\n// transforms: swap the order of the arguments for the inverse.\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\n\tconst fullArrayLength: number = realArray.length;\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\t\n\treverseIndexBits(realArray, fullArrayLength);\n\treverseIndexBits(imagArray, fullArrayLength);\n\t\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\n\t\tconst startIndex1: number = startIndex + 1;\n\t\tconst startIndex2: number = startIndex + 2;\n\t\tconst startIndex3: number = startIndex + 3;\n\t\tconst real0: number = realArray[startIndex ];\n\t\tconst real1: number = realArray[startIndex1];\n\t\tconst real2: number = realArray[startIndex2];\n\t\tconst real3: number = realArray[startIndex3];\n\t\tconst imag0: number = imagArray[startIndex ];\n\t\tconst imag1: number = imagArray[startIndex1];\n\t\tconst imag2: number = imagArray[startIndex2];\n\t\tconst imag3: number = imagArray[startIndex3];\n\t\tconst realTemp0: number = real0 + real1;\n\t\tconst realTemp1: number = real0 - real1;\n\t\tconst realTemp2: number = real2 + real3;\n\t\tconst realTemp3: number = real2 - real3;\n\t\tconst imagTemp0: number = imag0 + imag1;\n\t\tconst imagTemp1: number = imag0 - imag1;\n\t\tconst imagTemp2: number = imag2 + imag3;\n\t\tconst imagTemp3: number = imag2 - imag3;\n\t\trealArray[startIndex ] = realTemp0 + realTemp2;\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\n\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\n\t}\n\t\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\n\t\tconst halfLength: number = stride >>> 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tlet c: number = 1.0;\n\t\t\tlet s: number = 0.0;\n\t\t\tlet cPrev: number = cosIncrement;\n\t\t\tlet sPrev: number = sinIncrement;\n\t\t\tconst secondHalf: number = startIndex + halfLength;\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\n\t\t\t\tconst j: number = i + halfLength;\n\t\t\t\tconst real0: number = realArray[i];\n\t\t\t\tconst imag0: number = imagArray[i];\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\n\t\t\t\trealArray[i] = real0 + real1;\n\t\t\t\timagArray[i] = imag0 + imag1;\n\t\t\t\trealArray[j] = real0 - real1;\n\t\t\t\timagArray[j] = imag0 - imag1;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the Fourier transform from an array of real-valued time-domain\n// samples. The output is specially formatted for space efficieny: elements\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\n// descending frequency. Overwrites the input array.\nexport function forwardRealFourierTransform(array: NumberArray): void {\n\tconst fullArrayLength: number = array.length;\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\t\n\treverseIndexBits(array, fullArrayLength);\n\t\n\t// First and second pass.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\t// no imaginary elements yet since the input is fully real.\n\t\tconst tempA: number = real0 + real1;\n\t\tconst tempB: number = real2 + real3;\n\t\tarray[index ] = tempA + tempB;\n\t\tarray[index1] = real0 - real1;\n\t\tarray[index2] = tempA - tempB;\n\t\tarray[index3] = real2 - real3;\n\t}\n\t\n\t// Third pass.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index7: number = index + 7;\n\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst imag3: number = array[index3];\n\t\tconst real4: number = array[index4];\n\t\tconst real5: number = array[index5];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\n\t\tarray[index ] = real0 + real4;\n\t\tarray[index1] = real1 + tempA;\n\t\tarray[index3] = real1 - tempA;\n\t\tarray[index4] = real0 - real4;\n\t\tarray[index5] = tempB - imag3;\n\t\tarray[index7] = tempB + imag3;\n\t}\n\t\n\t// Handle remaining passes.\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst realStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + realStartB;\n\t\t\tarray[startIndexB] = realStartA - realStartB;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst imag0: number = array[indexA1];\n\t\t\t\tconst real1: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\n\t\t\t\tarray[indexA0] = real0 + tempA;\n\t\t\t\tarray[indexA1] = real0 - tempA;\n\t\t\t\tarray[indexB0] =-imag0 - tempB;\n\t\t\t\tarray[indexB1] = imag0 - tempB;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the inverse Fourier transform from a specially formatted array of\n// scalar values. Elements 0 through N/2 are expected to be the real values of\n// the corresponding complex elements, representing cosine wave amplitudes in\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\n// imaginary values, representing sine wave amplitudes in descending frequency.\n// Generates real-valued time-domain samples. Overwrites the input array.\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\n\t// Perform all but the last few passes in reverse.\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\t\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst imagStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\n\t\t\tarray[midIndexA] *= 2;\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\n\t\t\tarray[midIndexB] *= 2;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst real1: number = array[indexA1];\n\t\t\t\tconst imag0: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real0 - real1;\n\t\t\t\tconst tempB: number = imag0 + imag1;\n\t\t\t\tarray[indexA0] = real0 + real1;\n\t\t\t\tarray[indexA1] = imag1 - imag0;\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t// Commented out this block (and compensated with an extra pass above)\n\t// because it's slower in my testing so far.\n\t// Pass with stride 8.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index6: number = index + 6;\n\t\tconst index7: number = index + 7;\n\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\tconst imag4: number = array[index4];\n\t\tconst imag5: number = array[index5];\n\t\tconst imag6: number = array[index6];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = real1 - real3;\n\t\tconst tempB: number = imag5 + imag7;\n\t\tarray[index ] = real0 + imag4;\n\t\tarray[index1] = real1 + real3;\n\t\tarray[index2] = real2 * 2;\n\t\tarray[index3] = imag7 - imag5;\n\t\tarray[index4] = real0 - imag4;\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\n\t\tarray[index6] = imag6 * 2;\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\n\t}\n\t*/\n\t// The final passes with strides 4 and 2, combined into one loop.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1] * 2;\n\t\tconst imag2: number = array[index2];\n\t\tconst imag3: number = array[index3] * 2;\n\t\tconst tempA: number = real0 + imag2;\n\t\tconst tempB: number = real0 - imag2;\n\t\tarray[index ] = tempA + real1;\n\t\tarray[index1] = tempA - real1;\n\t\tarray[index2] = tempB + imag3;\n\t\tarray[index3] = tempB - imag3;\n\t}\n\t\n\treverseIndexBits(array, fullArrayLength);\n}\n","// Copyright (C) 2021 John Nesky, distributed under the MIT license.\r\n\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}\r\n","/*\nThis file contains code to compute digital audio filter coefficients based on\nthe desired type, cutoff frequency, and other parameters. You can use these\ncoefficients to apply the filter to audio samples. It also contains code to\nanalyze these filters, which is useful for graphically displaying their effects.\n\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\nfilters, because older output samples contribute feedback to newer output\nsamples and thus contribute to all future samples, although typically filters\nare design to reduce the contribution of older samples over time.\n\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\nvolume of the signal at all but induce phase changes above the cutoff frequency.\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\nbut raise or lower the volume at that frequency. \n\nThe number of old samples used in the filter determines the \"order\" of the\nfilter. First-order filters generally have shallower slopes, and second-order\nfilters generally have steeper slopes and can be configured to \"resonate\",\nmeaning they have a louder peak at the cutoff frequency. This file contains\nfirst-order filters and second-order filters, meaning one or two older samples\nare involved, as well as the current input sample.\n\nThe class FilterCoefficients is defined lower in this file. You can use it to\nset up a first order filter like this:\n\n\tconst cutoffRadiansPerSample: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst filter: FilterCoefficients = new FilterCoefficients();\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\n\tconst a: number[] = filter.a;\n\t// input sample coefficients are conventionally called b0, b1, etc\n\tconst b: number[] = filter.b;\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\n\tconst x: number[] = [0, 0, 0];\n\t// filter output samples, y[0] will be computed by the filter based on input\n\t// samples and older output samples.\n\tconst y: number[] = [0, 0, 0];\n\nThen to apply the first-order filter to samples inside a loop, using the current\ninput sample (x[0]) as well as previous input and output samples, do this:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\n\t// Remember the input and output samples for next time:\n\tx[1] = x[0];\n\ty[1] = y[0];\n\n2nd order filters are similar, but have more parameters and require more old\nsamples:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\n\t// Remember the input and output samples for next time:\n\tx[2] = x[1];\n\tx[1] = x[0];\n\ty[2] = y[1];\n\ty[1] = y[0];\n\nYou can compose multiple filters into a higher order filter, although doing so\nreduces the numerical stability of the filter:\n\n\tfilter3.combination(filter1, filter2);\n\t// filter3.order will equal: filter1.order + filter2.order\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\n\nThis file also contains a class called FrequencyResponse. You can use it to\ndetermine how much gain or attenuation a filter would apply to sounds at a\nspecific input frequency, as well as the phase offset:\n\n\tconst inputRadians: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst response: FrequencyResponse = new FrequencyResponse();\n\tresponse.analyze(filter, inputRadians);\n\tconst gainResponse = response.magnitude();\n\tconst phaseResponse = response.angle();\n\nThat's basically all you need to know to use this code, but I'll also explain\nhow the analysis works.\n\nA first-order digital IIR filter is ordinarily implemented in a form like this:\n\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\n\nIf we adopt standard naming conventions for audio filters, this same code would\ninstead look like:\n\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\n\ty0 = b0*x0 + b1*x1 - a1*y1;\n\nLeaving behind the world of code for a moment and entering the world of algebra,\nwe can rewrite this equation by moving all the output terms to the left side,\nand we can add a coefficient to the y0 term called a0 (which is typically\nnormalized to 1.0, which is why I didn't bother including it until now):\n\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\n\nThis is known as the symmetrical form of the filter, and it will help us analyze\nthe impact of the filter on an input audio signal. Here's a lesson that helped\nme understand the symmetrical form:\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\n\nThe end of that lesson introduces a concept called the \"delay operator\" which\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\nwhen you multiply them. For example:\n\n\tx0 * z^-1 = x1\n\nThe lesson doesn't explain how it actually works. Audio signals aren't always\npredictable, which means that you generally can't do math on a single sample to\ncompute what the previous sample was. However, some audio signals ARE\npredictable, such as pure sine waves. Fortunately, all audio signals can be\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\ntime, and use it to analyze the filter's impact on waves at that frequency. In\npractice, this tells us what the filter will do to unpredictable input samples\nthat contain a partial sine wave at that frequency.\n\nTechnically, you can't just use a single sine wave sample to determine the\nprevious sine wave sample, because each possible value is passed going upwards\nand downwards once per period and the direction is ambigous. This is where we\nneed to move into the complex number domain, where the real and imaginary\ncomponents can provide enough information to compute the previous position on\nthe input signal. So now instead of talking about sine waves, we're talking\nabout waves where the imaginary component is a sine wave and the real component\nis a cosine wave at the same frequency. Together, they trace around a unit\ncircle in the complex domain, and each sample is just a consistent rotation\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\nthis same rotation applied in reverse, and it can be computed as:\n\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\n\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\nexplaining what that means is probably beyond the scope of this documentation\naside from noting that a complex number on the unit circle represents a 2D\nrotation that you can apply via multiplication.\n\nNow we can rewrite the symmetrical form using the delay operator and algebra:\n\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nThat last equation expresses the relationship between the input and output\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\npoint, the specific values of the input and output samples don't even matter!\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\n\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nIf you plug in actual filter coefficients and express the delay operators as\ncomplex numbers with the appropriate trigonometry functions, the transfer\nfunction can be computed and produces a complex number that represents the\nrelationship between the input and output signals, whose magnitude represents\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\nrepresents how much phase shift is applied by the filter to signals at that\nfrequency.\n\n(Note that in order to compute the transfer function, you'll need to do\nsomething about the complex number in the denominator. It turns out you can turn\nthe denominator into a real number by multiplying both the numerator and\ndenominator by the complex conjugate of the denominator, which is just the\ndenominator with the imaginary component negated.)\n\nFinally, I'll list some of the links that helped me understand filters and\nprovided some of the algorithms I that use here.\n\nHere's where I found accurate 2nd order low-pass and high-pass digital filters:\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\n\nThis page is how I found a link to the cookbook article above. It claims these\nfilters are Butterworth filters:\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\nI found the first-order digital Butterworth filter coefficients at:\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\n\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\nhttps://www.drpetter.se/project_sfxr.html\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\nnearly identical, but when closer to the nyquist frequency the simpler filters\ncreate extra resonance.\n*/\n\nexport class FilterCoefficients {\n\tpublic readonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\n\tpublic readonly b: number[] = [1.0]; // input coefficients\n\tpublic order: number = 0;\n\t\n\tpublic linearGain0thOrder(linearGain: number): void {\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\n\t\tthis.b[0] = linearGain;\n\t\tthis.order = 0;\n\t}\n\t\n\tpublic lowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth low-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\t// A butterworth filter is one where the amplitude response is equal to:\n\t\t// 1 / √(1 + (freq / cutoffFreq)^(2 * order))\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[1] = this.b[0] = 1 / a0;\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic lowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\n\t\t// then the output is the same as the input, and if the cutoff is higher\n\t\t// than that, then the output actually resonates at high frequencies\n\t\t// instead of attenuating.\n\t\t// I'm guessing this filter was converted from analog to digital using\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\n\t\t// method. The difference is that the bilinear transform warps\n\t\t// frequencies so that the lowpass response of zero at analogue ∞hz maps\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\n\t\t// preserves the frequency of the filter response but also adds the\n\t\t// reflected response from above the nyquist frequency.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 0.0;\n\t\t/*\n\t\t// Alternatively:\n\t\tconst g: number = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\n\t\tconst a0: number = g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = 1.0 / a0;\n\t\tthis.b[1] = 0.0 / a0;\n\t\t*/\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic highPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth high-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = g / a0;\n\t\tthis.b[1] = -g / a0;\n\t\tthis.order = 1;\n\t}\n\t/*\n\tpublic highPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\n\t\t// appoaches the nyquist.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\tpublic highShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\n\t\t// I had trouble figuring this one out because I couldn't find any\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\n\t\t// and I could narrow down a couple of them based on the desired gain at\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\n\t\t// Obviously I don't fully understand the bilinear transform yet!\n\t\tconst tan: number = Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst sqrtGain: number = Math.sqrt(shelfLinearGain);\n\t\tconst g: number = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n\t\tconst a0: number = 1.0;\n\t\tthis.a[1] = g / a0;\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\t/*\n\t// I haven't found a practical use for this version of the all pass filter.\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\n\tpublic allPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = -g;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\t\n\tpublic allPass1stOrderFractionalDelay(delay: number) {\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\n\t\t// differently and for a different purpose! Useful for interpolating\n\t\t// between samples in a delay line.\n\t\tconst g: number = (1.0 - delay) / (1.0 + delay);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic lowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This is Butterworth if peakLinearGain=1/√2 according to:\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\n\t\t// although it gets distorted near the nyquist.\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\n\t\tthis.b[1] = (1 - cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t\n\tpublic lowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This filter is adapted from the one in the SFXR source code:\n\t\t// https://www.drpetter.se/project_sfxr.html\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\n\t\t// above, except it resonates too much when the cutoff appoaches the\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\n\t\t// nyquist/3, then the output is the same as the input.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = g*g;\n\t\tthis.b[1] = 0;\n\t\tthis.b[2] = 0;\n\t\tthis.order = 2;\n\t}\n\t\n\tpublic highPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1.0 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\n\t\tthis.b[1] = -(1.0 + cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\tpublic highPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -2.0;\n\t\tthis.b[2] = 1.0;\n\t\tthis.order = 2;\n\t}\n\t*/\n\tpublic peak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\n\t\tconst sqrtGain: number = Math.sqrt(peakLinearGain);\n\t\tconst bandWidth: number = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\n\t\t//const bandWidth: number = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\n\t\tconst alpha: number = Math.tan(bandWidth * 0.5);\n\t\tconst a0: number = 1.0 + alpha / sqrtGain;\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\t// Create a higher order filter by combining two lower order filters.\n\t// However, making high order filters in this manner results in instability.\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\n\tpublic combination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\n\t\tthis.order = filter1.order + filter2.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = 0.0;\n\t\t\tthis.b[i] = 0.0;\n\t\t}\n\t\tfor (let i: number = 0; i <= filter1.order; i++) {\n\t\t\tfor (let j: number = 0; j <= filter2.order; j++) {\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic scaledDifference(other: FilterCoefficients, scale: number): void {\n\t\tif (other.order != this.order) throw new Error();\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\n\t\t}\n\t}\n\t\n\tpublic copy(other: FilterCoefficients): void {\n\t\tthis.order = other.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = other.a[i];\n\t\t\tthis.b[i] = other.b[i];\n\t\t}\n\t}\n\t*/\n}\n\nexport class FrequencyResponse {\n\tpublic real: number = 0.0;\n\tpublic imag: number = 0.0;\n\tpublic denom: number = 1.0;\n\t\n\tpublic analyze(filter: FilterCoefficients, radiansPerSample: number): void {\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n\t}\n\t\n\tpublic analyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\n\t\tconst a: number[] = filter.a;\n\t\tconst b: number[] = filter.b;\n\t\tconst realZ1: number = real;\n\t\tconst imagZ1: number = -imag;\n\t\tlet realNum: number = b[0] + b[1] * realZ1;\n\t\tlet imagNum: number = b[1] * imagZ1;\n\t\tlet realDenom: number = 1.0 + a[1] * realZ1;\n\t\tlet imagDenom: number = a[1] * imagZ1;\n\t\tlet realZ: number = realZ1;\n\t\tlet imagZ: number = imagZ1;\n\t\tfor (let i: number = 2; i <= filter.order; i++) {\n\t\t\tconst realTemp: number = realZ * realZ1 - imagZ * imagZ1;\n\t\t\tconst imagTemp: number = realZ * imagZ1 + imagZ * realZ1;\n\t\t\trealZ = realTemp;\n\t\t\timagZ = imagTemp;\n\t\t\trealNum += b[i] * realZ;\n\t\t\timagNum += b[i] * imagZ;\n\t\t\trealDenom += a[i] * realZ;\n\t\t\timagDenom += a[i] * imagZ;\n\t\t}\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\n\t}\n\t\n\tpublic magnitude(): number {\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n\t}\n\t\n\tpublic angle(): number {\n\t\treturn Math.atan2(this.imag, this.real);\n\t}\n}\n\nexport class DynamicBiquadFilter {\n\tpublic a1: number = 0.0;\n\tpublic a2: number = 0.0;\n\tpublic b0: number = 1.0;\n\tpublic b1: number = 0.0;\n\tpublic b2: number = 0.0;\n\tpublic a1Delta: number = 0.0;\n\tpublic a2Delta: number = 0.0;\n\tpublic b0Delta: number = 0.0;\n\tpublic b1Delta: number = 0.0;\n\tpublic b2Delta: number = 0.0;\n\tpublic output1: number = 0.0;\n\tpublic output2: number = 0.0;\n\t\n\t// Some filter types are more stable when interpolating between coefficients\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\n\t// for filter types where the \"b\" coefficients might change sign!\n\tpublic useMultiplicativeInputCoefficients: boolean = false;\n\t\n\tpublic resetOutput(): void {\n\t\tthis.output1 = 0.0;\n\t\tthis.output2 = 0.0;\n\t}\n\t\n\tpublic loadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\n\t\tthis.a1 = start.a[1];\n\t\tthis.a2 = start.a[2];\n\t\tthis.b0 = start.b[0];\n\t\tthis.b1 = start.b[1];\n\t\tthis.b2 = start.b[2];\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n\t\tif (useMultiplicativeInputCoefficients) {\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n\t\t} else {\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n\t\t}\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n\t}\n}\n","// Copyright (C) 2021 John Nesky, distributed under the MIT license.\n\nimport {Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, EffectType, NoteAutomationIndex, Transition, Unison, Chord, Vibrato, Envelope, AutomationTarget, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegral, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb} from \"./SynthConfig\";\nimport {scaleElementsByFactor, inverseRealFourierTransform} from \"./FFT\";\nimport {Deque} from \"./Deque\";\nimport {FilterCoefficients, FrequencyResponse, DynamicBiquadFilter} from \"./filtering\";\n\ndeclare global {\n\tinterface Window {\n\t\tAudioContext: any;\n\t\twebkitAudioContext: any;\n\t}\n}\n\nconst epsilon: number = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\n\n// For performance debugging:\n//let samplesAccumulated: number = 0;\n//let samplePerformance: number = 0;\n\nconst enum CharCode {\n\tSPACE = 32,\n\tHASH = 35,\n\tPERCENT = 37,\n\tAMPERSAND = 38,\n\tPLUS = 43,\n\tDASH = 45,\n\tDOT = 46,\n\tNUM_0 = 48,\n\tNUM_1 = 49,\n\tNUM_2 = 50,\n\tNUM_3 = 51,\n\tNUM_4 = 52,\n\tNUM_5 = 53,\n\tNUM_6 = 54,\n\tNUM_7 = 55,\n\tNUM_8 = 56,\n\tNUM_9 = 57,\n\tEQUALS = 61,\n\tA =  65,\n\tB =  66,\n\tC =  67,\n\tD =  68,\n\tE =  69,\n\tF =  70,\n\tG =  71,\n\tH =  72,\n\tI =  73,\n\tJ =  74,\n\tK =  75,\n\tL =  76,\n\tM =  77,\n\tN =  78,\n\tO =  79,\n\tP =  80,\n\tQ =  81,\n\tR =  82,\n\tS =  83,\n\tT =  84,\n\tU =  85,\n\tV =  86,\n\tW =  87,\n\tX =  88,\n\tY =  89,\n\tZ =  90,\n\tUNDERSCORE = 95,\n\ta =  97,\n\tb =  98,\n\tc =  99,\n\td = 100,\n\te = 101,\n\tf = 102,\n\tg = 103,\n\th = 104,\n\ti = 105,\n\tj = 106,\n\tk = 107,\n\tl = 108,\n\tm = 109,\n\tn = 110,\n\to = 111,\n\tp = 112,\n\tq = 113,\n\tr = 114,\n\ts = 115,\n\tt = 116,\n\tu = 117,\n\tv = 118,\n\tw = 119,\n\tx = 120,\n\ty = 121,\n\tz = 122,\n\tLEFT_CURLY_BRACE = 123,\n\tRIGHT_CURLY_BRACE = 125,\n}\n\nconst enum SongTagCode {\n\tbeatCount           = CharCode.a, // added in song url version 2\n\tbars                = CharCode.b, // added in 2\n\tvibrato             = CharCode.c, // added in 2, DEPRECATED\n\tfadeInOut           = CharCode.d, // added in 3 for transition, switched to fadeInOut in 9\n\tloopEnd             = CharCode.e, // added in 2\n\teqFilter            = CharCode.f, // added in 3\n\tbarCount            = CharCode.g, // added in 3\n\tunison              = CharCode.h, // added in 2\n\tinstrumentCount     = CharCode.i, // added in 3\n\tpatternCount        = CharCode.j, // added in 3\n\tkey                 = CharCode.k, // added in 2\n\tloopStart           = CharCode.l, // added in 2\n\treverb              = CharCode.m, // added in 5, DEPRECATED\n\tchannelCount        = CharCode.n, // added in 6\n\tchannelOctave       = CharCode.o, // added in 3\n\tpatterns            = CharCode.p, // added in 2\n\teffects             = CharCode.q, // added in 7\n\trhythm              = CharCode.r, // added in 2\n\tscale               = CharCode.s, // added in 2\n\ttempo               = CharCode.t, // added in 2\n\tpreset              = CharCode.u, // added in 7\n\tvolume              = CharCode.v, // added in 2\n\twave                = CharCode.w, // added in 2\n\t\n\tfilterResonance     = CharCode.y, // added in 7, DEPRECATED\n\tdrumsetEnvelopes    = CharCode.z, // added in 7 for filter envelopes, still used for drumset envelopes\n\talgorithm           = CharCode.A, // added in 6\n\tfeedbackAmplitude   = CharCode.B, // added in 6\n\tchord               = CharCode.C, // added in 7, DEPRECATED\n\t\n\tenvelopes           = CharCode.E, // added in 6 for FM operator envelopes, repurposed in 9 for general envelopes.\n\tfeedbackType        = CharCode.F, // added in 6\n\t\n\tharmonics           = CharCode.H, // added in 7\n\tstringSustain       = CharCode.I, // added in 9\n\t\n\tpan                 = CharCode.L, // added between 8 and 9, DEPRECATED\n\t\n\toperatorAmplitudes  = CharCode.P, // added in 6\n\toperatorFrequencies = CharCode.Q, // added in 6\n\t\n\tspectrum            = CharCode.S, // added in 7\n\tstartInstrument     = CharCode.T, // added in 6\n\t\n\tfeedbackEnvelope    = CharCode.V, // added in 6, DEPRECATED\n\tpulseWidth          = CharCode.W, // added in 7\n}\n\nconst base64IntToCharCode: ReadonlyArray<number> = [48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95];\nconst base64CharCodeToInt: ReadonlyArray<number> = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\n\nclass BitFieldReader {\n\tprivate _bits: number[] = [];\n\tprivate _readIndex: number = 0;\n\t\n\tconstructor(source: string, startIndex: number, stopIndex: number) {\n\t\tfor (let i: number = startIndex; i < stopIndex; i++) {\n\t\t\tconst value: number = base64CharCodeToInt[source.charCodeAt(i)];\n\t\t\tthis._bits.push((value >> 5) & 0x1);\n\t\t\tthis._bits.push((value >> 4) & 0x1);\n\t\t\tthis._bits.push((value >> 3) & 0x1);\n\t\t\tthis._bits.push((value >> 2) & 0x1);\n\t\t\tthis._bits.push((value >> 1) & 0x1);\n\t\t\tthis._bits.push( value       & 0x1);\n\t\t}\n\t}\n\t\n\tpublic read(bitCount: number): number {\n\t\tlet result: number = 0;\n\t\twhile (bitCount > 0) {\n\t\t\tresult = result << 1;\n\t\t\tresult += this._bits[this._readIndex++];\n\t\t\tbitCount--;\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic readLongTail(minValue: number, minBits: number): number {\n\t\tlet result: number = minValue;\n\t\tlet numBits: number = minBits;\n\t\twhile (this._bits[this._readIndex++]) {\n\t\t\tresult += 1 << numBits;\n\t\t\tnumBits++;\n\t\t}\n\t\twhile (numBits > 0) {\n\t\t\tnumBits--;\n\t\t\tif (this._bits[this._readIndex++]) {\n\t\t\t\tresult += 1 << numBits;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic readPartDuration(): number {\n\t\treturn this.readLongTail(1, 3);\n\t}\n\t\n\tpublic readLegacyPartDuration(): number {\n\t\treturn this.readLongTail(1, 2);\n\t}\n\t\n\tpublic readPinCount(): number {\n\t\treturn this.readLongTail(1, 0);\n\t}\n\t\n\tpublic readPitchInterval(): number {\n\t\tif (this.read(1)) {\n\t\t\treturn -this.readLongTail(1, 3);\n\t\t} else {\n\t\t\treturn this.readLongTail(1, 3);\n\t\t}\n\t}\n}\n\nclass BitFieldWriter {\n\tprivate _index: number = 0;\n\tprivate _bits: number[] = [];\n\t\n\tpublic clear() {\n\t\tthis._index = 0;\n\t}\n\t\n\tpublic write(bitCount: number, value: number): void {\n\t\tbitCount--;\n\t\twhile (bitCount >= 0) {\n\t\t\tthis._bits[this._index++] = (value >>> bitCount) & 1;\n\t\t\tbitCount--;\n\t\t}\n\t}\n\t\n\tpublic writeLongTail(minValue: number, minBits: number, value: number): void {\n\t\tif (value < minValue) throw new Error(\"value out of bounds\");\n\t\tvalue -= minValue;\n\t\tlet numBits: number = minBits;\n\t\twhile (value >= (1 << numBits)) {\n\t\t\tthis._bits[this._index++] = 1;\n\t\t\tvalue -= 1 << numBits;\n\t\t\tnumBits++;\n\t\t}\n\t\tthis._bits[this._index++] = 0;\n\t\twhile (numBits > 0) {\n\t\t\tnumBits--;\n\t\t\tthis._bits[this._index++] = (value >>> numBits) & 1;\n\t\t}\n\t}\n\t\n\tpublic writePartDuration(value: number): void {\n\t\tthis.writeLongTail(1, 3, value);\n\t}\n\t\n\tpublic writePinCount(value: number): void {\n\t\tthis.writeLongTail(1, 0, value);\n\t}\n\t\n\tpublic writePitchInterval(value: number): void {\n\t\tif (value < 0) {\n\t\t\tthis.write(1, 1); // sign\n\t\t\tthis.writeLongTail(1, 3, -value);\n\t\t} else {\n\t\t\tthis.write(1, 0); // sign\n\t\t\tthis.writeLongTail(1, 3, value);\n\t\t}\n\t}\n\t\n\tpublic concat(other: BitFieldWriter): void {\n\t\tfor (let i: number = 0; i < other._index; i++) {\n\t\t\tthis._bits[this._index++] = other._bits[i];\n\t\t}\n\t}\n\t\n\tpublic encodeBase64(buffer: number[]): number[] {\n\t\tfor (let i: number = 0; i < this._index; i += 6) {\n\t\t\tconst value: number = (this._bits[i] << 5) | (this._bits[i+1] << 4) | (this._bits[i+2] << 3) | (this._bits[i+3] << 2) | (this._bits[i+4] << 1) | this._bits[i+5];\n\t\t\tbuffer.push(base64IntToCharCode[value]);\n\t\t}\n\t\treturn buffer;\n\t}\n\t\n\tpublic lengthBase64(): number {\n\t\treturn Math.ceil(this._index / 6);\n\t}\n}\n\nexport interface NotePin {\n\tinterval: number;\n\ttime: number;\n\tsize: number;\n}\n\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\n\treturn {interval: interval, time: time, size: size};\n}\n\nexport function clamp(min: number, max: number, val: number): number {\n\tmax = max - 1;\n\tif (val <= max) {\n\t\tif (val >= min) return val;\n\t\telse return min;\n\t} else {\n\t\treturn max;\n\t}\n}\n\nfunction validateRange(min: number, max: number, val: number): number {\n\tif (min <= val && val <= max) return val;\n\tthrow new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\n\nexport class Note {\n\tpublic pitches: number[];\n\tpublic pins: NotePin[];\n\tpublic start: number;\n\tpublic end: number;\n\tpublic continuesLastPattern: boolean;\n\t\n\tpublic constructor(pitch: number, start: number, end: number, size: number, fadeout: boolean = false) {\n\t\tthis.pitches = [pitch];\n\t\tthis.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.continuesLastPattern = false;\n\t}\n\t\n\tpublic pickMainInterval(): number {\n\t\tlet longestFlatIntervalDuration: number = 0;\n\t\tlet mainInterval: number = 0;\n\t\tfor (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\n\t\t\tconst pinA: NotePin = this.pins[pinIndex - 1];\n\t\t\tconst pinB: NotePin = this.pins[pinIndex];\n\t\t\tif (pinA.interval == pinB.interval) {\n\t\t\t\tconst duration: number = pinB.time - pinA.time;\n\t\t\t\tif (longestFlatIntervalDuration < duration) {\n\t\t\t\t\tlongestFlatIntervalDuration = duration;\n\t\t\t\t\tmainInterval = pinA.interval;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (longestFlatIntervalDuration == 0) {\n\t\t\tlet loudestSize: number = 0;\n\t\t\tfor (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\n\t\t\t\tconst pin: NotePin = this.pins[pinIndex];\n\t\t\t\tif (loudestSize < pin.size) {\n\t\t\t\t\tloudestSize = pin.size;\n\t\t\t\t\tmainInterval = pin.interval;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn mainInterval;\n\t}\n\t\n\tpublic clone(): Note {\n\t\tconst newNote: Note = new Note(-1, this.start, this.end, Config.noteSizeMax);\n\t\tnewNote.pitches = this.pitches.concat();\n\t\tnewNote.pins = [];\n\t\tfor (const pin of this.pins) {\n\t\t\tnewNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n\t\t}\n\t\tnewNote.continuesLastPattern = this.continuesLastPattern;\n\t\treturn newNote;\n\t}\n\t\n\tpublic getEndPinIndex(part: number): number {\n\t\tlet endPinIndex: number;\n\t\tfor (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n\t\t\tif (this.pins[endPinIndex].time + this.start > part) break;\n\t\t}\n\t\treturn endPinIndex;\n\t}\n}\n\nexport class Pattern {\n\tpublic notes: Note[] = [];\n\tpublic readonly instruments: number[] = [0];\n\t\n\tpublic cloneNotes(): Note[] {\n\t\tconst result: Note[] = [];\n\t\tfor (const note of this.notes) {\n\t\t\tresult.push(note.clone());\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic reset(): void {\n\t\tthis.notes.length = 0;\n\t\tthis.instruments[0] = 0;\n\t\tthis.instruments.length = 1;\n\t}\n}\n\nexport class Operator {\n\tpublic frequency: number = 0;\n\tpublic amplitude: number = 0;\n\t\n\tconstructor(index: number) {\n\t\tthis.reset(index);\n\t}\n\t\n\tpublic reset(index: number): void {\n\t\tthis.frequency = 0;\n\t\tthis.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n\t}\n}\n\nexport class SpectrumWave {\n\tpublic spectrum: number[] = [];\n\tprivate _wave: Float32Array | null = null;\n\tprivate _waveIsReady: boolean = false;\n\t\n\tconstructor(isNoiseChannel: boolean) {\n\t\tthis.reset(isNoiseChannel);\n\t}\n\t\n\tpublic reset(isNoiseChannel: boolean): void {\n\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\tif (isNoiseChannel) {\n\t\t\t\tthis.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n\t\t\t} else {\n\t\t\t\tconst isHarmonic: boolean = i==0 || i==7 || i==11 || i==14 || i==16 || i==18 || i==21 || i==23 || i>=25;\n\t\t\t\tthis.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n\t\t\t}\n\t\t}\n\t\tthis._waveIsReady = false;\n\t}\n\t\n\tpublic markCustomWaveDirty(): void {\n\t\tthis._waveIsReady = false;\n\t}\n\t\n\tpublic getCustomWave(lowestOctave: number): Float32Array {\n\t\tif (this._waveIsReady) return this._wave!;\n\t\t\n\t\tconst waveLength: number = Config.spectrumNoiseLength;\n\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\n\t\t\tthis._wave = new Float32Array(waveLength + 1);\n\t\t}\n\t\tconst wave: Float32Array = this._wave;\n\t\t\n\t\tfor (let i: number = 0; i < waveLength; i++) {\n\t\t\twave[i] = 0;\n\t\t}\n\t\t\n\t\tconst highestOctave: number = 14;\n\t\tconst falloffRatio: number = 0.25;\n\t\t// Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\n\t\tconst pitchTweak: number[] = [0, 1/7, Math.log2(5/4), 3/7, Math.log2(3/2), 5/7, 6/7];\n\t\tfunction controlPointToOctave(point: number): number {\n\t\t\treturn lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n\t\t}\n\t\t\n\t\tlet combinedAmplitude: number = 1;\n\t\tfor (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\n\t\t\tconst value1: number = (i <= 0) ? 0 : this.spectrum[i - 1];\n\t\t\tconst value2: number = (i >= Config.spectrumControlPoints) ? this.spectrum[Config.spectrumControlPoints - 1] : this.spectrum[i];\n\t\t\tconst octave1: number = controlPointToOctave(i - 1);\n\t\t\tlet octave2: number = controlPointToOctave(i);\n\t\t\tif (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n\t\t\tif (value1 == 0 && value2 == 0) continue;\n\t\t\t\n\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n\t\t}\n\t\tif (this.spectrum[Config.spectrumControlPoints - 1] > 0) {\n\t\t\tcombinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, this.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n\t\t}\n\t\t\n\t\tinverseRealFourierTransform(wave, waveLength);\n\t\tscaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n\t\t\n\t\t// Duplicate the first sample at the end for easier wrap-around interpolation.\n\t\twave[waveLength] = wave[0];\n\t\t\n\t\tthis._waveIsReady = true;\n\t\treturn wave;\n\t}\n}\n\nexport class HarmonicsWave {\n\tpublic harmonics: number[] = [];\n\tprivate _wave: Float32Array | null = null;\n\tprivate _waveIsReady: boolean = false;\n\tprivate _generatedForType: InstrumentType;\n\t\n\tconstructor() {\n\t\tthis.reset();\n\t}\n\t\n\tpublic reset(): void {\n\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n\t\t\tthis.harmonics[i] = 0;\n\t\t}\n\t\tthis.harmonics[0] = Config.harmonicsMax;\n\t\tthis.harmonics[3] = Config.harmonicsMax;\n\t\tthis.harmonics[6] = Config.harmonicsMax;\n\t\tthis._waveIsReady = false;\n\t}\n\t\n\tpublic markCustomWaveDirty(): void {\n\t\tthis._waveIsReady = false;\n\t}\n\t\n\tpublic getCustomWave(instrumentType: InstrumentType): Float32Array {\n\t\tif (this._generatedForType != instrumentType) {\n\t\t\tthis._generatedForType = instrumentType;\n\t\t\tthis._waveIsReady = false;\n\t\t}\n\t\tconst harmonicsRendered: number = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n\t\t\n\t\tif (this._waveIsReady) return this._wave!;\n\t\t\n\t\tconst waveLength: number = Config.harmonicsWavelength;\n\t\tconst retroWave: Float32Array = getDrumWave(0, null, null);\n\t\t\n\t\tif (this._wave == null || this._wave.length != waveLength + 1) {\n\t\t\tthis._wave = new Float32Array(waveLength + 1);\n\t\t}\n\t\tconst wave: Float32Array = this._wave;\n\t\t\n\t\tfor (let i: number = 0; i < waveLength; i++) {\n\t\t\twave[i] = 0;\n\t\t}\n\t\t\n\t\tconst overallSlope: number = -0.25;\n\t\tlet combinedControlPointAmplitude: number = 1;\n\t\t\n\t\tfor (let harmonicIndex: number = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n\t\t\tconst harmonicFreq: number = harmonicIndex + 1;\n\t\t\tlet controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? this.harmonics[harmonicIndex] : this.harmonics[Config.harmonicsControlPoints - 1];\n\t\t\tif (harmonicIndex >= Config.harmonicsControlPoints) {\n\t\t\t\tcontrolValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n\t\t\t}\n\t\t\tconst normalizedValue: number = controlValue / Config.harmonicsMax;\n\t\t\tlet amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n\t\t\tif (harmonicIndex < Config.harmonicsControlPoints) {\n\t\t\t\tcombinedControlPointAmplitude += amplitude;\n\t\t\t}\n\t\t\tamplitude *= Math.pow(harmonicFreq, overallSlope);\n\t\t\t\n\t\t\t// Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\n\t\t\t// retro wave (effectively random) to avoid egregiously tall spikes.\n\t\t\tamplitude *= retroWave[harmonicIndex + 589];\n\t\t\t\n\t\t\twave[waveLength - harmonicFreq] = amplitude;\n\t\t}\n\t\t\n\t\tinverseRealFourierTransform(wave, waveLength);\n\t\t\n\t\t// Limit the maximum wave amplitude.\n\t\tconst mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n\t\tfor (let i: number = 0; i < wave.length; i++) wave[i] *= mult;\n\t\t\n\t\tperformIntegral(wave);\n\t\t\n\t\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n\t\twave[waveLength] = wave[0];\n\t\t\n\t\tthis._waveIsReady = true;\n\t\treturn wave;\n\t}\n}\n\nexport class FilterControlPoint {\n\tpublic freq: number = 0;\n\tpublic gain: number = Config.filterGainCenter;\n\tpublic type: FilterType = FilterType.peak;\n\t\n\tpublic set(freqSetting: number, gainSetting: number): void {\n\t\tthis.freq = freqSetting;\n\t\tthis.gain = gainSetting;\n\t}\n\t\n\tpublic getHz(): number {\n\t\treturn FilterControlPoint.getHzFromSettingValue(this.freq);\n\t}\n\t\n\tpublic static getHzFromSettingValue(value: number): number {\n\t\treturn Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n\t}\n\tpublic static getSettingValueFromHz(hz: number): number {\n\t\treturn Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n\t}\n\tpublic static getRoundedSettingValueFromHz(hz: number): number {\n\t\treturn Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n\t}\n\t\n\tpublic getLinearGain(peakMult: number = 1.0): number {\n\t\tconst power: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n\t\tconst neutral: number = (this.type == FilterType.peak) ? 0.0 : -0.5;\n\t\tconst interpolatedPower: number = neutral + (power - neutral) * peakMult;\n\t\treturn Math.pow(2.0, interpolatedPower);\n\t}\n\tpublic static getRoundedSettingValueFromLinearGain(linearGain: number): number {\n\t\treturn Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n\t}\n\t\n\tpublic toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult: number = 1.0, peakMult: number = 1.0): void {\n\t\tconst cornerRadiansPerSample: number = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n\t\tconst linearGain: number = this.getLinearGain(peakMult);\n\t\tswitch (this.type) {\n\t\t\tcase FilterType.lowPass:\n\t\t\t\tfilter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n\t\t\t\tbreak;\n\t\t\tcase FilterType.highPass:\n\t\t\t\tfilter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n\t\t\t\tbreak;\n\t\t\tcase FilterType.peak:\n\t\t\t\tfilter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error();\n\t\t}\n\t}\n\t\n\tpublic getVolumeCompensationMult(): number {\n\t\tconst octave: number = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n\t\tconst gainPow: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n\t\tswitch (this.type) {\n\t\t\tcase FilterType.lowPass:\n\t\t\t\tconst freqRelativeTo8khz: number = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n\t\t\t\t// Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\n\t\t\t\tconst warpedFreq: number = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n\t\t\t\tconst warpedOctave: number = Math.log2(warpedFreq);\n\t\t\t\treturn Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n\t\t\tcase FilterType.highPass:\n\t\t\t\treturn Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n\t\t\tcase FilterType.peak:\n\t\t\t\tconst distanceFromCenter: number = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n\t\t\t\tconst freqLoudness: number = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n\t\t\t\treturn Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n\t\t\tdefault:\n\t\t\t\tthrow new Error();\n\t\t}\n\t}\n}\n\nexport class FilterSettings {\n\tpublic readonly controlPoints: FilterControlPoint[] = [];\n\tpublic controlPointCount: number = 0;\n\t\n\tconstructor() {\n\t\tthis.reset();\n\t}\n\t\n\treset(): void {\n\t\tthis.controlPointCount = 0;\n\t}\n\t\n\taddPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\n\t\tlet controlPoint: FilterControlPoint;\n\t\tif (this.controlPoints.length <= this.controlPointCount) {\n\t\t\tcontrolPoint = new FilterControlPoint();\n\t\t\tthis.controlPoints[this.controlPointCount] = controlPoint;\n\t\t} else {\n\t\t\tcontrolPoint = this.controlPoints[this.controlPointCount];\n\t\t}\n\t\tthis.controlPointCount++;\n\t\tcontrolPoint.type = type;\n\t\tcontrolPoint.set(freqSetting, gainSetting);\n\t}\n\t\n\tpublic toJsonObject(): Object {\n\t\tconst filterArray: any[] = [];\n\t\tfor (let i: number = 0; i < this.controlPointCount; i++) {\n\t\t\tconst point: FilterControlPoint = this.controlPoints[i];\n\t\t\tfilterArray.push({\n\t\t\t\t\"type\": Config.filterTypeNames[point.type],\n\t\t\t\t\"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n\t\t\t\t\"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n\t\t\t});\n\t\t}\n\t\treturn filterArray;\n\t}\n\t\n\tpublic fromJsonObject(filterObject: any): void {\n\t\tthis.controlPoints.length = 0;\n\t\tif (filterObject) {\n\t\t\tfor (const pointObject of filterObject) {\n\t\t\t\tconst point: FilterControlPoint = new FilterControlPoint();\n\t\t\t\tpoint.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n\t\t\t\tif (<any>point.type == -1) point.type = FilterType.peak;\n\t\t\t\tif (pointObject[\"cutoffHz\"] != undefined) {\n\t\t\t\t\tpoint.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n\t\t\t\t} else {\n\t\t\t\t\tpoint.freq = 0;\n\t\t\t\t}\n\t\t\t\tif (pointObject[\"linearGain\"] != undefined) {\n\t\t\t\t\tpoint.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n\t\t\t\t} else {\n\t\t\t\t\tpoint.gain = Config.filterGainCenter;\n\t\t\t\t}\n\t\t\t\tthis.controlPoints.push(point);\n\t\t\t}\n\t\t}\n\t\tthis.controlPointCount = this.controlPoints.length;\n\t}\n\t\n\tpublic convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\n\t\tthis.reset();\n\t\t\n\t\tconst legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n\t\tconst legacyFilterMax: number = 0.95;\n\t\tconst legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n\t\tconst legacyFilterMaxResonance: number = 0.95;\n\t\tconst legacyFilterCutoffRange: number = 11;\n\t\tconst legacyFilterResonanceRange: number = 8;\n\t\t\n\t\tconst resonant: boolean = (legacyResonanceSetting > 1);\n\t\tconst firstOrder: boolean = (legacyResonanceSetting == 0);\n\t\tconst cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n\t\tconst envDecays: boolean = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\n\t\t\n\t\tconst standardSampleRate: number = 48000;\n\t\tconst legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n\t\tconst legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\t\t\n\t\tif (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\n\t\t\t// The response is flat and there's no envelopes, so don't even bother adding any control points.\n\t\t} else if (firstOrder) {\n\t\t\t// In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n\t\t\t// with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n\t\t\t// However, BeepBox's original lowpass filters behaved oddly as they\n\t\t\t// approach the nyquist frequency, so I've devised this curved conversion\n\t\t\t// to guess at a perceptually appropriate new cutoff frequency and gain.\n\t\t\tconst extraOctaves: number = 3.5;\n\t\t\tconst targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n\t\t\tconst curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n\t\t\tconst curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n\t\t\tconst freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n\t\t\tconst finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n\t\t\tconst finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\t\t\t\n\t\t\tconst legacyFilter: FilterCoefficients = new FilterCoefficients();\n\t\t\tlegacyFilter.lowPass1stOrderSimplified(legacyRadians);\n\t\t\tconst response: FrequencyResponse = new FrequencyResponse();\n\t\t\tresponse.analyze(legacyFilter, finalRadians);\n\t\t\tconst legacyFilterGainAtNewRadians: number = response.magnitude();\n\t\t\t\n\t\t\tlet logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n\t\t\t// Bias slightly toward 2^(-extraOctaves):\n\t\t\tlogGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n\t\t\t// Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\n\t\t\tif (envDecays) logGain = Math.min(logGain, -1.0);\n\t\t\tconst convertedGain: number = Math.pow(2.0, logGain);\n\t\t\tconst gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\t\t\t\n\t\t\tthis.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n\t\t} else {\n\t\t\tconst intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n\t\t\tconst invertedGain: number = 0.5 / intendedGain;\n\t\t\tconst maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n\t\t\tconst freqRatio: number = legacyRadians / maxRadians;\n\t\t\tconst targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n\t\t\tconst curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n\t\t\tlet curvedHz: number;\n\t\t\tif (envDecays) {\n\t\t\t\tcurvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI)\n\t\t\t} else {\n\t\t\t\tcurvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n\t\t\t}\n\t\t\tconst freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n\t\t\t\n\t\t\tlet legacyFilterGain: number;\n\t\t\tif (envDecays) {\n\t\t\t\tlegacyFilterGain = intendedGain;\n\t\t\t} else {\n\t\t\t\tconst legacyFilter: FilterCoefficients = new FilterCoefficients();\n\t\t\t\tlegacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n\t\t\t\tconst response: FrequencyResponse = new FrequencyResponse();\n\t\t\t\tresponse.analyze(legacyFilter, curvedRadians);\n\t\t\t\tlegacyFilterGain = response.magnitude();\n\t\t\t}\n\t\t\tif (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n\t\t\tconst gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\t\t\t\n\t\t\tthis.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n\t\t}\n\t}\n}\n\nexport class EnvelopeSettings {\n\tpublic target: number = 0;\n\tpublic index: number = 0;\n\tpublic envelope: number = 0;\n\t\n\tconstructor() {\n\t\tthis.reset();\n\t}\n\t\n\treset(): void {\n\t\tthis.target = 0;\n\t\tthis.index = 0;\n\t\tthis.envelope = 0;\n\t}\n\t\n\tpublic toJsonObject(): Object {\n\t\tconst envelopeObject: any = {\n\t\t\t\"target\": Config.instrumentAutomationTargets[this.target].name,\n\t\t\t\"envelope\": Config.envelopes[this.envelope].name,\n\t\t};\n\t\tif (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n\t\t\tenvelopeObject[\"index\"] = this.index;\n\t\t}\n\t\treturn envelopeObject;\n\t}\n\t\n\tpublic fromJsonObject(envelopeObject: any): void {\n\t\tthis.reset();\n\t\t\n\t\tlet target: AutomationTarget = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n\t\tif (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n\t\tthis.target = target.index;\n\t\t\n\t\tlet envelope: Envelope = Config.envelopes.dictionary[envelopeObject[\"envelope\"]];\n\t\tif (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\n\t\tthis.envelope = envelope.index;\n\t\t\n\t\tif (envelopeObject[\"index\"] != undefined) {\n\t\t\tthis.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n\t\t} else {\n\t\t\tthis.index = 0;\n\t\t}\n\t}\n}\n\n// Settings that were available to old versions of BeepBox but are no longer available in the\n// current version that need to be reinterpreted as a group to determine the best way to\n// represent them in the current version.\ninterface LegacySettings {\n\tfilterCutoff?: number;\n\tfilterResonance?: number;\n\tfilterEnvelope?: Envelope;\n\tpulseEnvelope?: Envelope;\n\toperatorEnvelopes?: Envelope[];\n\tfeedbackEnvelope?: Envelope;\n}\n\nexport class Instrument {\n\tpublic type: InstrumentType = InstrumentType.chip;\n\tpublic preset: number = 0;\n\tpublic chipWave: number = 2;\n\tpublic chipNoise: number = 1;\n\tpublic eqFilter: FilterSettings = new FilterSettings();\n\tpublic noteFilter: FilterSettings = new FilterSettings();\n\tpublic envelopes: EnvelopeSettings[] = [];\n\tpublic envelopeCount: number = 0;\n\tpublic fadeIn: number = 0;\n\tpublic fadeOut: number = Config.fadeOutNeutral;\n\tpublic transition: number = Config.transitions.dictionary[\"normal\"].index;\n\tpublic pitchShift: number = 0;\n\tpublic detune: number = 0;\n\tpublic vibrato: number = 0;\n\tpublic unison: number = 0;\n\tpublic effects: number = 0;\n\tpublic chord: number = 1;\n\tpublic volume: number = 0;\n\tpublic pan: number = Config.panCenter;\n\tpublic pulseWidth: number = Config.pulseWidthRange - 1;\n\tpublic stringSustain: number = 10;\n\tpublic distortion: number = 0;\n\tpublic bitcrusherFreq: number = 0;\n\tpublic bitcrusherQuantization: number = 0;\n\tpublic chorus: number = 0;\n\tpublic reverb: number = 0;\n\tpublic echoSustain: number = 0;\n\tpublic echoDelay: number = 0;\n\tpublic algorithm: number = 0;\n\tpublic feedbackType: number = 0;\n\tpublic feedbackAmplitude: number = 0;\n\tpublic readonly operators: Operator[] = [];\n\tpublic readonly spectrumWave: SpectrumWave;\n\tpublic readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\n\tpublic readonly drumsetEnvelopes: number[] = [];\n\tpublic readonly drumsetSpectrumWaves: SpectrumWave[] = [];\n\t\n\tconstructor(isNoiseChannel: boolean) {\n\t\tthis.spectrumWave = new SpectrumWave(isNoiseChannel);\n\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\n\t\t\tthis.operators[i] = new Operator(i);\n\t\t}\n\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\n\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n\t\t\tthis.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n\t\t}\n\t}\n\t\n\tpublic setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean): void {\n\t\tthis.type = type;\n\t\tthis.preset = type;\n\t\tthis.volume = 0;\n\t\tthis.effects = 0;\n\t\tthis.chorus = Config.chorusRange - 1;\n\t\tthis.reverb = 2;\n\t\tthis.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\n\t\tthis.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\n\t\tthis.eqFilter.reset();\n\t\tthis.noteFilter.reset();\n\t\tthis.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\n\t\tthis.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5)\n\t\tthis.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\n\t\tthis.pan = Config.panCenter;\n\t\tthis.pitchShift = Config.pitchShiftCenter;\n\t\tthis.detune = Config.detuneCenter;\n\t\tthis.vibrato = 0;\n\t\tthis.unison = 0;\n\t\tthis.stringSustain = 10;\n\t\tthis.fadeIn = 0;\n\t\tthis.fadeOut = Config.fadeOutNeutral;\n\t\tthis.transition = Config.transitions.dictionary[\"normal\"].index;\n\t\tthis.envelopeCount = 0;\n\t\tswitch (type) {\n\t\t\tcase InstrumentType.chip:\n\t\t\t\tthis.chipWave = 2;\n\t\t\t\t// TODO: enable the chord effect?\n\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\tbreak;\n\t\t\tcase InstrumentType.fm:\n\t\t\t\tthis.chord = Config.chords.dictionary[\"custom interval\"].index;\n\t\t\t\tthis.algorithm = 0;\n\t\t\t\tthis.feedbackType = 0;\n\t\t\t\tthis.feedbackAmplitude = 0;\n\t\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\n\t\t\t\t\tthis.operators[i].reset(i);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase InstrumentType.noise:\n\t\t\t\tthis.chipNoise = 1;\n\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\tbreak;\n\t\t\tcase InstrumentType.spectrum:\n\t\t\t\tthis.chord = Config.chords.dictionary[\"simultaneous\"].index;\n\t\t\t\tthis.spectrumWave.reset(isNoiseChannel);\n\t\t\t\tbreak;\n\t\t\tcase InstrumentType.drumset:\n\t\t\t\tthis.chord = Config.chords.dictionary[\"simultaneous\"].index;\n\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\n\t\t\t\t\tthis.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n\t\t\t\t\tthis.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase InstrumentType.harmonics:\n\t\t\t\tthis.chord = Config.chords.dictionary[\"simultaneous\"].index;\n\t\t\t\tthis.harmonicsWave.reset();\n\t\t\t\tbreak;\n\t\t\tcase InstrumentType.pwm:\n\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange - 1;\n\t\t\t\tbreak;\n\t\t\tcase InstrumentType.pickedString:\n\t\t\t\tthis.chord = Config.chords.dictionary[\"strum\"].index;\n\t\t\t\tthis.harmonicsWave.reset();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unrecognized instrument type: \" + type);\n\t\t}\n\t\t// Chip/noise instruments had arpeggio and FM had custom interval but neither\n\t\t// explicitly saved the chorus setting beforeSeven so enable it here. The effects\n\t\t// will otherwise get overridden when reading SongTagCode.startInstrument.\n\t\tif (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n\t\t\t// Enable chord if it was used.\n\t\t\tthis.effects = (this.effects | (1 << EffectType.chord));\n\t\t}\n\t}\n\t\n\tpublic convertLegacySettings(legacySettings: LegacySettings): void {\n\t\tlet legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\n\t\tlet legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\n\t\tlet legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\n\t\tlet legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\n\t\tlet legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\n\t\tlet legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\n\t\t\n\t\t// legacy defaults:\n\t\tif (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\n\t\tif (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\n\t\tif (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n\t\tif (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\n\t\tif (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n\t\tif (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n\t\t\n\t\tconst carrierCount: number = Config.algorithms[this.algorithm].carrierCount;\n\t\tlet noCarriersControlledByNoteSize: boolean = true;\n\t\tlet allCarriersControlledByNoteSize: boolean = true;\n\t\tlet noteSizeControlsSomethingElse: boolean = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\n\t\tif (this.type == InstrumentType.fm) {\n\t\t\tnoteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\n\t\t\tfor (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n\t\t\t\tif (i < carrierCount) {\n\t\t\t\t\tif (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\n\t\t\t\t\t\tallCarriersControlledByNoteSize = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnoCarriersControlledByNoteSize = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnoteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.envelopeCount = 0;\n\t\t\n\t\tif (this.type == InstrumentType.fm) {\n\t\t\tif (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n\t\t\t\tthis.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\n\t\t\t} else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n\t\t\t\tthis.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (legacyFilterEnv.type == EnvelopeType.none) {\n\t\t\tthis.noteFilter.reset();\n\t\t\tthis.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n\t\t\tthis.effects &= ~(1 << EffectType.noteFilter);\n\t\t} else {\n\t\t\tthis.eqFilter.reset();\n\t\t\tthis.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n\t\t\tthis.effects |= 1 << EffectType.noteFilter;\n\t\t\tthis.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index);\n\t\t}\n\t\t\n\t\tif (legacyPulseEnv.type != EnvelopeType.none) {\n\t\t\tthis.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index);\n\t\t}\n\t\t\n\t\tfor (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n\t\t\tif (i < carrierCount && allCarriersControlledByNoteSize) continue;\n\t\t\tif (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\n\t\t\t\tthis.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (legacyFeedbackEnv.type != EnvelopeType.none) {\n\t\t\tthis.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index);\n\t\t}\n\t}\n\t\n\tpublic toJsonObject(): Object {\n\t\tconst instrumentObject: any = {\n\t\t\t\"type\": Config.instrumentTypeNames[this.type],\n\t\t\t\"volume\": (5 - this.volume) * 20,\n\t\t\t\"eqFilter\": this.eqFilter.toJsonObject(),\n\t\t};\n\t\t\n\t\tif (this.preset != this.type) {\n\t\t\tinstrumentObject[\"preset\"] = this.preset;\n\t\t}\n\t\t\n\t\tconst effects: string[] = [];\n\t\tfor (const effect of Config.effectOrder) {\n\t\t\tif (this.effects & (1 << effect)) {\n\t\t\t\teffects.push(Config.effectNames[effect]);\n\t\t\t}\n\t\t}\n\t\tinstrumentObject[\"effects\"] = effects;\n\t\t\n\t\t\n\t\tif (effectsIncludeTransition(this.effects)) {\n\t\t\tinstrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n\t\t}\n\t\tif (effectsIncludeChord(this.effects)) {\n\t\t\tinstrumentObject[\"chord\"] = this.getChord().name;\n\t\t}\n\t\tif (effectsIncludePitchShift(this.effects)) {\n\t\t\tinstrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n\t\t}\n\t\tif (effectsIncludeDetune(this.effects)) {\n\t\t\tinstrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune - Config.detuneCenter);\n\t\t}\n\t\tif (effectsIncludeVibrato(this.effects)) {\n\t\t\tinstrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n\t\t}\n\t\tif (effectsIncludeNoteFilter(this.effects)) {\n\t\t\tinstrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\n\t\t}\n\t\tif (effectsIncludeDistortion(this.effects)) {\n\t\t\tinstrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\n\t\t}\n\t\tif (effectsIncludeBitcrusher(this.effects)) {\n\t\t\tinstrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\n\t\t\tinstrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\n\t\t}\n\t\tif (effectsIncludePanning(this.effects)) {\n\t\t\tinstrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\n\t\t}\n\t\tif (effectsIncludeChorus(this.effects)) {\n\t\t\tinstrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\n\t\t}\n\t\tif (effectsIncludeEcho(this.effects)) {\n\t\t\tinstrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\n\t\t\tinstrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\n\t\t}\n\t\tif (effectsIncludeReverb(this.effects)) {\n\t\t\tinstrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\n\t\t}\n\t\t\n\t\tif (this.type != InstrumentType.drumset) {\n\t\t\tinstrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\n\t\t\tinstrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\n\t\t}\n\t\t\n\t\tif (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\n\t\t\tinstrumentObject[\"harmonics\"] = [];\n\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n\t\t\t\tinstrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.type == InstrumentType.noise) {\n\t\t\tinstrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n\t\t} else if (this.type == InstrumentType.spectrum) {\n\t\t\tinstrumentObject[\"spectrum\"] = [];\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\t\tinstrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n\t\t\t}\n\t\t} else if (this.type == InstrumentType.drumset) {\n\t\t\tinstrumentObject[\"drums\"] = [];\n\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\n\t\t\t\tconst spectrum: number[] = [];\n\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\t\t\tspectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n\t\t\t\t}\n\t\t\t\tinstrumentObject[\"drums\"][j] = {\n\t\t\t\t\t\"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n\t\t\t\t\t\"spectrum\": spectrum,\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (this.type == InstrumentType.chip) {\n\t\t\tinstrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n\t\t\tinstrumentObject[\"unison\"] = Config.unisons[this.unison].name;\n\t\t} else if (this.type == InstrumentType.pwm) {\n\t\t\tinstrumentObject[\"pulseWidth\"] = Math.round(getPulseWidthRatio(this.pulseWidth) * 100 * 100000) / 100000;\n\t\t} else if (this.type == InstrumentType.pickedString) {\n\t\t\tinstrumentObject[\"unison\"] = Config.unisons[this.unison].name;\n\t\t\tinstrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n\t\t} else if (this.type == InstrumentType.harmonics) {\n\t\t\tinstrumentObject[\"unison\"] = Config.unisons[this.unison].name;\n\t\t} else if (this.type == InstrumentType.fm) {\n\t\t\tconst operatorArray: Object[] = [];\n\t\t\tfor (const operator of this.operators) {\n\t\t\t\toperatorArray.push({\n\t\t\t\t\t\"frequency\": Config.operatorFrequencies[operator.frequency].name,\n\t\t\t\t\t\"amplitude\": operator.amplitude,\n\t\t\t\t});\n\t\t\t}\n\t\t\tinstrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n\t\t\tinstrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n\t\t\tinstrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n\t\t\tinstrumentObject[\"operators\"] = operatorArray;\n\t\t} else {\n\t\t\tthrow new Error(\"Unrecognized instrument type\");\n\t\t}\n\t\t\n\t\tconst envelopes: any[] = [];\n\t\tfor (let i = 0; i < this.envelopeCount; i++) {\n\t\t\tenvelopes.push(this.envelopes[i].toJsonObject());\n\t\t}\n\t\tinstrumentObject[\"envelopes\"] = envelopes;\n\t\t\n\t\treturn instrumentObject;\n\t}\n\t\n\tpublic fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, legacyGlobalReverb: number = 0): void {\n\t\tif (instrumentObject == undefined) instrumentObject = {};\n\t\t\n\t\tlet type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n\t\tif (<any>type == -1) type = isNoiseChannel ? InstrumentType.noise : InstrumentType.chip;\n\t\tthis.setTypeAndReset(type, isNoiseChannel);\n\t\t\n\t\tif (instrumentObject[\"preset\"] != undefined) {\n\t\t\tthis.preset = instrumentObject[\"preset\"] >>> 0;\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"volume\"] != undefined) {\n\t\t\tthis.volume = clamp(0, Config.volumeRange, Math.round(5 - (instrumentObject[\"volume\"] | 0) / 20));\n\t\t} else {\n\t\t\tthis.volume = 0;\n\t\t}\n\t\t\n\t\tif (Array.isArray(instrumentObject[\"effects\"])) {\n\t\t\tlet effects: number = 0;\n\t\t\tfor (let i: number = 0; i < instrumentObject[\"effects\"].length; i++) {\n\t\t\t\teffects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\n\t\t\t}\n\t\t\tthis.effects = (effects & ((1 << EffectType.length) - 1));\n\t\t} else {\n\t\t\t// The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\n\t\t\tconst legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\n\t\t\tthis.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\n\t\t\tif (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\n\t\t}\n\t\t\n\t\tthis.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\n\t\tconst transitionProperty: any = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\n\t\tif (transitionProperty != undefined) {\n\t\t\tlet transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\n\t\t\tif (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n\t\t\t\tconst legacySettings = (<any>{\n\t\t\t\t\t\"binary\":      {transition: \"interrupt\", fadeInSeconds: 0.0,    fadeOutTicks: -1},\n\t\t\t\t\t\"seamless\":    {transition: \"interrupt\", fadeInSeconds: 0.0,    fadeOutTicks: -1},\n\t\t\t\t\t\"sudden\":      {transition: \"normal\",    fadeInSeconds: 0.0,    fadeOutTicks: -3},\n\t\t\t\t\t\"hard\":        {transition: \"normal\",    fadeInSeconds: 0.0,    fadeOutTicks: -3},\n\t\t\t\t\t\"smooth\":      {transition: \"normal\",    fadeInSeconds: 0.025,  fadeOutTicks: -3},\n\t\t\t\t\t\"soft\":        {transition: \"normal\",    fadeInSeconds: 0.025,  fadeOutTicks: -3},\n\t\t\t\t\t// Note that the old slide transition has the same name as a new slide transition that is different.\n\t\t\t\t\t// Only apply legacy settings if the instrument JSON was created before, based on the presence\n\t\t\t\t\t// of the fade in/out fields.\n\t\t\t\t\t\"slide\":       {transition: \"slide in pattern\", fadeInSeconds: 0.025,  fadeOutTicks: -3},\n\t\t\t\t\t\"cross fade\":  {transition: \"normal\",    fadeInSeconds: 0.04,   fadeOutTicks:  6},\n\t\t\t\t\t\"hard fade\":   {transition: \"normal\",    fadeInSeconds: 0.0,    fadeOutTicks: 48},\n\t\t\t\t\t\"medium fade\": {transition: \"normal\",    fadeInSeconds: 0.0125, fadeOutTicks: 72},\n\t\t\t\t\t\"soft fade\":   {transition: \"normal\",    fadeInSeconds: 0.06,   fadeOutTicks: 96},\n\t\t\t\t})[transitionProperty];\n\t\t\t\tif (legacySettings != undefined) {\n\t\t\t\t\ttransition = Config.transitions.dictionary[legacySettings.transition];\n\t\t\t\t\t// These may be overridden below.\n\t\t\t\t\tthis.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\n\t\t\t\t\tthis.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (transition != undefined) this.transition = transition.index;\n\t\t\t\n\t\t\tif (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n\t\t\t\t// Enable transition if it was used.\n\t\t\t\tthis.effects = (this.effects | (1 << EffectType.transition));\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Overrides legacy settings in transition above.\n\t\tif (instrumentObject[\"fadeInSeconds\"] != undefined) {\n\t\t\tthis.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n\t\t}\n\t\tif (instrumentObject[\"fadeOutTicks\"] != undefined) {\n\t\t\tthis.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n\t\t}\n\t\t\n\t\t{\n\t\t\t// Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\n\t\t\tconst chordProperty: any = instrumentObject[\"chord\"];\n\t\t\tconst legacyChordNames: Dictionary<string> = {\"harmony\": \"simultaneous\"};\n\t\t\tconst chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n\t\t\tif (chord != undefined) {\n\t\t\t\tthis.chord = chord.index;\n\t\t\t} else {\n\t\t\t\t// Different instruments have different default chord types based on historical behaviour.\n\t\t\t\tif (this.type == InstrumentType.noise) {\n\t\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\t} else if (this.type == InstrumentType.pickedString) {\n\t\t\t\t\tthis.chord = Config.chords.dictionary[\"strum\"].index;\n\t\t\t\t} else if (this.type == InstrumentType.chip) {\n\t\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\t} else if (this.type == InstrumentType.fm) {\n\t\t\t\t\tthis.chord = Config.chords.dictionary[\"custom interval\"].index;\n\t\t\t\t} else {\n\t\t\t\t\tthis.chord = Config.chords.dictionary[\"simultaneous\"].index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.unison = Config.unisons.dictionary[\"none\"].index; // default value.\n\t\tconst unisonProperty: any = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\n\t\tif (unisonProperty != undefined) {\n\t\t\tconst legacyChorusNames: Dictionary<string> = {\"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\"};\n\t\t\tconst unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n\t\t\tif (unison != undefined) this.unison = unison.index;\n\t\t}\n\t\tif (instrumentObject[\"chorus\"] == \"custom harmony\") {\n\t\t\t// The original chorus setting had an option that now maps to two different settings. Override those if necessary.\n\t\t\tthis.unison = Config.unisons.dictionary[\"hum\"].index;\n\t\t\tthis.chord = Config.chords.dictionary[\"custom interval\"].index;\n\t\t}\n\t\tif (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\n\t\t\t// Enable chord if it was used.\n\t\t\tthis.effects = (this.effects | (1 << EffectType.chord));\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n\t\t\tthis.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n\t\t}\n\t\tif (instrumentObject[\"detuneCents\"] != undefined) {\n\t\t\tthis.detune = clamp(0, Config.detuneMax + 1, Math.round(Config.detuneCenter + Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\n\t\t}\n\t\t\n\t\tthis.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\n\t\tconst vibratoProperty: any = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\n\t\tif (vibratoProperty != undefined) {\n\t\t\tconst legacyVibratoNames: Dictionary<string> = {\"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\"};\n\t\t\tconst vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n\t\t\tif (vibrato != undefined) this.vibrato = vibrato.index;\n\t\t\t\n\t\t\t// Old songs may have a vibrato effect without explicitly enabling it.\n\t\t\tif (vibrato != Config.vibratos.dictionary[\"none\"]) {\n\t\t\t\tthis.effects = (this.effects | (1 << EffectType.vibrato));\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"pan\"] != undefined) {\n\t\t\tthis.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\n\t\t\t\n\t\t\t// Old songs may have a panning effect without explicitly enabling it.\n\t\t\tif (this.pan != Config.panCenter) {\n\t\t\t\tthis.effects = (this.effects | (1 << EffectType.panning));\n\t\t\t}\n\t\t} else {\n\t\t\tthis.pan = Config.panCenter;\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"distortion\"] != undefined) {\n\t\t\tthis.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"bitcrusherOctave\"] != undefined) {\n\t\t\tthis.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\n\t\t}\n\t\tif (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\n\t\t\tthis.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"echoSustain\"] != undefined) {\n\t\t\tthis.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\n\t\t}\n\t\tif (instrumentObject[\"echoDelayBeats\"] != undefined) {\n\t\t\tthis.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\n\t\t}\n\t\t\n\t\tif (!isNaN(instrumentObject[\"chorus\"])) {\n\t\t\tthis.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"reverb\"] != undefined) {\n\t\t\tthis.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\n\t\t} else {\n\t\t\tif (legacyGlobalReverb == 0) {\n\t\t\t\t// If the original song reverb was zero, just disable the instrument reverb effect entirely.\n\t\t\t\tthis.effects = (this.effects & (~(1 << EffectType.reverb)));\n\t\t\t} else {\n\t\t\t\tthis.reverb = legacyGlobalReverb;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"pulseWidth\"] != undefined) {\n\t\t\tthis.pulseWidth = clamp(0, Config.pulseWidthRange, Math.round(Math.log2((+instrumentObject[\"pulseWidth\"]) / 50) / 0.5 - 1 + 8));\n\t\t} else {\n\t\t\tthis.pulseWidth = Config.pulseWidthRange - 1;\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"harmonics\"] != undefined) {\n\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n\t\t\t\tthis.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n\t\t\t}\n\t\t} else {\n\t\t\tthis.harmonicsWave.reset();\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"spectrum\"] != undefined) {\n\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\t\tthis.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n\t\t\t}\n\t\t} else {\n\t\t\tthis.spectrumWave.reset(isNoiseChannel);\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"stringSustain\"] != undefined) {\n\t\t\tthis.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.stringSustain = 10;\n\t\t}\n\t\t\n\t\tif (this.type == InstrumentType.noise) {\n\t\t\tthis.chipNoise = Config.chipNoises.findIndex(wave=>wave.name==instrumentObject[\"wave\"]);\n\t\t\tif (this.chipNoise == -1) this.chipNoise = 1;\n\t\t}\n\t\t\n\t\tconst legacyEnvelopeNames: Dictionary<string> = {\"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\"};\n\t\tconst getEnvelope = (name: any): Envelope | undefined => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];\n\t\t\n\t\tif (this.type == InstrumentType.drumset) {\n\t\t\tif (instrumentObject[\"drums\"] != undefined) {\n\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\n\t\t\t\t\tconst drum: any = instrumentObject[\"drums\"][j];\n\t\t\t\t\tif (drum == undefined) continue;\n\t\t\t\t\t\n\t\t\t\t\tthis.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\n\t\t\t\t\tif (drum[\"filterEnvelope\"] != undefined) {\n\t\t\t\t\t\tconst envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\n\t\t\t\t\t\tif (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\n\t\t\t\t\t}\n\t\t\t\t\tif (drum[\"spectrum\"] != undefined) {\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\t\t\t\t\tthis.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.type == InstrumentType.chip) {\n\t\t\tconst legacyWaveNames: Dictionary<number> = {\"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0};\n\t\t\tthis.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave=>wave.name==instrumentObject[\"wave\"]);\n\t\t\tif (this.chipWave == -1) this.chipWave = 1;\n\t\t}\n\t\t\n\t\tif (this.type == InstrumentType.fm) {\n\t\t\tthis.algorithm = Config.algorithms.findIndex(algorithm=>algorithm.name==instrumentObject[\"algorithm\"]);\n\t\t\tif (this.algorithm == -1) this.algorithm = 0;\n\t\t\tthis.feedbackType = Config.feedbacks.findIndex(feedback=>feedback.name==instrumentObject[\"feedbackType\"]);\n\t\t\tif (this.feedbackType == -1) this.feedbackType = 0;\n\t\t\tif (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n\t\t\t\tthis.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n\t\t\t} else {\n\t\t\t\tthis.feedbackAmplitude = 0;\n\t\t\t}\n\t\t\t\n\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\n\t\t\t\tconst operator: Operator = this.operators[j];\n\t\t\t\tlet operatorObject: any = undefined;\n\t\t\t\tif (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\n\t\t\t\tif (operatorObject == undefined) operatorObject = {};\n\t\t\t\t\n\t\t\t\toperator.frequency = Config.operatorFrequencies.findIndex(freq=>freq.name==operatorObject[\"frequency\"]);\n\t\t\t\tif (operator.frequency == -1) operator.frequency = 0;\n\t\t\t\tif (operatorObject[\"amplitude\"] != undefined) {\n\t\t\t\t\toperator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n\t\t\t\t} else {\n\t\t\t\t\toperator.amplitude = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (instrumentObject[\"noteFilter\"] != undefined) {\n\t\t\tthis.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n\t\t} else {\n\t\t\tthis.noteFilter.reset();\n\t\t}\n\t\tif (Array.isArray(instrumentObject[\"eqFilter\"])) {\n\t\t\tthis.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\n\t\t} else {\n\t\t\tthis.eqFilter.reset();\n\t\t\t\n\t\t\tconst legacySettings: LegacySettings = {};\n\t\t\t\n\t\t\t// Try converting from legacy filter settings.\n\t\t\tconst filterCutoffMaxHz: number = 8000;\n\t\t\tconst filterCutoffRange: number = 11;\n\t\t\tconst filterResonanceRange: number = 8;\n\t\t\tif (instrumentObject[\"filterCutoffHz\"] != undefined) {\n\t\t\t\tlegacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n\t\t\t} else {\n\t\t\t\tlegacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\n\t\t\t}\n\t\t\tif (instrumentObject[\"filterResonance\"] != undefined) {\n\t\t\t\tlegacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n\t\t\t} else {\n\t\t\t\tlegacySettings.filterResonance = 0;\n\t\t\t}\n\t\t\t\n\t\t\tlegacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n\t\t\tlegacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n\t\t\tlegacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n\t\t\tif (Array.isArray(instrumentObject[\"operators\"])) {\n\t\t\t\tlegacySettings.operatorEnvelopes = [];\n\t\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\n\t\t\t\t\tlet envelope: Envelope | undefined;\n\t\t\t\t\tif (instrumentObject[\"operators\"][j] != undefined) {\n\t\t\t\t\t\tenvelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n\t\t\t\t\t}\n\t\t\t\t\tlegacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Try converting from even older legacy filter settings.\n\t\t\tif (instrumentObject[\"filter\"] != undefined) {\n\t\t\t\tconst legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n\t\t\t\tconst legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n\t\t\t\tconst filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n\t\t\t\tconst oldFilterNames: Dictionary<number> = {\"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4};\n\t\t\t\tlet legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n\t\t\t\tif (legacyFilter == -1) legacyFilter = 0;\n\t\t\t\tlegacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n\t\t\t\tlegacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n\t\t\t\tlegacySettings.filterResonance = 0;\n\t\t\t}\n\t\t\t\n\t\t\tthis.convertLegacySettings(legacySettings);\n\t\t}\n\t\t\n\t\tif (Array.isArray(instrumentObject[\"envelopes\"])) {\n\t\t\tconst envelopeArray: any[] = instrumentObject[\"envelopes\"];\n\t\t\tfor (let i = 0; i < envelopeArray.length; i++) {\n\t\t\t\tif (this.envelopeCount >= Config.maxEnvelopeCount) break;\n\t\t\t\tconst tempEnvelope: EnvelopeSettings = new EnvelopeSettings();\n\t\t\t\ttempEnvelope.fromJsonObject(envelopeArray[i]);\n\t\t\t\tthis.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static frequencyFromPitch(pitch: number): number {\n\t\treturn 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\n\t}\n\t\n\tpublic static drumsetIndexReferenceDelta(index: number): number {\n\t\treturn Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\n\t}\n\t\n\tprivate static _drumsetIndexToSpectrumOctave(index: number) {\n\t\treturn 15 + Math.log2(Instrument.drumsetIndexReferenceDelta(index));\n\t}\n\t\n\tpublic addEnvelope(target: number, index: number, envelope: number): void {\n\t\tif (!this.supportsEnvelopeTarget(target, index)) throw new Error();\n\t\tif (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\n\t\twhile (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings();\n\t\tconst envelopeSettings: EnvelopeSettings = this.envelopes[this.envelopeCount];\n\t\tenvelopeSettings.target = target;\n\t\tenvelopeSettings.index = index;\n\t\tenvelopeSettings.envelope = envelope;\n\t\tthis.envelopeCount++;\n\t}\n\t\n\tpublic supportsEnvelopeTarget(target: number, index: number): boolean {\n\t\tconst automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\n\t\tif (index >= automationTarget.maxCount) {\n\t\t\treturn false;\n\t\t}\n\t\tif (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (automationTarget.isFilter) {\n\t\t\t//if (automationTarget.perNote) {\n\t\t\t\tif (index >= this.noteFilter.controlPointCount) return false;\n\t\t\t//} else {\n\t\t\t//\tif (index >= this.eqFilter.controlPointCount)   return false;\n\t\t\t//}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tpublic clearInvalidEnvelopeTargets(): void {\n\t\tfor (let envelopeIndex: number = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n\t\t\tconst target: number = this.envelopes[envelopeIndex].target;\n\t\t\tconst index: number = this.envelopes[envelopeIndex].index;\n\t\t\tif (!this.supportsEnvelopeTarget(target, index)) {\n\t\t\t\tthis.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n\t\t\t\tthis.envelopes[envelopeIndex].index = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic warmUp(samplesPerSecond: number): void {\n\t\tif (this.type == InstrumentType.noise) {\n\t\t\tgetDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n\t\t} else if (this.type == InstrumentType.harmonics) {\n\t\t\tthis.harmonicsWave.getCustomWave(this.type);\n\t\t} else if (this.type == InstrumentType.pickedString) {\n\t\t\tthis.harmonicsWave.getCustomWave(this.type);\n\t\t} else if (this.type == InstrumentType.spectrum) {\n\t\t\tthis.spectrumWave.getCustomWave(8);\n\t\t} else if (this.type == InstrumentType.drumset) {\n\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\n\t\t\t\tthis.drumsetSpectrumWaves[i].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(i));\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic getDrumWave(): Float32Array {\n\t\tif (this.type == InstrumentType.noise) {\n\t\t\treturn getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n\t\t} else if (this.type == InstrumentType.spectrum) {\n\t\t\treturn this.spectrumWave.getCustomWave(8);\n\t\t} else {\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumWave\");\n\t\t}\n\t}\n\t\n\tpublic getDrumsetWave(pitch: number): Float32Array {\n\t\tif (this.type == InstrumentType.drumset) {\n\t\t\treturn this.drumsetSpectrumWaves[pitch].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(pitch));\n\t\t} else {\n\t\t\tthrow new Error(\"Unhandled instrument type in getDrumsetWave\");\n\t\t}\n\t}\n\t\n\tpublic getTransition(): Transition {\n\t\treturn effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] : Config.transitions.dictionary[\"normal\"];\n\t}\n\t\n\tpublic getFadeInSeconds(): number {\n\t\treturn (this.type == InstrumentType.drumset) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\n\t}\n\t\n\tpublic getFadeOutTicks(): number {\n\t\treturn (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut)\n\t}\n\t\n\tpublic getChord(): Chord {\n\t\treturn effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n\t}\n\t\n\tpublic getDrumsetEnvelope(pitch: number): Envelope {\n\t\tif (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n\t\treturn Config.envelopes[this.drumsetEnvelopes[pitch]];\n\t}\n}\n\nexport class Channel {\n\tpublic octave: number = 0;\n\tpublic readonly instruments: Instrument[] = [];\n\tpublic readonly patterns: Pattern[] = [];\n\tpublic readonly bars: number[] = [];\n\tpublic muted: boolean = false;\n}\n\nexport class Song {\n\tprivate static readonly _format: string = \"BeepBox\";\n\tprivate static readonly _oldestVersion: number = 2;\n\tprivate static readonly _latestVersion: number = 9;\n\t\n\tpublic scale: number;\n\tpublic key: number;\n\tpublic tempo: number;\n\tpublic beatsPerBar: number;\n\tpublic barCount: number;\n\tpublic patternsPerChannel: number;\n\tpublic rhythm: number;\n\tpublic layeredInstruments: boolean;\n\tpublic patternInstruments: boolean;\n\tpublic loopStart: number;\n\tpublic loopLength: number;\n\tpublic pitchChannelCount: number;\n\tpublic noiseChannelCount: number;\n\tpublic readonly channels: Channel[] = [];\n\t\n\tconstructor(string?: string) {\n\t\tif (string != undefined) {\n\t\t\tthis.fromBase64String(string);\n\t\t} else {\n\t\t\tthis.initToDefault(true);\n\t\t}\n\t}\n\t\n\tpublic getChannelCount(): number {\n\t\treturn this.pitchChannelCount + this.noiseChannelCount;\n\t}\n\t\n\tpublic getMaxInstrumentsPerChannel(): number {\n\t\treturn Math.max(\n\t\t\tthis.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\n\t\t\tthis.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n\t}\n\t\n\tpublic getMaxInstrumentsPerPattern(channelIndex: number): number {\n\t\treturn this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n\t}\n\t\n\tpublic getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\n\t\treturn this.layeredInstruments\n\t\t\t? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n\t\t\t: 1;\n\t}\n\t\n\tpublic getChannelIsNoise(channelIndex: number): boolean {\n\t\treturn (channelIndex >= this.pitchChannelCount);\n\t}\n\t\n\tpublic initToDefault(andResetChannels: boolean = true): void {\n\t\tthis.scale = 0;\n\t\tthis.key = 0;\n\t\tthis.loopStart = 0;\n\t\tthis.loopLength = 4;\n\t\tthis.tempo = 150;\n\t\tthis.beatsPerBar = 8;\n\t\tthis.barCount = 16;\n\t\tthis.patternsPerChannel = 8;\n\t\tthis.rhythm = 1;\n\t\tthis.layeredInstruments = false;\n\t\tthis.patternInstruments = false;\n\t\t\n\t\tif (andResetChannels) {\n\t\t\tthis.pitchChannelCount = 3;\n\t\t\tthis.noiseChannelCount = 1;\n\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\tconst isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount;\n\t\t\t\tif (this.channels.length <= channelIndex) {\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\n\t\t\t\t}\n\t\t\t\tconst channel: Channel = this.channels[channelIndex];\n\t\t\t\tchannel.octave = isNoiseChannel ? 0 : 4 - channelIndex; // [4, 3, 2, 0]: Descending octaves with drums at zero in last channel.\n\t\t\t\n\t\t\t\tfor (let pattern: number = 0; pattern < this.patternsPerChannel; pattern++) {\n\t\t\t\t\tif (channel.patterns.length <= pattern) {\n\t\t\t\t\t\tchannel.patterns[pattern] = new Pattern();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchannel.patterns[pattern].reset();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\n\t\t\t\n\t\t\t\tfor (let instrument: number = 0; instrument < Config.instrumentCountMin; instrument++) {\n\t\t\t\t\tif (channel.instruments.length <= instrument) {\n\t\t\t\t\t\tchannel.instruments[instrument] = new Instrument(isNoiseChannel);\n\t\t\t\t\t}\n\t\t\t\t\tchannel.instruments[instrument].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel);\n\t\t\t\t}\n\t\t\t\tchannel.instruments.length = Config.instrumentCountMin;\n\t\t\t\n\t\t\t\tfor (let bar: number = 0; bar < this.barCount; bar++) {\n\t\t\t\t\tchannel.bars[bar] = bar < 4 ? 1 : 0;\n\t\t\t\t}\n\t\t\t\tchannel.bars.length = this.barCount;\n\t\t\t}\n\t\t\tthis.channels.length = this.getChannelCount();\n\t\t}\n\t}\n\t\n\tpublic toBase64String(): string {\n\t\tlet bits: BitFieldWriter;\n\t\tlet buffer: number[] = [];\n\t\t\n\t\tbuffer.push(base64IntToCharCode[Song._latestVersion]);\n\t\tbuffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount]);\n\t\tbuffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\n\t\tbuffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\n\t\tbuffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n\t\tbuffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n\t\tbuffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 63]);\n\t\tbuffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\n\t\tbuffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n\t\tbuffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n\t\tbuffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\n\t\t\n\t\tbuffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\n\t\tif (this.layeredInstruments || this.patternInstruments) {\n\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\tbuffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tbuffer.push(SongTagCode.channelOctave);\n\t\tfor (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n\t\t\tbuffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n\t\t}\n\t\t\n\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\tfor (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n\t\t\t\tconst instrument: Instrument = this.channels[channelIndex].instruments[i];\n\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\n\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\n\t\t\t\tbuffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n\t\t\t\t\n\t\t\t\tbuffer.push(SongTagCode.eqFilter, base64IntToCharCode[instrument.eqFilter.controlPointCount]);\n\t\t\t\tfor (let j: number = 0; j < instrument.eqFilter.controlPointCount; j++) {\n\t\t\t\t\tconst point: FilterControlPoint = instrument.eqFilter.controlPoints[j];\n\t\t\t\t\tbuffer.push(base64IntToCharCode[point.type], base64IntToCharCode[point.freq], base64IntToCharCode[point.gain]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// The list of enabled effects is represented as a 12-bit bitfield using two six-bit characters.\n\t\t\t\tbuffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects >> 6], base64IntToCharCode[instrument.effects & 63]);\n\t\t\t\tif (effectsIncludeNoteFilter(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n\t\t\t\t\tfor (let j: number = 0; j < instrument.noteFilter.controlPointCount; j++) {\n\t\t\t\t\t\tconst point: FilterControlPoint = instrument.noteFilter.controlPoints[j];\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[point.type], base64IntToCharCode[point.freq], base64IntToCharCode[point.gain]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeTransition(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.transition]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeChord(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.chord]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludePitchShift(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.pitchShift]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeDetune(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.detune]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeVibrato(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.vibrato]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeDistortion(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.distortion]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeBitcrusher(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludePanning(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.pan]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeChorus(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.chorus]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeEcho(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\n\t\t\t\t}\n\t\t\t\tif (effectsIncludeReverb(instrument.effects)) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.reverb]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (instrument.type != InstrumentType.drumset) {\n\t\t\t\t\tbuffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n\t\t\t\t\tbuffer.push(SongTagCode.harmonics);\n\t\t\t\t\tconst harmonicsBits: BitFieldWriter = new BitFieldWriter();\n\t\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n\t\t\t\t\t\tharmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n\t\t\t\t\t}\n\t\t\t\t\tharmonicsBits.encodeBase64(buffer);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (instrument.type == InstrumentType.chip) {\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\n\t\t\t\t\tbuffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\n\t\t\t\t\tbuffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\n\t\t\t\t\tbuffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\n\t\t\t\t\t\n\t\t\t\t\tbuffer.push(SongTagCode.operatorFrequencies);\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n\t\t\t\t\t}\n\t\t\t\t\tbuffer.push(SongTagCode.operatorAmplitudes);\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n\t\t\t\t\t}\n\t\t\t\t} else if (instrument.type == InstrumentType.noise) {\n\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\n\t\t\t\t} else if (instrument.type == InstrumentType.spectrum) {\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n\t\t\t\t\t}\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\n\t\t\t\t\tbuffer.push(SongTagCode.drumsetEnvelopes);\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbuffer.push(SongTagCode.spectrum);\n\t\t\t\t\tconst spectrumBits: BitFieldWriter = new BitFieldWriter();\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\t\t\t\t\tspectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tspectrumBits.encodeBase64(buffer);\n\t\t\t\t} else if (instrument.type == InstrumentType.harmonics) {\n\t\t\t\t\tbuffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n\t\t\t\t} else if (instrument.type == InstrumentType.pickedString) {\n\t\t\t\t\tbuffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n\t\t\t\t\tbuffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbuffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\n\t\t\t\tfor (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n\t\t\t\t\tif (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n\t\t\t\t\t}\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tbuffer.push(SongTagCode.bars);\n\t\tbits = new BitFieldWriter();\n\t\tlet neededBits: number = 0;\n\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i: number = 0; i < this.barCount; i++) {\n\t\t\tbits.write(neededBits, this.channels[channelIndex].bars[i]);\n\t\t}\n\t\tbits.encodeBase64(buffer);\n\t\t\n\t\tbuffer.push(SongTagCode.patterns);\n\t\tbits = new BitFieldWriter();\n\t\tconst shapeBits: BitFieldWriter = new BitFieldWriter();\n\t\tconst bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\tconst channel: Channel = this.channels[channelIndex];\n\t\t\tconst maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n\t\t\tconst neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n\t\t\tconst neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n\t\t\tconst octaveOffset: number = isNoiseChannel ? 0 : channel.octave * Config.pitchesPerOctave;\n\t\t\tlet lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\n\t\t\tconst recentPitches: number[] = isNoiseChannel ? [4,6,7,2,3,8,0,10] : [0, 7, 12, 19, 24, -5, -12];\n\t\t\tconst recentShapes: string[] = [];\n\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\n\t\t\t\trecentPitches[i] += octaveOffset;\n\t\t\t}\n\t\t\tfor (const pattern of channel.patterns) {\n\t\t\t\tif (this.patternInstruments) {\n\t\t\t\t\tconst instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n\t\t\t\t\tbits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n\t\t\t\t\tfor (let i: number = 0; i < instrumentCount; i++) {\n\t\t\t\t\t\tbits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pattern.notes.length > 0) {\n\t\t\t\t\tbits.write(1, 1);\n\t\t\t\t\t\n\t\t\t\t\tlet curPart: number = 0;\n\t\t\t\t\tfor (const note of pattern.notes) {\n\t\t\t\t\t\tif (note.start > curPart) {\n\t\t\t\t\t\t\tbits.write(2, 0); // rest\n\t\t\t\t\t\t\tbits.writePartDuration(note.start - curPart);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tshapeBits.clear();\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\n\t\t\t\t\t\tfor (let i: number = 1; i < note.pitches.length; i++) shapeBits.write(1,1);\n\t\t\t\t\t\tif (note.pitches.length < Config.maxChordSize) shapeBits.write(1,0);\n\t\t\t\t\t\t\n\t\t\t\t\t\tshapeBits.writePinCount(note.pins.length - 1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tshapeBits.write(bitsPerNoteSize, note.pins[0].size);\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet shapePart: number = 0;\n\t\t\t\t\t\tlet startPitch: number = note.pitches[0];\n\t\t\t\t\t\tlet currentPitch: number = startPitch;\n\t\t\t\t\t\tconst pitchBends: number[] = [];\n\t\t\t\t\t\tfor (let i: number = 1; i < note.pins.length; i++) {\n\t\t\t\t\t\t\tconst pin: NotePin = note.pins[i];\n\t\t\t\t\t\t\tconst nextPitch: number = startPitch + pin.interval;\n\t\t\t\t\t\t\tif (currentPitch != nextPitch) {\n\t\t\t\t\t\t\t\tshapeBits.write(1, 1);\n\t\t\t\t\t\t\t\tpitchBends.push(nextPitch);\n\t\t\t\t\t\t\t\tcurrentPitch = nextPitch;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tshapeBits.write(1, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tshapeBits.writePartDuration(pin.time - shapePart);\n\t\t\t\t\t\t\tshapePart = pin.time;\n\t\t\t\t\t\t\tshapeBits.write(bitsPerNoteSize, pin.size);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n\t\t\t\t\t\tconst shapeIndex: number = recentShapes.indexOf(shapeString);\n\t\t\t\t\t\tif (shapeIndex == -1) {\n\t\t\t\t\t\t\tbits.write(2, 1); // new shape\n\t\t\t\t\t\t\tbits.concat(shapeBits);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbits.write(1, 1); // old shape\n\t\t\t\t\t\t\tbits.writeLongTail(0, 0, shapeIndex);\n\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trecentShapes.unshift(shapeString);\n\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst allPitches: number[] = note.pitches.concat(pitchBends);\n\t\t\t\t\t\tfor (let i: number = 0; i < allPitches.length; i++) {\n\t\t\t\t\t\t\tconst pitch: number = allPitches[i];\n\t\t\t\t\t\t\tconst pitchIndex: number = recentPitches.indexOf(pitch);\n\t\t\t\t\t\t\tif (pitchIndex == -1) {\n\t\t\t\t\t\t\t\tlet interval: number = 0;\n\t\t\t\t\t\t\t\tlet pitchIter: number = lastPitch;\n\t\t\t\t\t\t\t\tif (pitchIter < pitch) {\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\n\t\t\t\t\t\t\t\t\t\tpitchIter++;\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\n\t\t\t\t\t\t\t\t\t\tpitchIter--;\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval--;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbits.write(1, 0);\n\t\t\t\t\t\t\t\tbits.writePitchInterval(interval);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbits.write(1, 1);\n\t\t\t\t\t\t\t\tbits.write(3, pitchIndex);\n\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trecentPitches.unshift(pitch);\n\t\t\t\t\t\t\tif (recentPitches.length > 8) recentPitches.pop();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (i == note.pitches.length - 1) {\n\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlastPitch = pitch;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (note.start == 0) {\n\t\t\t\t\t\t\tbits.write(1, note.continuesLastPattern ? 1 : 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tcurPart = note.end;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (curPart < this.beatsPerBar * Config.partsPerBeat) {\n\t\t\t\t\t\tbits.write(2, 0); // rest\n\t\t\t\t\t\tbits.writePartDuration(this.beatsPerBar * Config.partsPerBeat - curPart);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbits.write(1, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet stringLength: number = bits.lengthBase64();\n\t\tlet digits: number[] = [];\n\t\twhile (stringLength > 0) {\n\t\t\tdigits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n\t\t\tstringLength = stringLength >> 6;\n\t\t}\n\t\tbuffer.push(base64IntToCharCode[digits.length]);\n\t\tArray.prototype.push.apply(buffer, digits); // append digits to buffer.\n\t\tbits.encodeBase64(buffer);\n\t\t\n\t\tconst maxApplyArgs: number = 64000;\n\t\tif (buffer.length < maxApplyArgs) {\n\t\t\t// Note: Function.apply may break for long argument lists. \n\t\t\treturn String.fromCharCode.apply(null, buffer);\n\t\t} else {\n\t\t\tlet result: string = \"\";\n\t\t\tfor (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\n\t\t\t\tresult += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\t\n\tprivate static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\n\t\t// I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\n\t\tif (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\n\t\treturn Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n\t}\n\t\n\tpublic fromBase64String(compressed: string): void {\n\t\tif (compressed == null || compressed == \"\") {\n\t\t\tthis.initToDefault(true);\n\t\t\treturn;\n\t\t}\n\t\tlet charIndex: number = 0;\n\t\t// skip whitespace.\n\t\twhile (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\n\t\t// skip hash mark.\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\n\t\t// if it starts with curly brace, treat it as JSON.\n\t\tif (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\n\t\t\tthis.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconst version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\tif (version == -1 || version > Song._latestVersion || version < Song._oldestVersion) return;\n\t\tconst beforeThree: boolean = version < 3;\n\t\tconst beforeFour:  boolean = version < 4;\n\t\tconst beforeFive:  boolean = version < 5;\n\t\tconst beforeSix:   boolean = version < 6;\n\t\tconst beforeSeven: boolean = version < 7;\n\t\tconst beforeEight: boolean = version < 8;\n\t\tconst beforeNine:  boolean = version < 9;\n\t\tthis.initToDefault(beforeNine);\n\t\t\n\t\tif (beforeThree) {\n\t\t\t// Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\n\t\t\tfor (const channel of this.channels) {\n\t\t\t\tchannel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n\t\t\t\tchannel.instruments[0].effects |= 1 << EffectType.transition;\n\t\t\t}\n\t\t\tthis.channels[3].instruments[0].chipNoise = 0;\n\t\t}\n\t\t\n\t\tlet legacySettingsCache: LegacySettings[][] | null = null;\n\t\tif (beforeNine) {\n\t\t\t// Unfortunately, old versions of BeepBox had a variety of different ways of saving\n\t\t\t// filter-and-envelope-related parameters in the URL, and none of them directly\n\t\t\t// correspond to the new way of saving these parameters. We can approximate the old\n\t\t\t// settings by collecting all the old settings for an instrument and passing them to\n\t\t\t// convertLegacySettings(), so I use this data structure to collect the settings\n\t\t\t// for each instrument if necessary.\n\t\t\tlegacySettingsCache = [];\n\t\t\tfor (let i: number = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n\t\t\t\tlegacySettingsCache[i] = [];\n\t\t\t\tfor (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet legacyGlobalReverb: number = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\n\t\t\n\t\tlet instrumentChannelIterator: number = 0;\n\t\tlet instrumentIndexIterator: number = -1;\n\t\tlet command: SongTagCode;\n\t\twhile (charIndex < compressed.length) switch(command = compressed.charCodeAt(charIndex++)) {\n\t\t\tcase SongTagCode.channelCount: {\n\t\t\t\tthis.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\tthis.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\tthis.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n\t\t\t\tthis.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n\t\t\t\tfor (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\tthis.channels[channelIndex] = new Channel();\n\t\t\t\t}\n\t\t\t\tthis.channels.length = this.getChannelCount();\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tfor (let i: number = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\n\t\t\t\t\t\tlegacySettingsCache![i] = [];\n\t\t\t\t\t\tfor (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.scale: {\n\t\t\t\tthis.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\tif (beforeThree && this.scale == 10) this.scale = 11;\n\t\t\t} break;\n\t\t\tcase SongTagCode.key: {\n\t\t\t\tif (beforeSeven) {\n\t\t\t\t\tthis.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.loopStart: {\n\t\t\t\tif (beforeFive) {\n\t\t\t\t\tthis.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t} else {\n\t\t\t\t\tthis.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.loopEnd: {\n\t\t\t\tif (beforeFive) {\n\t\t\t\t\tthis.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t} else {\n\t\t\t\t\tthis.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.tempo: {\n\t\t\t\tif (beforeFour) {\n\t\t\t\t\tthis.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n\t\t\t\t} else if (beforeSeven) {\n\t\t\t\t\tthis.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n\t\t\t\t} else {\n\t\t\t\t\tthis.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n\t\t\t} break;\n\t\t\tcase SongTagCode.reverb: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tlegacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tlegacyGlobalReverb = clamp(0, 4, legacyGlobalReverb);\n\t\t\t\t} else {\n\t\t\t\t\t// Do nothing? This song tag code is deprecated for now.\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.beatCount: {\n\t\t\t\tif (beforeThree) {\n\t\t\t\t\tthis.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n\t\t\t\t} else {\n\t\t\t\t\tthis.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n\t\t\t\t}\n\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n\t\t\t} break;\n\t\t\tcase SongTagCode.barCount: {\n\t\t\t\tconst barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n\t\t\t\tthis.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\tfor (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n\t\t\t\t\t\tthis.channels[channelIndex].bars[bar] = 1;\n\t\t\t\t\t}\n\t\t\t\t\tthis.channels[channelIndex].bars.length = this.barCount;\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.patternCount: {\n\t\t\t\tlet patternsPerChannel: number;\n\t\t\t\tif (beforeEight) {\n\t\t\t\t\tpatternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n\t\t\t\t} else {\n\t\t\t\t\tpatternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n\t\t\t\t}\n\t\t\t\tthis.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n\t\t\t\tconst channelCount: number = this.getChannelCount();\n\t\t\t\tfor (let channelIndex: number = 0; channelIndex < channelCount; channelIndex++) {\n\t\t\t\t\tconst patterns: Pattern[] = this.channels[channelIndex].patterns;\n\t\t\t\t\tfor (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n\t\t\t\t\t\tpatterns[pattern] = new Pattern();\n\t\t\t\t\t}\n\t\t\t\t\tpatterns.length = this.patternsPerChannel;\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.instrumentCount: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tconst instrumentsPerChannel: number = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n\t\t\t\t\tthis.layeredInstruments = false;\n\t\t\t\t\tthis.patternInstruments = (instrumentsPerChannel > 1);\n\t\t\t\t\t\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\tconst isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount;\n\t\t\t\t\t\tfor (let instrumentIndex: number = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n\t\t\t\t\t\t\tthis.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.channels[channelIndex].instruments.length = instrumentsPerChannel;\n\t\t\t\t\t\tif (beforeSix) {\n\t\t\t\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n\t\t\t\t\t\t\t\tthis.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (let j: number = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\n\t\t\t\t\t\t\tlegacySettingsCache![channelIndex][j] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst instrumentsFlagBits: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tthis.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n\t\t\t\t\tthis.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\tlet instrumentCount: number = 1;\n\t\t\t\t\t\tif (this.layeredInstruments || this.patternInstruments) {\n\t\t\t\t\t\t\tinstrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst channel: Channel = this.channels[channelIndex];\n\t\t\t\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n\t\t\t\t\t\tfor (let i: number = channel.instruments.length; i < instrumentCount; i++) {\n\t\t\t\t\t\t\tchannel.instruments[i] = new Instrument(isNoiseChannel);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchannel.instruments.length = instrumentCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.rhythm: {\n\t\t\t\tthis.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t} break;\n\t\t\tcase SongTagCode.channelOctave: {\n\t\t\t\tif (beforeThree) {\n\t\t\t\t\tconst channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tthis.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n\t\t\t\t\tif (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n\t\t\t\t} else if (beforeNine) {\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\tthis.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n\t\t\t\t\t\tif (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n\t\t\t\t\t\tthis.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.startInstrument: {\n\t\t\t\tinstrumentIndexIterator++;\n\t\t\t\tif (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n\t\t\t\t\tinstrumentChannelIterator++;\n\t\t\t\t\tinstrumentIndexIterator = 0;\n\t\t\t\t}\n\t\t\t\tvalidateRange(0, this.channels.length - 1, instrumentChannelIterator);\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tconst instrumentType: number = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\tinstrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount);\n\t\t\t\t\n\t\t\t\tif (beforeSeven) {\n\t\t\t\t\tinstrument.effects = 0;\n\t\t\t\t\t// the reverb effect was applied to all pitched instruments if nonzero but never explicitly enabled if beforeSeven, so enable it here.\n\t\t\t\t\tif (legacyGlobalReverb > 0 && !this.getChannelIsNoise(instrumentChannelIterator)) {\n\t\t\t\t\t\tinstrument.reverb = legacyGlobalReverb;\n\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.reverb;\n\t\t\t\t\t}\n\t\t\t\t\t// Chip/noise instruments had arpeggio and FM had custom interval but neither\n\t\t\t\t\t// explicitly saved the chorus setting beforeSeven so enable it here.\n\t\t\t\t\tif (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n\t\t\t\t\t\t// Enable chord if it was used.\n\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.chord;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.preset: {\n\t\t\t\tconst presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n\t\t\t} break;\n\t\t\tcase SongTagCode.wave: {\n\t\t\t\tif (beforeThree) {\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n\t\t\t\t\tconst channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tconst instrument: Instrument = this.channels[channelIndex].instruments[0];\n\t\t\t\t\tinstrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n\t\t\t\t\t\n\t\t\t\t\t// Version 2 didn't save any settings for settings for filters, or envelopes,\n\t\t\t\t\t// just waves, so initialize them here I guess.\n\t\t\t\t\tinstrument.convertLegacySettings(legacySettingsCache![channelIndex][0]);\n\t\t\t\t\t\n\t\t\t\t} else if (beforeSix) {\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\tfor (const instrument of this.channels[channelIndex].instruments) {\n\t\t\t\t\t\t\tif (channelIndex >= this.pitchChannelCount) {\n\t\t\t\t\t\t\t\tinstrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tinstrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (beforeSeven) {\n\t\t\t\t\tconst legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (instrumentChannelIterator >= this.pitchChannelCount) {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.eqFilter: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tif (beforeSeven) {\n\t\t\t\t\t\tconst legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n\t\t\t\t\t\tconst legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (beforeThree) {\n\t\t\t\t\t\t\tconst channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channelIndex].instruments[0];\n\t\t\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n\t\t\t\t\t\t\tconst legacyFilter: number = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n\t\t\t\t\t\t\tlegacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n\t\t\t\t\t\t\tlegacySettings.filterResonance = 0;\n\t\t\t\t\t\t\tlegacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n\t\t\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t\t\t} else if (beforeSix) {\n\t\t\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\t\t\tfor (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n\t\t\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channelIndex].instruments[i];\n\t\t\t\t\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n\t\t\t\t\t\t\t\t\tconst legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n\t\t\t\t\t\t\t\t\tif (channelIndex < this.pitchChannelCount) {\n\t\t\t\t\t\t\t\t\t\tlegacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n\t\t\t\t\t\t\t\t\t\tlegacySettings.filterResonance = 0;\n\t\t\t\t\t\t\t\t\t\tlegacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tlegacySettings.filterCutoff = 10;\n\t\t\t\t\t\t\t\t\t\tlegacySettings.filterResonance = 0;\n\t\t\t\t\t\t\t\t\t\tlegacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\t\t\tlegacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n\t\t\t\t\t\t\tlegacySettings.filterResonance = 0;\n\t\t\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst filterCutoffRange: number = 11;\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\t\tlegacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\tconst originalControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tinstrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n\t\t\t\t\tfor (let i: number = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\n\t\t\t\t\t\tinstrument.eqFilter.controlPoints[i] = new FilterControlPoint();\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i: number = 0; i < instrument.eqFilter.controlPointCount; i++) {\n\t\t\t\t\t\tconst point: FilterControlPoint = instrument.eqFilter.controlPoints[i];\n\t\t\t\t\t\tpoint.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tpoint.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tpoint.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i: number = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n\t\t\t\t\t\tcharIndex += 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.filterResonance: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tconst filterResonanceRange: number = 8;\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\tlegacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t} else {\n\t\t\t\t\t// Do nothing? This song tag code is deprecated for now.\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.drumsetEnvelopes: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tif (instrument.type == InstrumentType.drumset) {\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\n\t\t\t\t\t\t\tinstrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]).index;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This used to be used for general filter envelopes.\n\t\t\t\t\t\t// The presence of an envelope affects how convertLegacySettings\n\t\t\t\t\t\t// decides the closest possible approximation, so update it.\n\t\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\t\tlegacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// This tag is now only used for drumset filter envelopes.\n\t\t\t\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\n\t\t\t\t\t\tinstrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.pulseWidth: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tinstrument.pulseWidth = clamp(0, Config.pulseWidthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\tlegacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.stringSustain: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tinstrument.stringSustain = clamp(0, Config.stringSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t} break;\n\t\t\tcase SongTagCode.fadeInOut: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\t// this tag was used for a combination of transition and fade in/out.\n\t\t\t\t\tconst legacySettings = [\n\t\t\t\t\t\t{transition: \"interrupt\", fadeInSeconds: 0.0,    fadeOutTicks: -1},\n\t\t\t\t\t\t{transition: \"normal\",    fadeInSeconds: 0.0,    fadeOutTicks: -3},\n\t\t\t\t\t\t{transition: \"normal\",    fadeInSeconds: 0.025,  fadeOutTicks: -3},\n\t\t\t\t\t\t{transition: \"slide in pattern\", fadeInSeconds: 0.025,  fadeOutTicks: -3},\n\t\t\t\t\t\t{transition: \"normal\",    fadeInSeconds: 0.04,   fadeOutTicks:  6},\n\t\t\t\t\t\t{transition: \"normal\",    fadeInSeconds: 0.0,    fadeOutTicks: 48},\n\t\t\t\t\t\t{transition: \"normal\",    fadeInSeconds: 0.0125, fadeOutTicks: 72},\n\t\t\t\t\t\t{transition: \"normal\",    fadeInSeconds: 0.06,   fadeOutTicks: 96},\n\t\t\t\t\t];\n\t\t\t\t\tif (beforeThree) {\n\t\t\t\t\t\tconst channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\tconst settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[channelIndex].instruments[0];\n\t\t\t\t\t\tinstrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n\t\t\t\t\t\tinstrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n\t\t\t\t\t\tinstrument.transition = Config.transitions.dictionary[settings.transition].index;\n\t\t\t\t\t\tif (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n\t\t\t\t\t\t\t// Enable transition if it was used.\n\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.transition;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (beforeSix) {\n\t\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\t\tfor (const instrument of this.channels[channelIndex].instruments) {\n\t\t\t\t\t\t\t\tconst settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n\t\t\t\t\t\t\t\tinstrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n\t\t\t\t\t\t\t\tinstrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n\t\t\t\t\t\t\t\tinstrument.transition = Config.transitions.dictionary[settings.transition].index;\n\t\t\t\t\t\t\t\tif (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n\t\t\t\t\t\t\t\t\t// Enable transition if it was used.\n\t\t\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.transition;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\t\tinstrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n\t\t\t\t\t\tinstrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n\t\t\t\t\t\tinstrument.transition = Config.transitions.dictionary[settings.transition].index;\n\t\t\t\t\t\tif (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n\t\t\t\t\t\t\t// Enable transition if it was used.\n\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.transition;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\tinstrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\tinstrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.vibrato: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tif (beforeSeven) {\n\t\t\t\t\t\tif (beforeThree) {\n\t\t\t\t\t\t\tconst legacyEffects: number[] = [0, 3, 2, 0];\n\t\t\t\t\t\t\tconst legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\n\t\t\t\t\t\t\tconst channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channelIndex].instruments[0];\n\t\t\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n\t\t\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\n\t\t\t\t\t\t\tif (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n\t\t\t\t\t\t\t\t// Imitate the legacy tremolo with a filter envelope.\n\t\t\t\t\t\t\t\tlegacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n\t\t\t\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n\t\t\t\t\t\t\t\t// Enable vibrato if it was used.\n\t\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.vibrato;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (beforeSix) {\n\t\t\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n\t\t\t\t\t\t\tconst legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n\t\t\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\t\t\tfor (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n\t\t\t\t\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[channelIndex].instruments[i];\n\t\t\t\t\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n\t\t\t\t\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\n\t\t\t\t\t\t\t\t\tif (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n\t\t\t\t\t\t\t\t\t\t// Imitate the legacy tremolo with a filter envelope.\n\t\t\t\t\t\t\t\t\t\tlegacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n\t\t\t\t\t\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n\t\t\t\t\t\t\t\t\t\t// Enable vibrato if it was used.\n\t\t\t\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.vibrato;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (legacyGlobalReverb != 0 && !this.getChannelIsNoise(channelIndex)) {\n\t\t\t\t\t\t\t\t\t\t// Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n\t\t\t\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.reverb;\n\t\t\t\t\t\t\t\t\t\tinstrument.reverb = legacyGlobalReverb;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n\t\t\t\t\t\t\tconst legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n\t\t\t\t\t\t\tconst effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\t\t\tinstrument.vibrato = legacyEffects[effect];\n\t\t\t\t\t\t\tif (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n\t\t\t\t\t\t\t\t// Imitate the legacy tremolo with a filter envelope.\n\t\t\t\t\t\t\t\tlegacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n\t\t\t\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n\t\t\t\t\t\t\t\t// Enable vibrato if it was used.\n\t\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.vibrato;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (legacyGlobalReverb != 0) {\n\t\t\t\t\t\t\t\t// Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n\t\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.reverb;\n\t\t\t\t\t\t\t\tinstrument.reverb = legacyGlobalReverb;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\t\tconst vibrato: number = clamp(0, Config.vibratos.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tinstrument.vibrato = vibrato;\n\t\t\t\t\t\tif (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n\t\t\t\t\t\t\t// Enable vibrato if it was used.\n\t\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.vibrato;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Do nothing? This song tag code is deprecated for now.\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.unison: {\n\t\t\t\tif (beforeThree) {\n\t\t\t\t\tconst channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tthis.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t} else if (beforeSix) {\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\tfor (const instrument of this.channels[channelIndex].instruments) {\n\t\t\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\t\tlet unison: number = clamp(0, Config.unisons.length, originalValue);\n\t\t\t\t\t\t\tif (originalValue == 8) {\n\t\t\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n\t\t\t\t\t\t\t\tunison = 2;\n\t\t\t\t\t\t\t\tinstrument.chord = 3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinstrument.unison = unison;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (beforeSeven) {\n\t\t\t\t\tconst originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tlet unison: number = clamp(0, Config.unisons.length, originalValue);\n\t\t\t\t\tif (originalValue == 8) {\n\t\t\t\t\t\t// original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n\t\t\t\t\t\tunison = 2;\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\n\t\t\t\t\t}\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;\n\t\t\t\t} else {\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.chord: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\tinstrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\tif (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n\t\t\t\t\t\t// Enable chord if it was used.\n\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.chord;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Do nothing? This song tag code is deprecated for now.\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.effects: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tinstrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\n\t\t\t\t\tif (legacyGlobalReverb == 0) {\n\t\t\t\t\t\t// Disable reverb if legacy song reverb was zero.\n\t\t\t\t\t\tinstrument.effects &= ~(1 << EffectType.reverb);\n\t\t\t\t\t} else if (effectsIncludeReverb(instrument.effects)) {\n\t\t\t\t\t\tinstrument.reverb = legacyGlobalReverb;\n\t\t\t\t\t}\n\t\t\t\t\tif (instrument.pan != Config.panCenter) {\n\t\t\t\t\t\t// Enable panning if panning slider isn't centered.\n\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.panning;\n\t\t\t\t\t}\n\t\t\t\t\tif (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n\t\t\t\t\t\t// Enable vibrato if it was used.\n\t\t\t\t\t\tinstrument.effects |= 1 << EffectType.panning;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// convertLegacySettings may need to force-enable note filter, call\n\t\t\t\t\t// it again here to make sure that this override takes precedence.\n\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t} else {\n\t\t\t\t\t// BeepBox currently uses two base64 characters at 6 bits each for a bitfield representing all the enabled effects.\n\t\t\t\t\tif (EffectType.length > 12) throw new Error();\n\t\t\t\t\tinstrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\n\t\t\t\t\tif (effectsIncludeNoteFilter(instrument.effects)) {\n\t\t\t\t\t\tconst originalControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\tinstrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n\t\t\t\t\t\tfor (let i: number = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n\t\t\t\t\t\t\tinstrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i: number = 0; i < instrument.noteFilter.controlPointCount; i++) {\n\t\t\t\t\t\t\tconst point: FilterControlPoint = instrument.noteFilter.controlPoints[i];\n\t\t\t\t\t\t\tpoint.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t\tpoint.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t\tpoint.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i: number = instrument.noteFilter.controlPointCount; i < originalControlPointCount; i++) {\n\t\t\t\t\t\t\tcharIndex += 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeTransition(instrument.effects)) {\n\t\t\t\t\t\tinstrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeChord(instrument.effects)) {\n\t\t\t\t\t\tinstrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludePitchShift(instrument.effects)) {\n\t\t\t\t\t\tinstrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeDetune(instrument.effects)) {\n\t\t\t\t\t\tinstrument.detune = clamp(0, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeVibrato(instrument.effects)) {\n\t\t\t\t\t\tinstrument.vibrato = clamp(0, Config.vibratos.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeDistortion(instrument.effects)) {\n\t\t\t\t\t\tinstrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeBitcrusher(instrument.effects)) {\n\t\t\t\t\t\tinstrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tinstrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludePanning(instrument.effects)) {\n\t\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeChorus(instrument.effects)) {\n\t\t\t\t\t\tinstrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeEcho(instrument.effects)) {\n\t\t\t\t\t\tinstrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tinstrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tif (effectsIncludeReverb(instrument.effects)) {\n\t\t\t\t\t\tinstrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Clamp the range.\n\t\t\t\tinstrument.effects &= (1 << EffectType.length) - 1;\n\t\t\t} break;\n\t\t\tcase SongTagCode.volume: {\n\t\t\t\tif (beforeThree) {\n\t\t\t\t\tconst channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tconst instrument: Instrument = this.channels[channelIndex].instruments[0];\n\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t// legacy mute value:\n\t\t\t\t\tif (instrument.volume == 5) instrument.volume = Config.volumeRange - 1;\n\t\t\t\t} else if (beforeSix) {\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\tfor (const instrument of this.channels[channelIndex].instruments) {\n\t\t\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t\t// legacy mute value:\n\t\t\t\t\t\t\tif (instrument.volume == 5) instrument.volume = Config.volumeRange - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (beforeSeven) {\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t// legacy mute value:\n\t\t\t\t\tif (instrument.volume == 5) instrument.volume = Config.volumeRange - 1;\n\t\t\t\t} else {\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.pan: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\tinstrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t} else {\n\t\t\t\t\t// Do nothing? This song tag code is deprecated for now.\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.algorithm: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tinstrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\t// The algorithm determines the carrier count, which affects how legacy settings are imported.\n\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.feedbackType: {\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t} break;\n\t\t\tcase SongTagCode.feedbackAmplitude: {\n\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t} break;\n\t\t\tcase SongTagCode.feedbackEnvelope: {\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\tlegacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t} else {\n\t\t\t\t\t// Do nothing? This song tag code is deprecated for now.\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.operatorFrequencies: {\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.operatorAmplitudes: {\n\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.envelopes: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tif (beforeNine) {\n\t\t\t\t\tconst legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\t\t\t\t\tlegacySettings.operatorEnvelopes = [];\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\n\t\t\t\t\t\tlegacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t}\n\t\t\t\t\tinstrument.convertLegacySettings(legacySettings);\n\t\t\t\t} else {\n\t\t\t\t\tconst envelopeCount: number = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\tfor (let i: number = 0; i < envelopeCount; i++) {\n\t\t\t\t\t\tconst target: number = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tlet index: number = 0;\n\t\t\t\t\t\tconst maxCount: number = Config.instrumentAutomationTargets[target].maxCount;\n\t\t\t\t\t\tif (maxCount > 1) {\n\t\t\t\t\t\t\tindex = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst envelope: number = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\t\tinstrument.addEnvelope(target, index, envelope);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.spectrum: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tif (instrument.type == InstrumentType.spectrum) {\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\t\t\t\tinstrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n\t\t\t\t\t}\n\t\t\t\t\tinstrument.spectrumWave.markCustomWaveDirty();\n\t\t\t\t\tcharIndex += byteCount;\n\t\t\t\t} else if (instrument.type == InstrumentType.drumset) {\n\t\t\t\t\tconst byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n\t\t\t\t\tfor (let j: number = 0; j < Config.drumCount; j++) {\n\t\t\t\t\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinstrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n\t\t\t\t\t}\n\t\t\t\t\tcharIndex += byteCount;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Unhandled instrument type for spectrum song tag code.\");\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase SongTagCode.harmonics: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tconst byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n\t\t\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n\t\t\t\t\tinstrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n\t\t\t\t}\n\t\t\t\tinstrument.harmonicsWave.markCustomWaveDirty();\n\t\t\t\tcharIndex += byteCount;\n\t\t\t} break;\n\t\t\tcase SongTagCode.bars: {\n\t\t\t\tlet subStringLength: number;\n\t\t\t\tif (beforeThree) {\n\t\t\t\t\tconst channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tconst barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tsubStringLength = Math.ceil(barCount * 0.5);\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n\t\t\t\t\tfor (let i: number = 0; i < barCount; i++) {\n\t\t\t\t\t\tthis.channels[channelIndex].bars[i] = bits.read(3) + 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (beforeFive) {\n\t\t\t\t\tlet neededBits: number = 0;\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel) neededBits++;\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\n\t\t\t\t\t\t\tthis.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet neededBits: number = 0;\n\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n\t\t\t\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\n\t\t\t\t\t\t\tthis.channels[channelIndex].bars[i] = bits.read(neededBits);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcharIndex += subStringLength;\n\t\t\t} break;\n\t\t\tcase SongTagCode.patterns: {\n\t\t\t\tlet bitStringLength: number = 0;\n\t\t\t\tlet channelIndex: number;\n\t\t\t\tif (beforeThree) {\n\t\t\t\t\tchannelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\n\t\t\t\t\t// The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \n\t\t\t\t\tcharIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\n\t\t\t\t\tbitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tbitStringLength = bitStringLength << 6;\n\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t} else {\n\t\t\t\t\tchannelIndex = 0;\n\t\t\t\t\tlet bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t\twhile (bitStringLengthLength > 0) {\n\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\n\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\tbitStringLengthLength--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n\t\t\t\tcharIndex += bitStringLength;\n\t\t\t\t\n\t\t\t\tconst bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst channel: Channel = this.channels[channelIndex];\n\t\t\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n\t\t\t\t\tconst maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n\t\t\t\t\tconst neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n\t\t\t\t\tconst neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\t\t\t\t\t\n\t\t\t\t\tconst octaveOffset: number = isNoiseChannel ? 0 : channel.octave * 12;\n\t\t\t\t\tlet lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\n\t\t\t\t\tconst recentPitches: number[] = isNoiseChannel ? [4,6,7,2,3,8,0,10] : [0, 7, 12, 19, 24, -5, -12];\n\t\t\t\t\tconst recentShapes: any[] = [];\n\t\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\n\t\t\t\t\t\trecentPitches[i] += octaveOffset;\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\n\t\t\t\t\t\tconst newPattern: Pattern = channel.patterns[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (beforeNine) {\n\t\t\t\t\t\t\tnewPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n\t\t\t\t\t\t\tnewPattern.instruments.length = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (this.patternInstruments) {\n\t\t\t\t\t\t\t\tconst instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n\t\t\t\t\t\t\t\tfor (let j: number = 0; j < instrumentCount; j++) {\n\t\t\t\t\t\t\t\t\tnewPattern.instruments[j] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tnewPattern.instruments.length = instrumentCount;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewPattern.instruments[0] = 0;\n\t\t\t\t\t\t\t\tnewPattern.instruments.length = Config.instrumentCountMin;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!beforeThree && bits.read(1) == 0) {\n\t\t\t\t\t\t\tnewPattern.notes.length = 0;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet curPart: number = 0;\n\t\t\t\t\t\tconst newNotes: Note[] = newPattern.notes;\n\t\t\t\t\t\tlet noteCount: number = 0;\n\t\t\t\t\t\twhile (curPart < this.beatsPerBar * Config.partsPerBeat) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconst useOldShape: boolean = bits.read(1) == 1;\n\t\t\t\t\t\t\tlet newNote: boolean = false;\n\t\t\t\t\t\t\tlet shapeIndex: number = 0;\n\t\t\t\t\t\t\tif (useOldShape) {\n\t\t\t\t\t\t\t\tshapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewNote = bits.read(1) == 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!useOldShape && !newNote) {\n\t\t\t\t\t\t\t\tconst restLength: number = beforeSeven\n\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\n\t\t\t\t\t\t\t\tcurPart += restLength;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlet shape: any;\n\t\t\t\t\t\t\t\tif (useOldShape) {\n\t\t\t\t\t\t\t\t\tshape = recentShapes[shapeIndex];\n\t\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tshape = {};\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\n\t\t\t\t\t\t\t\t\twhile (shape.pitchCount < Config.maxChordSize && bits.read(1) == 1) shape.pitchCount++;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tshape.pinCount = bits.readPinCount();\n\t\t\t\t\t\t\t\t\tshape.initialSize = bits.read(bitsPerNoteSize);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tshape.pins = [];\n\t\t\t\t\t\t\t\t\tshape.length = 0;\n\t\t\t\t\t\t\t\t\tshape.bendCount = 0;\n\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pinCount; j++) {\n\t\t\t\t\t\t\t\t\t\tlet pinObj: any = {};\n\t\t\t\t\t\t\t\t\t\tpinObj.pitchBend = bits.read(1) == 1;\n\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) shape.bendCount++;\n\t\t\t\t\t\t\t\t\t\tshape.length += beforeSeven\n\t\t\t\t\t\t\t\t\t\t\t? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n\t\t\t\t\t\t\t\t\t\t\t: bits.readPartDuration();\n\t\t\t\t\t\t\t\t\t\tpinObj.time = shape.length;\n\t\t\t\t\t\t\t\t\t\tpinObj.size = bits.read(bitsPerNoteSize);\n\t\t\t\t\t\t\t\t\t\tshape.pins.push(pinObj);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trecentShapes.unshift(shape);\n\t\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tlet note: Note;\n\t\t\t\t\t\t\t\tif (newNotes.length <= noteCount) {\n\t\t\t\t\t\t\t\t\tnote = new Note(0, curPart, curPart + shape.length, shape.initialSize);\n\t\t\t\t\t\t\t\t\tnewNotes[noteCount++] = note;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnote = newNotes[noteCount++];\n\t\t\t\t\t\t\t\t\tnote.start = curPart;\n\t\t\t\t\t\t\t\t\tnote.end = curPart + shape.length;\n\t\t\t\t\t\t\t\t\tnote.pins[0].size = shape.initialSize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tlet pitch: number;\n\t\t\t\t\t\t\t\tlet pitchCount: number = 0;\n\t\t\t\t\t\t\t\tconst pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\n\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\n\t\t\t\t\t\t\t\t\tconst useOldPitch: boolean = bits.read(1) == 1;\n\t\t\t\t\t\t\t\t\tif (!useOldPitch) {\n\t\t\t\t\t\t\t\t\t\tconst interval: number = bits.readPitchInterval();\n\t\t\t\t\t\t\t\t\t\tpitch = lastPitch;\n\t\t\t\t\t\t\t\t\t\tlet intervalIter: number = interval;\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter > 0) {\n\t\t\t\t\t\t\t\t\t\t\tpitch++;\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch++;\n\t\t\t\t\t\t\t\t\t\t\tintervalIter--;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\twhile (intervalIter < 0) {\n\t\t\t\t\t\t\t\t\t\t\tpitch--;\n\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch--;\n\t\t\t\t\t\t\t\t\t\t\tintervalIter++;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(3));\n\t\t\t\t\t\t\t\t\t\tpitch = recentPitches[pitchIndex];\n\t\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\n\t\t\t\t\t\t\t\t\tif (recentPitches.length > 8) recentPitches.pop();\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (j < shape.pitchCount) {\n\t\t\t\t\t\t\t\t\t\tnote.pitches[pitchCount++] = pitch;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tpitchBends.push(pitch);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (j == shape.pitchCount - 1) {\n\t\t\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tlastPitch = pitch;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tnote.pitches.length = pitchCount;\n\t\t\t\t\t\t\t\tpitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tlet pinCount: number = 1;\n\t\t\t\t\t\t\t\tfor (const pinObj of shape.pins) {\n\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) pitchBends.shift();\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tconst interval: number = pitchBends[0] - note.pitches[0];\n\t\t\t\t\t\t\t\t\tif (note.pins.length <= pinCount) {\n\t\t\t\t\t\t\t\t\t\tnote.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst pin: NotePin = note.pins[pinCount++];\n\t\t\t\t\t\t\t\t\t\tpin.interval = interval;\n\t\t\t\t\t\t\t\t\t\tpin.time = pinObj.time;\n\t\t\t\t\t\t\t\t\t\tpin.size = pinObj.size;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tnote.pins.length = pinCount;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (note.start == 0 && !beforeNine) {\n\t\t\t\t\t\t\t\t\tnote.continuesLastPattern = (bits.read(1) == 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnote.continuesLastPattern = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcurPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewNotes.length = noteCount;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (beforeThree) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchannelIndex++;\n\t\t\t\t\t\tif (channelIndex >= this.getChannelCount()) break;\n\t\t\t\t\t}\n\t\t\t\t} // while (true)\n\t\t\t} break;\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\n\t\t\t} break;\n\t\t}\n\t}\n\t\n\tpublic toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\n\t\tconst channelArray: Object[] = [];\n\t\tfor (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n\t\t\tconst channel: Channel = this.channels[channelIndex];\n\t\t\tconst instrumentArray: Object[] = [];\n\t\t\tconst isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n\t\t\tfor (const instrument of channel.instruments) {\n\t\t\t\tinstrumentArray.push(instrument.toJsonObject());\n\t\t\t}\n\t\t\t\n\t\t\tconst patternArray: Object[] = [];\n\t\t\tfor (const pattern of channel.patterns) {\n\t\t\t\tconst noteArray: Object[] = [];\n\t\t\t\tfor (const note of pattern.notes) {\n\t\t\t\t\tconst pointArray: Object[] = [];\n\t\t\t\t\tfor (const pin of note.pins) {\n\t\t\t\t\t\tpointArray.push({\n\t\t\t\t\t\t\t\"tick\": (pin.time + note.start) * Config.rhythms[this.rhythm].stepsPerBeat / Config.partsPerBeat,\n\t\t\t\t\t\t\t\"pitchBend\": pin.interval,\n\t\t\t\t\t\t\t\"volume\": Math.round(pin.size * 100 / 3),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst noteObject: any = {\n\t\t\t\t\t\t\"pitches\": note.pitches,\n\t\t\t\t\t\t\"points\": pointArray,\n\t\t\t\t\t};\n\t\t\t\t\tif (note.start == 0) {\n\t\t\t\t\t\tnoteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n\t\t\t\t\t}\n\t\t\t\t\tnoteArray.push(noteObject);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst patternObject: any = {\"notes\": noteArray};\n\t\t\t\tif (this.patternInstruments) {\n\t\t\t\t\tpatternObject[\"instruments\"] = pattern.instruments.map(i => i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpatternArray.push(patternObject);\n\t\t\t}\n\t\t\t\n\t\t\tconst sequenceArray: number[] = [];\n\t\t\tif (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\n\t\t\t\tsequenceArray.push(channel.bars[i]);\n\t\t\t}\n\t\t\tfor (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n\t\t\t\tsequenceArray.push(channel.bars[i]);\n\t\t\t}\n\t\t\tif (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\n\t\t\t\tsequenceArray.push(channel.bars[i]);\n\t\t\t}\n\t\t\t\n\t\t\tconst channelObject: any = {\n\t\t\t\t\"type\": isNoiseChannel ? \"drum\" : \"pitch\",\n\t\t\t\t\"instruments\": instrumentArray,\n\t\t\t\t\"patterns\": patternArray,\n\t\t\t\t\"sequence\": sequenceArray,\n\t\t\t};\n\t\t\tif (!isNoiseChannel) {\n\t\t\t\t// For compatibility with old versions the octave is offset by one.\n\t\t\t\tchannelObject[\"octaveScrollBar\"] = channel.octave - 1;\n\t\t\t}\n\t\t\tchannelArray.push(channelObject);\n\t\t}\n\t\t\n\t\treturn {\n\t\t\t\"format\": Song._format,\n\t\t\t\"version\": Song._latestVersion,\n\t\t\t\"scale\": Config.scales[this.scale].name,\n\t\t\t\"key\": Config.keys[this.key].name,\n\t\t\t\"introBars\": this.loopStart,\n\t\t\t\"loopBars\": this.loopLength,\n\t\t\t\"beatsPerBar\": this.beatsPerBar,\n\t\t\t\"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n\t\t\t\"beatsPerMinute\": this.tempo,\n\t\t\t//\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays.\n\t\t\t\"layeredInstruments\": this.layeredInstruments,\n\t\t\t\"patternInstruments\": this.patternInstruments,\n\t\t\t\"channels\": channelArray,\n\t\t};\n\t}\n\t\n\tpublic fromJsonObject(jsonObject: any): void {\n\t\tthis.initToDefault(true);\n\t\tif (!jsonObject) return;\n\t\t\n\t\t//const version: number = jsonObject[\"version\"] | 0;\n\t\t//if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\n\t\t\n\t\tthis.scale = 11; // default to expert.\n\t\tif (jsonObject[\"scale\"] != undefined) {\n\t\t\tconst oldScaleNames: Dictionary<string> = {\n\t\t\t\t\"romani :)\": \"dbl harmonic :)\",\n\t\t\t\t\"romani :(\": \"dbl harmonic :(\",\n\t\t\t\t\"enigma\": \"strange\",\n\t\t\t};\n\t\t\tconst scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n\t\t\tconst scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\n\t\t\tif (scale != -1) this.scale = scale;\n\t\t}\n\t\t\n\t\tif (jsonObject[\"key\"] != undefined) {\n\t\t\tif (typeof(jsonObject[\"key\"]) == \"number\") {\n\t\t\t\tthis.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\n\t\t\t} else if (typeof(jsonObject[\"key\"]) == \"string\") {\n\t\t\t\tconst key: string = jsonObject[\"key\"];\n\t\t\t\tconst letter: string = key.charAt(0).toUpperCase();\n\t\t\t\tconst symbol: string = key.charAt(1).toLowerCase();\n\t\t\t\tconst letterMap: Readonly<Dictionary<number>> = {\"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11};\n\t\t\t\tconst accidentalMap: Readonly<Dictionary<number>> = {\"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1};\n\t\t\t\tlet index: number | undefined = letterMap[letter];\n\t\t\t\tconst offset: number | undefined = accidentalMap[symbol];\n\t\t\t\tif (index != undefined) {\n\t\t\t\t\tif (offset != undefined) index += offset;\n\t\t\t\t\tif (index < 0) index += 12;\n\t\t\t\t\tindex = index % 12;\n\t\t\t\t\tthis.key = index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (jsonObject[\"beatsPerMinute\"] != undefined) {\n\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n\t\t}\n\t\t\n\t\tlet legacyGlobalReverb: number = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\n\t\tif (jsonObject[\"reverb\"] != undefined) {\n\t\t\tlegacyGlobalReverb = clamp(0, 4, jsonObject[\"reverb\"] | 0);\n\t\t}\n\t\t\n\t\tif (jsonObject[\"beatsPerBar\"] != undefined) {\n\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n\t\t}\n\t\t\n\t\tlet importedPartsPerBeat: number = 4;\n\t\tif (jsonObject[\"ticksPerBeat\"] != undefined) {\n\t\t\timportedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n\t\t\tthis.rhythm = Config.rhythms.findIndex(rhythm=>rhythm.stepsPerBeat==importedPartsPerBeat);\n\t\t\tif (this.rhythm == -1) {\n\t\t\t\tthis.rhythm = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet maxInstruments: number = 1;\n\t\tlet maxPatterns: number = 1;\n\t\tlet maxBars: number = 1;\n\t\tif (jsonObject[\"channels\"] != undefined) {\n\t\t\tfor (const channelObject of jsonObject[\"channels\"]) {\n\t\t\t\tif (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n\t\t\t\tif (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n\t\t\t\tif (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (jsonObject[\"layeredInstruments\"] != undefined) {\n\t\t\tthis.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n\t\t} else {\n\t\t\tthis.layeredInstruments = false;\n\t\t}\n\t\tif (jsonObject[\"patternInstruments\"] != undefined) {\n\t\t\tthis.patternInstruments = !!jsonObject[\"patternInstruments\"];\n\t\t} else {\n\t\t\tthis.patternInstruments = (maxInstruments > 1);\n\t\t}\n\t\tthis.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n\t\tthis.barCount = Math.min(maxBars, Config.barCountMax);\n\t\t\n\t\tif (jsonObject[\"introBars\"] != undefined) {\n\t\t\tthis.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n\t\t}\n\t\tif (jsonObject[\"loopBars\"] != undefined) {\n\t\t\tthis.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n\t\t}\n\t\t\n\t\tconst newPitchChannels: Channel[] = [];\n\t\tconst newNoiseChannels: Channel[] = [];\n\t\tif (jsonObject[\"channels\"] != undefined) {\n\t\t\tfor (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n\t\t\t\tlet channelObject: any = jsonObject[\"channels\"][channelIndex];\n\t\t\t\t\n\t\t\t\tconst channel: Channel = new Channel();\n\t\t\t\t\n\t\t\t\tlet isNoiseChannel: boolean = false;\n\t\t\t\tif (channelObject[\"type\"] != undefined) {\n\t\t\t\t\tisNoiseChannel = (channelObject[\"type\"] == \"drum\");\n\t\t\t\t} else {\n\t\t\t\t\t// for older files, assume drums are channel 3.\n\t\t\t\t\tisNoiseChannel = (channelIndex >= 3);\n\t\t\t\t}\n\t\t\t\tif (isNoiseChannel) {\n\t\t\t\t\tnewNoiseChannels.push(channel);\n\t\t\t\t} else {\n\t\t\t\t\tnewPitchChannels.push(channel);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (channelObject[\"octaveScrollBar\"] != undefined) {\n\t\t\t\t\tchannel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n\t\t\t\t\tif (isNoiseChannel) channel.octave = 0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Array.isArray(channelObject[\"instruments\"])) {\n\t\t\t\t\tconst instrumentObjects: any[] = channelObject[\"instruments\"];\n\t\t\t\t\tfor (let i: number = 0; i < instrumentObjects.length; i++) {\n\t\t\t\t\t\tif (i >= this.getMaxInstrumentsPerChannel()) break;\n\t\t\t\t\t\tconst instrument: Instrument = new Instrument(isNoiseChannel);\n\t\t\t\t\t\tchannel.instruments[i] = instrument;\n\t\t\t\t\t\tinstrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, legacyGlobalReverb);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\n\t\t\t\t\tconst pattern: Pattern = new Pattern();\n\t\t\t\t\tchannel.patterns[i] = pattern;\n\t\t\t\t\t\n\t\t\t\t\tlet patternObject: any = undefined;\n\t\t\t\t\tif (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\n\t\t\t\t\tif (patternObject == undefined) continue;\n\t\t\t\t\t\n\t\t\t\t\tif (this.patternInstruments) {\n\t\t\t\t\t\tif (Array.isArray(patternObject[\"instruments\"])) {\n\t\t\t\t\t\t\tconst instruments: any[] = patternObject[\"instruments\"];\n\t\t\t\t\t\t\tconst instrumentCount: number = clamp(Config.instrumentCountMin, this.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n\t\t\t\t\t\t\tfor (let j: number = 0; j < instrumentCount; j++) {\n\t\t\t\t\t\t\t\tpattern.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpattern.instruments.length = instrumentCount;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpattern.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n\t\t\t\t\t\t\tpattern.instruments.length = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n\t\t\t\t\t\tconst maxNoteCount: number = Math.min(this.beatsPerBar * Config.partsPerBeat, patternObject[\"notes\"].length >>> 0);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary. \n\t\t\t\t\t\tlet tickClock: number = 0;\n\t\t\t\t\t\tfor (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\n\t\t\t\t\t\t\tif (j >= maxNoteCount) break;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconst noteObject = patternObject[\"notes\"][j];\n\t\t\t\t\t\t\tif (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconst note: Note = new Note(0, 0, 0, 0);\n\t\t\t\t\t\t\tnote.pitches = [];\n\t\t\t\t\t\t\tnote.pins = [];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\n\t\t\t\t\t\t\t\tconst pitch: number = noteObject[\"pitches\"][k] | 0;\n\t\t\t\t\t\t\t\tif (note.pitches.indexOf(pitch) != -1) continue;\n\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\n\t\t\t\t\t\t\t\tif (note.pitches.length >= Config.maxChordSize) break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlet noteClock: number = tickClock;\n\t\t\t\t\t\t\tlet startInterval: number = 0;\n\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject[\"points\"].length; k++) {\n\t\t\t\t\t\t\t\tconst pointObject: any = noteObject[\"points\"][k];\n\t\t\t\t\t\t\t\tif (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\n\t\t\t\t\t\t\t\tconst interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tconst time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tconst size: number = (pointObject[\"volume\"] == undefined) ? 3 : Math.max(0, Math.min(3, Math.round((pointObject[\"volume\"] | 0) * 3 / 100)));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (time > this.beatsPerBar * Config.partsPerBeat) continue;\n\t\t\t\t\t\t\t\tif (note.pins.length == 0) {\n\t\t\t\t\t\t\t\t\tif (time < noteClock) continue;\n\t\t\t\t\t\t\t\t\tnote.start = time;\n\t\t\t\t\t\t\t\t\tstartInterval = interval;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (time <= noteClock) continue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tnoteClock = time;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tnote.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (note.pins.length < 2) continue;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tnote.end = note.pins[note.pins.length - 1].time + note.start;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconst maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\n\t\t\t\t\t\t\tlet lowestPitch: number = maxPitch;\n\t\t\t\t\t\t\tlet highestPitch: number = 0;\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pitches.length; k++) {\n\t\t\t\t\t\t\t\tnote.pitches[k] += startInterval;\n\t\t\t\t\t\t\t\tif (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n\t\t\t\t\t\t\t\t\tnote.pitches.splice(k, 1);\n\t\t\t\t\t\t\t\t\tk--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\n\t\t\t\t\t\t\t\tif (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pins.length; k++) {\n\t\t\t\t\t\t\t\tconst pin: NotePin = note.pins[k];\n\t\t\t\t\t\t\t\tif (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\n\t\t\t\t\t\t\t\tif (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\n\t\t\t\t\t\t\t\tif (k >= 2) {\n\t\t\t\t\t\t\t\t\tif (pin.interval == note.pins[k-1].interval && \n\t\t\t\t\t\t\t\t\t\tpin.interval == note.pins[k-2].interval && \n\t\t\t\t\t\t\t\t\t\tpin.size == note.pins[k-1].size && \n\t\t\t\t\t\t\t\t\t\tpin.size == note.pins[k-2].size)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tnote.pins.splice(k-1, 1);\n\t\t\t\t\t\t\t\t\t\tk--;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (note.start == 0) {\n\t\t\t\t\t\t\t\tnote.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnote.continuesLastPattern = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tpattern.notes.push(note);\n\t\t\t\t\t\t\ttickClock = note.end;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\n\t\t\t\t\n\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\n\t\t\t\t\tchannel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n\t\t\t\t}\n\t\t\t\tchannel.bars.length = this.barCount;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\n\t\tif (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\n\t\tthis.pitchChannelCount = newPitchChannels.length;\n\t\tthis.noiseChannelCount = newNoiseChannels.length;\n\t\tthis.channels.length = 0;\n\t\tArray.prototype.push.apply(this.channels, newPitchChannels);\n\t\tArray.prototype.push.apply(this.channels, newNoiseChannels);\n\t}\n\t\n\tpublic getPattern(channelIndex: number, bar: number): Pattern | null {\n\t\tif (bar < 0 || bar >= this.barCount) return null;\n\t\tconst patternIndex: number = this.channels[channelIndex].bars[bar];\n\t\tif (patternIndex == 0) return null;\n\t\treturn this.channels[channelIndex].patterns[patternIndex - 1];\n\t}\n\t\n\tpublic getBeatsPerMinute(): number {\n\t\treturn this.tempo;\n\t}\n\t\n\tpublic static getNeededBits(maxValue: number): number {\n\t\treturn 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n\t}\n}\n\nclass PickedString {\n\tpublic delayLine: Float32Array | null = null;\n\tpublic delayIndex: number;\n\tpublic allPassSample: number;\n\tpublic allPassPrevInput: number;\n\tpublic shelfSample: number;\n\tpublic shelfPrevInput: number;\n\tpublic fractionalDelaySample: number;\n\tpublic prevDelayLength: number;\n\tpublic delayResetOffset: number;\n\t\n\tconstructor() {\n\t\tthis.reset();\n\t}\n\t\n\tpublic reset(): void {\n\t\tthis.delayIndex = -1;\n\t\tthis.allPassSample = 0.0;\n\t\tthis.allPassPrevInput = 0.0;\n\t\tthis.shelfSample = 0.0;\n\t\tthis.shelfPrevInput = 0.0;\n\t\tthis.fractionalDelaySample = 0.0;\n\t\tthis.prevDelayLength = -1.0;\n\t\tthis.delayResetOffset = 0;\n\t}\n}\n\nclass EnvelopeComputer {\n\tpublic noteSecondsStart: number = 0.0;\n\tpublic noteSecondsEnd: number = 0.0;\n\tpublic noteTicksStart: number = 0.0;\n\tpublic noteTicksEnd: number = 0.0;\n\tpublic noteSizeStart: number = Config.noteSizeMax;\n\tpublic noteSizeEnd: number = Config.noteSizeMax;\n\tpublic prevNoteSize: number = Config.noteSizeMax;\n\tpublic nextNoteSize: number = Config.noteSizeMax;\n\tprivate _noteSizeFinal: number = Config.noteSizeMax;\n\tpublic prevNoteSecondsStart: number = 0.0;\n\tpublic prevNoteSecondsEnd: number = 0.0;\n\tpublic prevNoteTicksStart: number = 0.0;\n\tpublic prevNoteTicksEnd: number = 0.0;\n\tprivate _prevNoteSizeFinal: number = Config.noteSizeMax;\n\t\n\tpublic prevSlideStart: boolean = false;\n\tpublic prevSlideEnd: boolean = false;\n\tpublic nextSlideStart: boolean = false;\n\tpublic nextSlideEnd: boolean = false;\n\tpublic prevSlideRatioStart: number = 0.0;\n\tpublic prevSlideRatioEnd: number = 0.0;\n\tpublic nextSlideRatioStart: number = 0.0;\n\tpublic nextSlideRatioEnd: number = 0.0;\n\t\n\tpublic readonly envelopeStarts: number[] = [];\n\tpublic readonly envelopeEnds: number[] = [];\n\tpublic lowpassCutoffDecayVolumeCompensation: number = 1.0;\n\t\n\tconstructor(/*private _perNote: boolean*/) {\n\t\t//const length: number = this._perNote ? NoteAutomationIndex.length : InstrumentAutomationIndex.length;\n\t\tconst length: number = NoteAutomationIndex.length;\n\t\tfor (let i: number = 0; i < length; i++) {\n\t\t\tthis.envelopeStarts[i] = 1.0;\n\t\t\tthis.envelopeEnds[i] = 1.0;\n\t\t}\n\t\t\n\t\tthis.reset();\n\t}\n\t\n\tpublic reset(): void {\n\t\tthis.noteSecondsEnd = 0.0;\n\t\tthis.noteTicksEnd = 0.0;\n\t\tthis._noteSizeFinal = Config.noteSizeMax;\n\t\tthis.prevNoteSecondsEnd = 0.0;\n\t\tthis.prevNoteTicksEnd = 0.0;\n\t\tthis._prevNoteSizeFinal = Config.noteSizeMax;\n\t}\n\t\n\tpublic computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number, tickTimeEnd: number, secondsPassing: number, tone: Tone | null): void {\n\t\tconst transition: Transition = instrument.getTransition();\n\t\tif (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n\t\t\tthis.prevNoteSecondsEnd = this.noteSecondsEnd;\n\t\t\tthis.prevNoteTicksEnd = this.noteTicksEnd;\n\t\t\tthis._prevNoteSizeFinal = this._noteSizeFinal;\n\t\t\tthis.noteSecondsEnd = 0.0;\n\t\t\tthis.noteTicksEnd = 0.0;\n\t\t}\n\t\tif (tone != null) {\n\t\t\tif (tone.note != null) {\n\t\t\t\tthis._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n\t\t\t} else {\n\t\t\t\tthis._noteSizeFinal = Config.noteSizeMax;\n\t\t\t}\n\t\t}\n\t\t\n\t\tconst ticksPassing: number = tickTimeEnd - tickTimeStart;\n\t\tconst noteSecondsStart: number = this.noteSecondsEnd;\n\t\tconst noteSecondsEnd: number = noteSecondsStart + secondsPassing;\n\t\tconst noteTicksStart: number = this.noteTicksEnd;\n\t\tconst noteTicksEnd: number = noteTicksStart + ticksPassing;\n\t\tconst prevNoteSecondsStart: number = this.prevNoteSecondsEnd;\n\t\tconst prevNoteSecondsEnd: number = prevNoteSecondsStart + secondsPassing;\n\t\tconst prevNoteTicksStart: number = this.prevNoteTicksEnd;\n\t\tconst prevNoteTicksEnd: number = prevNoteTicksStart + ticksPassing;\n\t\t\n\t\tconst beatsPerTick: number = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n\t\tconst beatTimeStart: number = beatsPerTick * tickTimeStart;\n\t\tconst beatTimeEnd:   number = beatsPerTick * tickTimeEnd;\n\t\t\n\t\tlet noteSizeStart: number = this._noteSizeFinal;\n\t\tlet noteSizeEnd: number = this._noteSizeFinal;\n\t\tlet prevNoteSize: number = this._prevNoteSizeFinal;\n\t\tlet nextNoteSize: number = 0;\n\t\tlet prevSlideStart: boolean = false;\n\t\tlet prevSlideEnd: boolean = false;\n\t\tlet nextSlideStart: boolean = false;\n\t\tlet nextSlideEnd: boolean = false;\n\t\tlet prevSlideRatioStart: number = 0.0;\n\t\tlet prevSlideRatioEnd: number = 0.0;\n\t\tlet nextSlideRatioStart: number = 0.0;\n\t\tlet nextSlideRatioEnd: number = 0.0;\n\t\tif (tone != null && tone.note != null && !tone.passedEndOfNote) {\n\t\t\tconst endPinIndex: number = tone.note.getEndPinIndex(currentPart);\n\t\t\tconst startPin: NotePin = tone.note.pins[endPinIndex-1];\n\t\t\tconst endPin:   NotePin = tone.note.pins[endPinIndex];\n\t\t\tconst startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\n\t\t\tconst endPinTick:   number = (tone.note.start + endPin.time)   * Config.ticksPerPart;\n\t\t\tconst ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n\t\t\tconst ratioEnd:   number = (tickTimeEnd   - startPinTick) / (endPinTick - startPinTick);\n\t\t\tnoteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n\t\t\tnoteSizeEnd   = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n\t\t\t\n\t\t\tif (transition.slides) {\n\t\t\t\tconst noteStartTick: number = tone.noteStartPart * Config.ticksPerPart;\n\t\t\t\tconst noteEndTick:   number = tone.noteEndPart   * Config.ticksPerPart;\n\t\t\t\tconst noteLengthTicks: number = noteEndTick - noteStartTick;\n\t\t\t\tconst maximumSlideTicks: number = noteLengthTicks * 0.5;\n\t\t\t\tconst slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\n\t\t\t\tif (tone.prevNote != null && !tone.forceContinueAtStart) {\n\t\t\t\t\tif (tickTimeStart - noteStartTick < slideTicks) {\n\t\t\t\t\t\tprevSlideStart = true;\n\t\t\t\t\t\tprevSlideRatioStart = 0.5 * (1.0 - (tickTimeStart - noteStartTick) / slideTicks);\n\t\t\t\t\t}\n\t\t\t\t\tif (tickTimeEnd - noteStartTick < slideTicks) {\n\t\t\t\t\t\tprevSlideEnd = true;\n\t\t\t\t\t\tprevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEnd - noteStartTick) / slideTicks);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tone.nextNote != null && !tone.forceContinueAtEnd) {\n\t\t\t\t\tnextNoteSize = tone.nextNote.pins[0].size\n\t\t\t\t\tif (noteEndTick - tickTimeStart < slideTicks) {\n\t\t\t\t\t\tnextSlideStart = true;\n\t\t\t\t\t\tnextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStart) / slideTicks);\n\t\t\t\t\t}\n\t\t\t\t\tif (noteEndTick - tickTimeEnd < slideTicks) {\n\t\t\t\t\t\tnextSlideEnd = true;\n\t\t\t\t\t\tnextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEnd) / slideTicks);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet lowpassCutoffDecayVolumeCompensation: number = 1.0;\n\t\tlet usedNoteSize: boolean = false;\n\t\tfor (let envelopeIndex: number = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n\t\t\tlet automationTarget: AutomationTarget;\n\t\t\tlet targetIndex: number;\n\t\t\tlet envelope: Envelope;\n\t\t\tif (envelopeIndex == instrument.envelopeCount) {\n\t\t\t\tif (usedNoteSize /*|| !this._perNote*/) break;\n\t\t\t\t// Special case: if no other envelopes used note size, default to applying it to note volume.\n\t\t\t\tautomationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n\t\t\t\ttargetIndex = 0;\n\t\t\t\tenvelope = Config.envelopes.dictionary[\"note size\"];\n\t\t\t} else {\n\t\t\t\tlet envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\n\t\t\t\tautomationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n\t\t\t\ttargetIndex = envelopeSettings.index;\n\t\t\t\tenvelope = Config.envelopes[envelopeSettings.envelope];\n\t\t\t\tif (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\n\t\t\t}\n\t\t\tif (/*automationTarget.perNote == this._perNote &&*/ automationTarget.computeIndex != null) {\n\t\t\t\tconst computeIndex: number = automationTarget.computeIndex + targetIndex;\n\t\t\t\tlet envelopeStart: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);\n\t\t\t\tlet envelopeEnd:   number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd,   beatTimeEnd,   noteSizeEnd);\n\t\t\t\t\n\t\t\t\tif (prevSlideStart) {\n\t\t\t\t\tconst other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);\n\t\t\t\t\tenvelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n\t\t\t\t}\n\t\t\t\tif (prevSlideEnd) {\n\t\t\t\t\tconst other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);\n\t\t\t\t\tenvelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n\t\t\t\t}\n\t\t\t\tif (nextSlideStart) {\n\t\t\t\t\tconst other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);\n\t\t\t\t\tenvelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n\t\t\t\t}\n\t\t\t\tif (nextSlideEnd) {\n\t\t\t\t\tconst other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);\n\t\t\t\t\tenvelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.envelopeStarts[computeIndex] *= envelopeStart;\n\t\t\t\tthis.envelopeEnds[computeIndex]   *= envelopeEnd;\n\t\t\t\t\n\t\t\t\tif (automationTarget.isFilter) {\n\t\t\t\t\tconst filterSettings: FilterSettings = /*this._perNote ?*/ instrument.noteFilter /*: instrument.eqFilter*/;\n\t\t\t\t\tif (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\n\t\t\t\t\t\tlowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.noteSecondsStart = noteSecondsStart;\n\t\tthis.noteSecondsEnd = noteSecondsEnd;\n\t\tthis.noteTicksStart = noteTicksStart;\n\t\tthis.noteTicksEnd = noteTicksEnd;\n\t\tthis.prevNoteSecondsStart = prevNoteSecondsStart;\n\t\tthis.prevNoteSecondsEnd = prevNoteSecondsEnd;\n\t\tthis.prevNoteTicksStart = prevNoteTicksStart;\n\t\tthis.prevNoteTicksEnd = prevNoteTicksEnd;\n\t\tthis.prevNoteSize = prevNoteSize;\n\t\tthis.nextNoteSize = nextNoteSize;\n\t\tthis.noteSizeStart = noteSizeStart;\n\t\tthis.noteSizeEnd = noteSizeEnd;\n\t\tthis.prevSlideStart = prevSlideStart;\n\t\tthis.prevSlideEnd = prevSlideEnd;\n\t\tthis.nextSlideStart = nextSlideStart;\n\t\tthis.nextSlideEnd = nextSlideEnd;\n\t\tthis.prevSlideRatioStart = prevSlideRatioStart;\n\t\tthis.prevSlideRatioEnd = prevSlideRatioEnd;\n\t\tthis.nextSlideRatioStart = nextSlideRatioStart;\n\t\tthis.nextSlideRatioEnd = nextSlideRatioEnd;\n\t\tthis.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n\t}\n\t\n\tpublic clearEnvelopes(instrument: Instrument): void {\n\t\tfor (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n\t\t\tconst envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\n\t\t\tconst automationTarget: AutomationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n\t\t\tif (/*automationTarget.perNote == this._perNote &&*/ automationTarget.computeIndex != null) {\n\t\t\t\tconst computeIndex: number = automationTarget.computeIndex + envelopeSettings.index;\n\t\t\t\tthis.envelopeStarts[computeIndex] = 1.0;\n\t\t\t\tthis.envelopeEnds[computeIndex]   = 1.0;\n\t\t\t}\n\t\t}\n\t\t//if (this._perNote) {\n\t\t\t// As a special case, note volume may be altered even if there was no envelope for it.\n\t\t\tthis.envelopeStarts[NoteAutomationIndex.noteVolume] = 1.0;\n\t\t\tthis.envelopeEnds[  NoteAutomationIndex.noteVolume] = 1.0;\n\t\t//}\n\t}\n\t\n\tpublic static computeEnvelope(envelope: Envelope, time: number, beats: number, noteSize: number): number {\n\t\tswitch(envelope.type) {\n\t\t\tcase EnvelopeType.noteSize: return Synth.noteSizeToVolumeMult(noteSize);\n\t\t\tcase EnvelopeType.none:     return 1.0;\n\t\t\tcase EnvelopeType.twang:    return 1.0 / (1.0 + time * envelope.speed);\n\t\t\tcase EnvelopeType.swell:    return 1.0 - 1.0 / (1.0 + time * envelope.speed);\n\t\t\tcase EnvelopeType.tremolo:  return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\n\t\t\tcase EnvelopeType.tremolo2: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\n\t\t\tcase EnvelopeType.punch:    return Math.max(1.0, 2.0 - time * 10.0);\n\t\t\tcase EnvelopeType.flare:    const attack: number = 0.25 / Math.sqrt(envelope.speed); return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);\n\t\t\tcase EnvelopeType.decay:    return Math.pow(2, -envelope.speed * time);\n\t\t\tdefault: throw new Error(\"Unrecognized operator envelope type.\");\n\t\t}\n\t}\n\t\n\tpublic static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope): number {\n\t\t// This is a little hokey in the details, but I designed it a while ago and keep it \n\t\t// around for compatibility. This decides how much to increase the volume (or\n\t\t// expression) to compensate for a decaying lowpass cutoff to maintain perceived\n\t\t// volume overall.\n\t\tif (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * envelope.speed;\n\t\tif (envelope.type == EnvelopeType.twang) return 1.0  + 0.02  * envelope.speed;\n\t\treturn 1.0;\n\t}\n}\n\nclass Tone {\n\tpublic instrumentIndex: number;\n\tpublic readonly pitches: number[] = Array(Config.maxChordSize).fill(0);\n\tpublic pitchCount: number = 0;\n\tpublic chordSize: number = 0;\n\tpublic drumsetPitch: number | null = null;\n\tpublic note: Note | null = null;\n\tpublic prevNote: Note | null = null;\n\tpublic nextNote: Note | null = null;\n\tpublic prevNotePitchIndex: number = 0;\n\tpublic nextNotePitchIndex: number = 0;\n\tpublic freshlyAllocated: boolean = true;\n\tpublic atNoteStart: boolean = false;\n\tpublic isOnLastTick: boolean = false; // Whether the tone is finished fading out and ready to be freed.\n\tpublic passedEndOfNote: boolean = false;\n\tpublic forceContinueAtStart: boolean = false;\n\tpublic forceContinueAtEnd: boolean = false;\n\tpublic noteStartPart: number = 0;\n\tpublic noteEndPart: number = 0;\n\tpublic ticksSinceReleased: number = 0;\n\tpublic liveInputSamplesHeld: number = 0;\n\tpublic lastInterval: number = 0;\n\tpublic sample: number = 0.0;\n\tpublic readonly phases: number[] = [];\n\tpublic readonly phaseDeltas: number[] = [];\n\tpublic readonly expressionStarts: number[] = [];\n\tpublic readonly expressionDeltas: number[] = [];\n\tpublic readonly phaseDeltaScales: number[] = [];\n\tpublic prevVibrato: number | null = null;\n\tpublic pulseWidth: number = 0.0;\n\tpublic pulseWidthDelta: number = 0.0;\n\tpublic readonly pickedStrings: PickedString[] = [];\n\t\n\tpublic readonly noteFilters: DynamicBiquadFilter[] = [];\n\tpublic noteFilterCount: number = 0;\n\tpublic initialNoteFilterInput1: number = 0.0;\n\tpublic initialNoteFilterInput2: number = 0.0;\n\t\n\tpublic specialIntervalMult: number = 0.0;\n\tpublic specialIntervalExpressionMult: number = 1.0;\n\tpublic readonly feedbackOutputs: number[] = [];\n\tpublic feedbackMult: number = 0.0;\n\tpublic feedbackDelta: number = 0.0;\n\t\n\tpublic readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(/*true*/);\n\t\n\tconstructor() {\n\t\tthis.reset();\n\t}\n\t\n\tpublic reset(): void {\n\t\tthis.sample = 0.0;\n\t\tconst maxWaves: number = Math.max(Config.maxChordSize, Config.operatorCount);\n\t\tfor (let i: number = 0; i < maxWaves; i++) {\n\t\t\tthis.phases[i] = 0.0;\n\t\t\tthis.feedbackOutputs[i] = 0.0;\n\t\t}\n\t\tfor (let i: number = 0; i < this.noteFilterCount; i++) {\n\t\t\tthis.noteFilters[i].resetOutput();\n\t\t}\n\t\tthis.noteFilterCount = 0;\n\t\tthis.initialNoteFilterInput1 = 0.0;\n\t\tthis.initialNoteFilterInput2 = 0.0;\n\t\tthis.liveInputSamplesHeld = 0;\n\t\tfor (const pickedString of this.pickedStrings) {\n\t\t\tpickedString.reset();\n\t\t}\n\t\tthis.envelopeComputer.reset();\n\t\tthis.prevVibrato = null;\n\t\tthis.drumsetPitch = null;\n\t}\n}\n\nclass InstrumentState {\n\tpublic instrument: Instrument;\n\t\n\tpublic awake: boolean = false; // Whether the instrument's effects-processing loop should continue.\n\tpublic computed: boolean = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\n\tpublic tonesAddedInThisTick: boolean = false; // Whether any instrument tones are currently active.\n\tpublic flushingDelayLines: boolean = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\n\tpublic deactivateAfterThisTick: boolean = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\n\tpublic attentuationProgress: number = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\n\tpublic flushedSamples: number = 0; // How many delay line samples have been flushed to zero.\n\tpublic readonly activeTones: Deque<Tone> = new Deque<Tone>();\n\tpublic readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\n\tpublic readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\n\t\n\tpublic eqFilterVolumeStart: number = 1.0;\n\tpublic eqFilterVolumeDelta: number = 0.0;\n\tpublic mixVolumeStart: number = 1.0;\n\tpublic mixVolumeDelta: number = 0.0;\n\tpublic delayInputMultStart: number = 0.0;\n\tpublic delayInputMultDelta: number = 0.0;\n\t\n\tpublic distortionStart: number = 0.0;\n\tpublic distortionEnd: number = 0.0;\n\tpublic distortionFractionalInput1: number = 0.0;\n\tpublic distortionFractionalInput2: number = 0.0;\n\tpublic distortionFractionalInput3: number = 0.0;\n\tpublic distortionPrevInput: number = 0.0;\n\tpublic distortionNextOutput: number = 0.0;\n\t\n\tpublic bitcrusherPrevInput: number = 0.0;\n\tpublic bitcrusherCurrentOutput: number = 0.0;\n\tpublic bitcrusherPhase: number = 1.0;\n\tpublic bitcrusherPhaseDelta: number = 0.0;\n\tpublic bitcrusherPhaseDeltaScale: number = 1.0;\n\tpublic bitcrusherScale: number = 1.0;\n\tpublic bitcrusherScaleScale: number = 1.0;\n\tpublic bitcrusherFoldLevel: number = 1.0;\n\tpublic bitcrusherFoldLevelScale: number = 1.0;\n\t\n\tpublic readonly eqFilters: DynamicBiquadFilter[] = [];\n\tpublic eqFilterCount: number = 0;\n\tpublic initialEqFilterInput1: number = 0.0;\n\tpublic initialEqFilterInput2: number = 0.0;\n\t\n\tpublic panningDelayLine: Float32Array | null = null;\n\tpublic panningDelayPos: number = 0;\n\tpublic panningVolumeStartL: number = 0.0;\n\tpublic panningVolumeStartR: number = 0.0;\n\tpublic panningVolumeDeltaL: number = 0.0;\n\tpublic panningVolumeDeltaR: number = 0.0;\n\tpublic panningOffsetStartL: number = 0.0;\n\tpublic panningOffsetStartR: number = 0.0;\n\tpublic panningOffsetDeltaL: number = 0.0;\n\tpublic panningOffsetDeltaR: number = 0.0;\n\t\n\tpublic chorusDelayLineL: Float32Array | null = null;\n\tpublic chorusDelayLineR: Float32Array | null = null;\n\tpublic chorusDelayLineDirty: boolean = false;\n\tpublic chorusDelayPos: number = 0;\n\tpublic chorusPhase: number = 0;\n\tpublic chorusStart: number = 0;\n\tpublic chorusEnd: number = 0;\n\t\n\tpublic echoDelayLineL: Float32Array | null = null;\n\tpublic echoDelayLineR: Float32Array | null = null;\n\tpublic echoDelayLineDirty: boolean = false;\n\tpublic echoDelayPos: number = 0;\n\tpublic echoDelayOffsetStart: number = 0;\n\tpublic echoDelayOffsetEnd: number = 0;\n\tpublic echoDelayOffsetLastTick: number = 0;\n\tpublic echoDelayOffsetRatio: number = 0.0;\n\tpublic echoDelayOffsetRatioDelta: number = 0.0;\n\tpublic echoDelayOffsetLastTickIsComputed: boolean = false;\n\tpublic echoMultStart: number = 0.0;\n\tpublic echoMultDelta: number = 0.0;\n\tpublic echoShelfA1: number = 0.0;\n\tpublic echoShelfB0: number = 0.0;\n\tpublic echoShelfB1: number = 0.0;\n\tpublic echoShelfSampleL: number = 0.0;\n\tpublic echoShelfSampleR: number = 0.0;\n\tpublic echoShelfPrevInputL: number = 0.0;\n\tpublic echoShelfPrevInputR: number = 0.0;\n\t\n\tpublic reverbDelayLine: Float32Array | null = null;\n\tpublic reverbDelayLineDirty: boolean = false;\n\tpublic reverbDelayPos: number = 0;\n\tpublic reverbMultStart: number = 0.0;\n\tpublic reverbMultDelta: number = 0.0;\n\tpublic reverbShelfA1: number = 0.0;\n\tpublic reverbShelfB0: number = 0.0;\n\tpublic reverbShelfB1: number = 0.0;\n\tpublic reverbShelfSample0: number = 0.0;\n\tpublic reverbShelfSample1: number = 0.0;\n\tpublic reverbShelfSample2: number = 0.0;\n\tpublic reverbShelfSample3: number = 0.0;\n\tpublic reverbShelfPrevInput0: number = 0.0;\n\tpublic reverbShelfPrevInput1: number = 0.0;\n\tpublic reverbShelfPrevInput2: number = 0.0;\n\tpublic reverbShelfPrevInput3: number = 0.0;\n\t\n\t//public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(false);\n\t\n\tpublic allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\n\t\tif (effectsIncludePanning(instrument.effects)) {\n\t\t\tif (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\n\t\t\t\tthis.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effectsIncludeChorus(instrument.effects)) {\n\t\t\tif (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n\t\t\t\tthis.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n\t\t\t}\n\t\t\tif (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n\t\t\t\tthis.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effectsIncludeEcho(instrument.effects)) {\n\t\t\t// account for tempo and delay automation changing delay length during a tick?\n\t\t\tconst safeEchoDelaySteps: number = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\n\t\t\tconst baseEchoDelayBufferSize: number = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n\t\t\tconst safeEchoDelayBufferSize: number = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\n\t\t\t\n\t\t\tif (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n\t\t\t\tthis.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n\t\t\t\tthis.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n\t\t\t} else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n\t\t\t\t// The echo delay length may change whlie the song is playing if tempo changes,\n\t\t\t\t// so buffers may need to be reallocated, but we don't want to lose any echoes\n\t\t\t\t// so we need to copy the contents of the old buffer to the new one.\n\t\t\t\tconst newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n\t\t\t\tconst newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n\t\t\t\tconst oldMask: number = this.echoDelayLineL.length - 1;\n\t\t\t\t\n\t\t\t\tfor (let i = 0; i < this.echoDelayLineL.length; i++) {\n\t\t\t\t\tnewDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n\t\t\t\t\tnewDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.echoDelayPos = this.echoDelayLineL.length;\n\t\t\t\tthis.echoDelayLineL = newDelayLineL;\n\t\t\t\tthis.echoDelayLineR = newDelayLineR;\n\t\t\t}\n\t\t}\n\t\tif (effectsIncludeReverb(instrument.effects)) {\n\t\t\t// TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\n\t\t\tif (this.reverbDelayLine == null) {\n\t\t\t\tthis.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic deactivate(): void {\n\t\tthis.bitcrusherPrevInput = 0.0;\n\t\tthis.bitcrusherCurrentOutput = 0.0;\n\t\tthis.bitcrusherPhase = 1.0;\n\t\tfor (let i: number = 0; i < this.eqFilterCount; i++) {\n\t\t\tthis.eqFilters[i].resetOutput();\n\t\t}\n\t\tthis.eqFilterCount = 0;\n\t\tthis.initialEqFilterInput1 = 0.0;\n\t\tthis.initialEqFilterInput2 = 0.0;\n\t\tthis.distortionFractionalInput1 = 0.0;\n\t\tthis.distortionFractionalInput2 = 0.0;\n\t\tthis.distortionFractionalInput3 = 0.0;\n\t\tthis.distortionPrevInput = 0.0;\n\t\tthis.distortionNextOutput = 0.0;\n\t\tthis.panningDelayPos = 0;\n\t\tif (this.panningDelayLine != null) for (let i: number = 0; i < this.panningDelayLine.length; i++) this.panningDelayLine[i] = 0.0;\n\t\tthis.echoDelayOffsetLastTickIsComputed = false;\n\t\tthis.echoShelfSampleL = 0.0;\n\t\tthis.echoShelfSampleR = 0.0;\n\t\tthis.echoShelfPrevInputL = 0.0;\n\t\tthis.echoShelfPrevInputR = 0.0;\n\t\tthis.reverbShelfSample0 = 0.0;\n\t\tthis.reverbShelfSample1 = 0.0;\n\t\tthis.reverbShelfSample2 = 0.0;\n\t\tthis.reverbShelfSample3 = 0.0;\n\t\tthis.reverbShelfPrevInput0 = 0.0;\n\t\tthis.reverbShelfPrevInput1 = 0.0;\n\t\tthis.reverbShelfPrevInput2 = 0.0;\n\t\tthis.reverbShelfPrevInput3 = 0.0;\n\t\t\n\t\tthis.awake = false;\n\t\tthis.flushingDelayLines = false;\n\t\tthis.deactivateAfterThisTick = false;\n\t\tthis.attentuationProgress = 0.0;\n\t\tthis.flushedSamples = 0;\n\t}\n\t\n\tpublic resetAllEffects(): void {\n\t\tthis.deactivate();\n\t\t\n\t\tif (this.chorusDelayLineDirty) {\n\t\t\tfor (let i: number = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\n\t\t\tfor (let i: number = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\n\t\t}\n\t\tif (this.echoDelayLineDirty) {\n\t\t\tfor (let i: number = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\n\t\t\tfor (let i: number = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\n\t\t}\n\t\tif (this.reverbDelayLineDirty) {\n\t\t\tfor (let i: number = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\n\t\t}\n\t\t\n\t\tthis.chorusPhase = 0.0;\n\t}\n\t\n\tpublic compute(synth: Synth, instrument: Instrument, samplesPerTick: number, runLength: number, tone: Tone | null): void {\n\t\tthis.computed = true;\n\t\t\n\t\tthis.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n\t\t\n\t\tconst samplesPerSecond: number = synth.samplesPerSecond;\n\t\tconst tickSampleCountdown: number = synth.tickSampleCountdown;\n\t\tconst tickRemainingStart: number = (tickSampleCountdown            ) / samplesPerTick;\n\t\tconst tickRemainingEnd:   number = (tickSampleCountdown - runLength) / samplesPerTick;\n\t\t\n\t\t//const ticksIntoBar: number = synth.getTicksIntoBar();\n\t\t//const tickTimeStart: number = ticksIntoBar + (1.0 - tickRemainingStart);\n\t\t//const tickTimeEnd:   number = ticksIntoBar + (1.0 - tickRemainingEnd);\n\t\t//const secondsPerTick: number = samplesPerTick / synth.samplesPerSecond;\n\t\t//const currentPart: number = synth.getCurrentPart();\n\t\t//this.envelopeComputer.computeEnvelopes(instrument, currentPart, tickTimeStart, tickTimeEnd, secondsPerTick * (tickTimeEnd - tickTimeStart), tone);\n\t\t//const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\n\t\t//const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\n\t\t\n\t\tconst usesDistortion: boolean = effectsIncludeDistortion(instrument.effects);\n\t\tconst usesBitcrusher: boolean = effectsIncludeBitcrusher(instrument.effects);\n\t\tconst usesPanning: boolean = effectsIncludePanning(instrument.effects);\n\t\tconst usesChorus: boolean = effectsIncludeChorus(instrument.effects);\n\t\tconst usesEcho: boolean = effectsIncludeEcho(instrument.effects);\n\t\tconst usesReverb: boolean = effectsIncludeReverb(instrument.effects);\n\t\t\n\t\tif (usesDistortion) {\n\t\t\tthis.distortionStart = Math.min(1.0, /*envelopeStarts[InstrumentAutomationIndex.distortion] **/ instrument.distortion / (Config.distortionRange - 1));\n\t\t\tthis.distortionEnd   = Math.min(1.0, /*envelopeEnds[  InstrumentAutomationIndex.distortion] **/ instrument.distortion / (Config.distortionRange - 1));\n\t\t}\n\t\t\n\t\tif (usesBitcrusher) {\n\t\t\tconst freqSettingStart: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherFrequency])*/;\n\t\t\tconst freqSettingEnd:   number = instrument.bitcrusherFreq /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherFrequency])*/;\n\t\t\tconst quantizationSettingStart: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherQuantization])*/;\n\t\t\tconst quantizationSettingEnd:   number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherQuantization])*/;\n\t\t\t\n\t\t\tconst basePitch: number = Config.keys[synth.song!.key].basePitch; // TODO: What if there's a key change mid-song?\n\t\t\tconst freqStart: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n\t\t\tconst freqEnd:   number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd)   * Config.bitcrusherOctaveStep);\n\t\t\tconst phaseDeltaStart: number = Math.min(1.0, freqStart / samplesPerSecond);\n\t\t\tconst phaseDeltaEnd:   number = Math.min(1.0, freqEnd   / samplesPerSecond);\n\t\t\tthis.bitcrusherPhaseDelta = phaseDeltaStart;\n\t\t\tthis.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / runLength);\n\t\t\t\n\t\t\tconst scaleStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n\t\t\tconst scaleEnd:   number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd)   * 0.5));\n\t\t\tthis.bitcrusherScale = scaleStart;\n\t\t\tthis.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / runLength);\n\t\t\t\n\t\t\tconst foldLevelStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n\t\t\tconst foldLevelEnd:   number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n\t\t\tthis.bitcrusherFoldLevel = foldLevelStart;\n\t\t\tthis.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / runLength);\n\t\t}\n\t\t\n\t\tlet eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n\t\tconst eqFilterSettings: FilterSettings = instrument.eqFilter;\n\t\t//const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\n\t\t//const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\n\t\tfor (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\n\t\t\t//const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\n\t\t\t//const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\n\t\t\t//const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\n\t\t\t//const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\n\t\t\tconst point: FilterControlPoint = eqFilterSettings.controlPoints[i];\n\t\t\tpoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\n\t\t\tpoint.toCoefficients(Synth.tempFilterEndCoefficients,   samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\n\t\t\tif (this.eqFilters.length <= i) this.eqFilters[i] = new DynamicBiquadFilter();\n\t\t\tthis.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / runLength, point.type == FilterType.lowPass);\n\t\t\teqFilterVolume *= point.getVolumeCompensationMult();\n\t\t}\n\t\tthis.eqFilterCount = eqFilterSettings.controlPointCount;\n\t\teqFilterVolume = Math.min(3.0, eqFilterVolume);\n\t\t\n\t\tconst mainInstrumentVolume: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\n\t\tthis.mixVolumeStart = mainInstrumentVolume /** envelopeStarts[InstrumentAutomationIndex.mixVolume]*/;\n\t\tconst mixVolumeEnd  = mainInstrumentVolume /** envelopeEnds[  InstrumentAutomationIndex.mixVolume]*/;\n\t\tthis.mixVolumeDelta = (mixVolumeEnd - this.mixVolumeStart) / runLength;\n\t\t\n\t\tlet eqFilterVolumeStart: number = eqFilterVolume;\n\t\tlet eqFilterVolumeEnd: number = eqFilterVolume;\n\t\tlet delayInputMultStart: number = 1.0;\n\t\tlet delayInputMultEnd: number = 1.0;\n\t\t\n\t\tif (usesPanning) {\n\t\t\t//const panEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.panning] * 2.0 - 1.0;\n\t\t\t//const panEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.panning] * 2.0 - 1.0;\n\t\t\tconst pan: number = (instrument.pan - Config.panCenter) / Config.panCenter;\n\t\t\tconst panStart: number = Math.max(-1.0, Math.min(1.0, pan /** panEnvelopeStart*/));\n\t\t\tconst panEnd:   number = Math.max(-1.0, Math.min(1.0, pan /** panEnvelopeEnd  */));\n\t\t\tconst volumeStartL: number = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeStartR: number = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeEndL:   number = Math.cos((1 + panEnd)   * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeEndR:   number = Math.cos((1 - panEnd)   * Math.PI * 0.25) * 1.414;\n\t\t\tconst maxDelaySamples: number = samplesPerSecond * Config.panDelaySecondsMax;\n\t\t\tconst delayStart: number = panStart * maxDelaySamples;\n\t\t\tconst delayEnd:   number = panEnd   * maxDelaySamples;\n\t\t\tconst delayStartL: number = Math.max(0.0,  delayStart);\n\t\t\tconst delayStartR: number = Math.max(0.0, -delayStart);\n\t\t\tconst delayEndL:   number = Math.max(0.0,  delayEnd);\n\t\t\tconst delayEndR:   number = Math.max(0.0, -delayEnd);\n\t\t\t\n\t\t\tthis.panningVolumeStartL = volumeStartL;\n\t\t\tthis.panningVolumeStartR = volumeStartR;\n\t\t\tthis.panningVolumeDeltaL = (volumeEndL - volumeStartL) / runLength;\n\t\t\tthis.panningVolumeDeltaR = (volumeEndR - volumeStartR) / runLength;\n\t\t\tthis.panningOffsetStartL = delayStartL;\n\t\t\tthis.panningOffsetStartR = delayStartR;\n\t\t\tthis.panningOffsetDeltaL = (delayEndL - delayStartL) / runLength;\n\t\t\tthis.panningOffsetDeltaR = (delayEndR - delayStartR) / runLength;\n\t\t}\n\t\t\n\t\tif (usesChorus) {\n\t\t\t//const chorusEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.chorus];\n\t\t\t//const chorusEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.chorus];\n\t\t\tconst chorusStart: number = Math.min(1.0, /*chorusEnvelopeStart **/ instrument.chorus / (Config.chorusRange - 1));\n\t\t\tconst chorusEnd:   number = Math.min(1.0, /*chorusEnvelopeEnd   **/ instrument.chorus / (Config.chorusRange - 1));\n\t\t\tthis.chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n\t\t\tthis.chorusEnd   = chorusEnd   * 0.6 + (Math.pow(chorusEnd,   6.0)) * 0.4;\n\t\t}\n\t\t\n\t\tlet maxEchoMult = 0.0;\n\t\tif (usesEcho) {\n\t\t\t//const echoSustainEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.echoSustain];\n\t\t\t//const echoSustainEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.echoSustain];\n\t\t\tconst echoMultStart: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeStart **/ instrument.echoSustain / Config.echoSustainRange, 1.1)) * 0.9;\n\t\t\tconst echoMultEnd:   number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeEnd   **/ instrument.echoSustain / Config.echoSustainRange, 1.1)) * 0.9;\n\t\t\tthis.echoMultStart = echoMultStart;\n\t\t\tthis.echoMultDelta = (echoMultEnd - echoMultStart) / runLength;\n\t\t\tmaxEchoMult = Math.max(echoMultStart, echoMultEnd);\n\t\t\t\n\t\t\t// TODO: After computing a tick's settings once for multiple run lengths (which is\n\t\t\t// good for audio worklet threads), compute the echo delay envelopes at tick (or\n\t\t\t// part) boundaries to interpolate between two delay taps.\n\t\t\t//const echoDelayEnvelopeStart:   number = envelopeStarts[InstrumentAutomationIndex.echoDelay];\n\t\t\t//const echoDelayEnvelopeEnd:     number = envelopeEnds[  InstrumentAutomationIndex.echoDelay];\n\t\t\tconst echoDelayOffset: number = Math.round((instrument.echoDelay + 1) * Config.echoDelayStepTicks * samplesPerTick);\n\t\t\tif (this.echoDelayOffsetLastTickIsComputed) {\n\t\t\t\tthis.echoDelayOffsetStart = this.echoDelayOffsetLastTick;\n\t\t\t} else {\n\t\t\t\tthis.echoDelayOffsetStart = echoDelayOffset;\n\t\t\t}\n\t\t\tif (synth.isAtEndOfTick) {\n\t\t\t\tthis.echoDelayOffsetLastTick = echoDelayOffset;\n\t\t\t\tthis.echoDelayOffsetLastTickIsComputed = true;\n\t\t\t}\n\t\t\tthis.echoDelayOffsetEnd = echoDelayOffset;\n\t\t\t\n\t\t\tthis.echoDelayOffsetRatio = 1.0 - tickRemainingStart;\n\t\t\tthis.echoDelayOffsetRatioDelta = (tickRemainingStart - tickRemainingEnd) / runLength;\n\t\t\t\n\t\t\tconst shelfRadians: number = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n\t\t\tthis.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n\t\t\tthis.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n\t\t\tthis.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n\t\t}\n\t\t\n\t\tlet maxReverbMult = 0.0;\n\t\tif (usesReverb) {\n\t\t\t//const reverbEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.reverb];\n\t\t\t//const reverbEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.reverb];\n\t\t\tconst reverbStart: number = Math.min(1.0, Math.pow(/*reverbEnvelopeStart **/ instrument.reverb / Config.reverbRange, 0.667)) * 0.425;\n\t\t\tconst reverbEnd:   number = Math.min(1.0, Math.pow(/*reverbEnvelopeEnd   **/ instrument.reverb / Config.reverbRange, 0.667)) * 0.425;\n\t\t\tthis.reverbMultStart = reverbStart;\n\t\t\tthis.reverbMultDelta = (reverbEnd - reverbStart) / runLength;\n\t\t\tmaxReverbMult = Math.max(reverbStart, reverbEnd);\n\t\t\t\n\t\t\tconst shelfRadians: number = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n\t\t\tthis.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n\t\t\tthis.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n\t\t\tthis.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n\t\t}\n\t\t\n\t\tif (this.tonesAddedInThisTick) {\n\t\t\tthis.attentuationProgress = 0.0;\n\t\t\tthis.flushedSamples = 0;\n\t\t\tthis.flushingDelayLines = false;\n\t\t} else if (!this.flushingDelayLines) {\n\t\t\t// If this instrument isn't playing tones anymore, the volume can fade out by the\n\t\t\t// end of the first tick. It's possible for filters and the panning delay line to\n\t\t\t// continue past the end of the tone but they should have mostly dissipated by the\n\t\t\t// end of the tick anyway.\n\t\t\tif (this.attentuationProgress == 0.0) {\n\t\t\t\teqFilterVolumeStart *= tickRemainingStart;\n\t\t\t\teqFilterVolumeEnd *= tickRemainingEnd;\n\t\t\t} else {\n\t\t\t\teqFilterVolumeStart = 0.0;\n\t\t\t\teqFilterVolumeEnd = 0.0;\n\t\t\t}\n\t\t\t\n\t\t\tconst attenuationThreshold: number = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\n\t\t\tconst halfLifeMult: number = -Math.log2(attenuationThreshold);\n\t\t\tlet delayDuration: number = 0.0;\n\t\t\t\n\t\t\tif (usesChorus) {\n\t\t\t\tdelayDuration += Config.chorusMaxDelay;\n\t\t\t}\n\t\t\t\n\t\t\tif (usesEcho) {\n\t\t\t\tconst averageDelaySeconds: number = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n\t\t\t\tconst attenuationPerSecond: number = Math.pow(maxEchoMult, 1.0 / averageDelaySeconds);\n\t\t\t\tconst halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n\t\t\t\tconst echoDuration: number = halfLife * halfLifeMult;\n\t\t\t\tdelayDuration += echoDuration;\n\t\t\t}\n\t\t\t\n\t\t\tif (usesReverb) {\n\t\t\t\tconst averageMult: number = maxReverbMult * 2.0;\n\t\t\t\tconst averageDelaySeconds: number = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n\t\t\t\tconst attenuationPerSecond: number = Math.pow(averageMult, 1.0 / averageDelaySeconds);\n\t\t\t\tconst halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n\t\t\t\tconst reverbDuration: number = halfLife * halfLifeMult;\n\t\t\t\tdelayDuration += reverbDuration;\n\t\t\t}\n\t\t\t\n\t\t\tconst secondsInTick: number = samplesPerTick / samplesPerSecond;\n\t\t\tconst progressInTick: number = secondsInTick / delayDuration;\n\t\t\tconst progressAtEndOfTick: number = this.attentuationProgress + progressInTick;\n\t\t\tif (progressAtEndOfTick >= 1.0) {\n\t\t\t\tdelayInputMultStart *= tickRemainingStart;\n\t\t\t\tdelayInputMultEnd *= tickRemainingEnd;\n\t\t\t}\n\t\t\tif (synth.isAtEndOfTick) {\n\t\t\t\tthis.attentuationProgress = progressAtEndOfTick;\n\t\t\t\tif (this.attentuationProgress >= 1.0) {\n\t\t\t\t\tthis.flushingDelayLines = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Flushing delay lines to zero since the signal has mostly dissipated.\n\t\t\teqFilterVolumeStart = 0.0;\n\t\t\teqFilterVolumeEnd = 0.0;\n\t\t\tdelayInputMultStart = 0.0;\n\t\t\tdelayInputMultEnd = 0.0;\n\t\t\t\n\t\t\tlet totalDelaySamples: number = 0;\n\t\t\tif (usesChorus) totalDelaySamples += synth.chorusDelayBufferSize;\n\t\t\tif (usesEcho) totalDelaySamples += this.echoDelayLineL!.length;\n\t\t\tif (usesReverb) totalDelaySamples += Config.reverbDelayBufferSize;\n\t\t\t\n\t\t\tthis.flushedSamples += runLength;\n\t\t\tif (this.flushedSamples >= totalDelaySamples) {\n\t\t\t\tthis.deactivateAfterThisTick = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.eqFilterVolumeStart = eqFilterVolumeStart;\n\t\tthis.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / runLength;\n\t\tthis.delayInputMultStart = delayInputMultStart;\n\t\tthis.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / runLength;\n\t}\n}\n\nclass ChannelState {\n\tpublic readonly instruments: InstrumentState[] = [];\n\tpublic muted: boolean = false;\n\tpublic singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n}\n\nexport class Synth {\n\n\tprivate syncSongState(): void {\n\t\tconst channelCount: number = this.song!.getChannelCount();\n\t\tfor (let i: number = this.channels.length; i < channelCount; i++) {\n\t\t\tthis.channels[i] = new ChannelState();\n\t\t}\n\t\tthis.channels.length = channelCount;\n\t\tfor (let i: number = 0; i < channelCount; i++) {\n\t\t\tconst channel: Channel = this.song!.channels[i];\n\t\t\tconst channelState: ChannelState = this.channels[i];\n\t\t\tfor (let j: number = channelState.instruments.length; j < channel.instruments.length; j++) {\n\t\t\t\tchannelState.instruments[j] = new InstrumentState();\n\t\t\t}\n\t\t\tchannelState.instruments.length = channel.instruments.length;\n\t\t\t\n\t\t\tif (channelState.muted != channel.muted) {\n\t\t\t\tchannelState.muted = channel.muted;\n\t\t\t\tif (channelState.muted) {\n\t\t\t\t\tfor (const instrumentState of channelState.instruments) {\n\t\t\t\t\t\tinstrumentState.resetAllEffects();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate warmUpSynthesizer(song: Song | null): void {\n\t\tif (song != null) {\n\t\t\tthis.syncSongState();\n\t\t\tconst samplesPerTick: number = this.getSamplesPerTick();\n\t\t\tfor (let j: number = 0; j < song.getChannelCount(); j++) {\n\t\t\t\tfor (let i: number = 0; i < song.channels[j].instruments.length; i++) {\n\t\t\t\t\tconst instrument: Instrument = song.channels[j].instruments[i];\n\t\t\t\t\tconst instrumentState: InstrumentState = this.channels[j].instruments[i];\n\t\t\t\t\tSynth.getInstrumentSynthFunction(instrument);\n\t\t\t\t\tinstrument.warmUp(this.samplesPerSecond);\n\t\t\t\t\tinstrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static operatorAmplitudeCurve(amplitude: number): number {\n\t\treturn (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n\t}\n\t\n\tpublic samplesPerSecond: number = 44100;\n\tpublic panningDelayBufferSize: number;\n\tpublic panningDelayBufferMask: number;\n\tpublic chorusDelayBufferSize: number;\n\tpublic chorusDelayBufferMask: number;\n\t// TODO: reverb\n\t\n\tpublic song: Song | null = null;\n\tpublic liveInputDuration: number = 0;\n\tpublic liveInputStarted: boolean = false;\n\tpublic liveInputPitches: number[] = [];\n\tpublic liveInputChannel: number = 0;\n\tpublic liveInputInstruments: number[] = [];\n\tpublic loopRepeatCount: number = -1;\n\tpublic volume: number = 1.0;\n\t\n\tprivate playheadInternal: number = 0.0;\n\tprivate bar: number = 0;\n\tprivate prevBar: number | null = null;\n\tprivate nextBar: number | null = null;\n\tprivate beat: number = 0;\n\tprivate part: number = 0;\n\tprivate tick: number = 0;\n\tpublic isAtStartOfTick: boolean = true;\n\tpublic isAtEndOfTick: boolean = true;\n\tpublic tickSampleCountdown: number = 0;\n\tprivate isPlayingSong: boolean = false;\n\tprivate liveInputEndTime: number = 0.0;\n\tprivate browserAutomaticallyClearsAudioBuffer: boolean = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\n\t\n\tpublic static readonly tempFilterStartCoefficients: FilterCoefficients = new FilterCoefficients();\n\tpublic static readonly tempFilterEndCoefficients: FilterCoefficients = new FilterCoefficients();\n\tprivate tempDrumSetControlPoint: FilterControlPoint = new FilterControlPoint();\n\tpublic tempFrequencyResponse: FrequencyResponse = new FrequencyResponse();\n\t\n\tprivate static readonly fmSynthFunctionCache: Dictionary<Function> = {};\n\tprivate static readonly effectsFunctionCache: Function[] = Array(1 << 7).fill(undefined); // keep in sync with the number of post-process effects.\n\tprivate static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\n\t\n\tprivate readonly channels: ChannelState[] = [];\n\tprivate readonly tonePool: Deque<Tone> = new Deque<Tone>();\n\tprivate readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\n\t\n\tprivate limit: number = 0.0;\n\t\n\tprivate tempMonoInstrumentSampleBuffer: Float32Array | null = null;\n\t\n\tprivate audioCtx: any | null = null;\n\tprivate scriptNode: any | null = null;\n\t\n\tpublic get playing(): boolean {\n\t\treturn this.isPlayingSong;\n\t}\n\t\n\tpublic get playhead(): number {\n\t\treturn this.playheadInternal;\n\t}\n\t\n\tpublic set playhead(value: number) {\n\t\tif (this.song != null) {\n\t\t\tthis.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n\t\t\tlet remainder: number = this.playheadInternal;\n\t\t\tthis.bar = Math.floor(remainder);\n\t\t\tremainder = this.song.beatsPerBar * (remainder - this.bar);\n\t\t\tthis.beat = Math.floor(remainder);\n\t\t\tremainder = Config.partsPerBeat * (remainder - this.beat);\n\t\t\tthis.part = Math.floor(remainder);\n\t\t\tremainder = Config.ticksPerPart * (remainder - this.part);\n\t\t\tthis.tick = Math.floor(remainder);\n\t\t\tconst samplesPerTick: number = this.getSamplesPerTick();\n\t\t\tremainder = samplesPerTick * (remainder - this.tick);\n\t\t\tthis.tickSampleCountdown = samplesPerTick - remainder;\n\t\t\tthis.prevBar = null;\n\t\t}\n\t}\n\t\n\tpublic getSamplesPerBar(): number {\n\t\tif (this.song == null) throw new Error();\n\t\treturn this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n\t}\n\t\n\tpublic getTicksIntoBar(): number {\n\t\treturn (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n\t}\n\tpublic getCurrentPart(): number {\n\t\treturn (this.beat * Config.partsPerBeat + this.part);\n\t}\n\t\n\tpublic getTotalBars(enableIntro: boolean, enableOutro: boolean): number {\n\t\tif (this.song == null) throw new Error();\n\t\tlet bars: number = this.song.loopLength * (this.loopRepeatCount + 1);\n\t\tif (enableIntro) bars += this.song.loopStart;\n\t\tif (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n\t\treturn bars;\n\t}\n\t\n\tconstructor(song: Song | string | null = null) {\n\t\tthis.computeDelayBufferSizes();\n\t\tif (song != null) this.setSong(song);\n\t}\n\t\n\tpublic setSong(song: Song | string): void {\n\t\tif (typeof(song) == \"string\") {\n\t\t\tthis.song = new Song(song);\n\t\t} else if (song instanceof Song) {\n\t\t\tthis.song = song;\n\t\t}\n\t\tthis.prevBar = null;\n\t}\n\t\n\tprivate computeDelayBufferSizes(): void {\n\t\tthis.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n\t\tthis.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n\t\tthis.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n\t\tthis.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n\t}\n\t\n\tprivate activateAudio(): void {\n\t\tif (this.audioCtx == null || this.scriptNode == null) {\n\t\t\tthis.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)();\n\t\t\tthis.samplesPerSecond = this.audioCtx.sampleRate;\n\t\t\tthis.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); // 2048, 0 input channels, 2 output channels\n\t\t\tthis.scriptNode.onaudioprocess = this.audioProcessCallback;\n\t\t\tthis.scriptNode.channelCountMode = 'explicit';\n\t\t\tthis.scriptNode.channelInterpretation = 'speakers';\n\t\t\tthis.scriptNode.connect(this.audioCtx.destination);\n\t\t\t\n\t\t\tthis.computeDelayBufferSizes();\n\t\t}\n\t\tthis.audioCtx.resume();\n\t}\n\t\n\tprivate deactivateAudio(): void {\n\t\tif (this.audioCtx != null && this.scriptNode != null) {\n\t\t\tthis.scriptNode.disconnect(this.audioCtx.destination);\n\t\t\tthis.scriptNode = null;\n\t\t\tif (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\n\t\t\tthis.audioCtx = null;\n\t\t}\n\t}\n\t\n\tpublic maintainLiveInput(): void {\n\t\tthis.activateAudio();\n\t\tthis.liveInputEndTime = performance.now() + 10000.0;\n\t}\n\t\n\tpublic play(): void {\n\t\tif (this.isPlayingSong) return;\n\t\tthis.isPlayingSong = true;\n\t\tthis.activateAudio();\n\t\tthis.warmUpSynthesizer(this.song);\n\t}\n\t\n\tpublic pause(): void {\n\t\tif (!this.isPlayingSong) return;\n\t\tthis.isPlayingSong = false;\n\t}\n\t\n\tpublic snapToStart(): void {\n\t\tthis.bar = 0;\n\t\tthis.snapToBar();\n\t}\n\t\n\tpublic goToBar(bar: number): void {\n\t\tthis.bar = bar;\n\t\tthis.playheadInternal = this.bar;\n\t\tthis.prevBar = null;\n\t}\n\t\n\tpublic snapToBar(): void {\n\t\tthis.playheadInternal = this.bar;\n\t\tthis.beat = 0;\n\t\tthis.part = 0;\n\t\tthis.tick = 0;\n\t\tthis.tickSampleCountdown = 0;\n\t\tthis.isAtStartOfTick = true;\n\t\tthis.prevBar = null;\n\t}\n\t\n\tpublic resetEffects(): void {\n\t\tthis.limit = 0.0;\n\t\tthis.freeAllTones();\n\t\tif (this.song != null) {\n\t\t\tfor (const channelState of this.channels) {\n\t\t\t\tfor (const instrumentState of channelState.instruments) {\n\t\t\t\t\tinstrumentState.resetAllEffects();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic jumpIntoLoop(): void {\n\t\tif (!this.song) return;\n\t\tif (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n\t\t\tconst oldBar: number = this.bar;\n\t\t\tthis.bar = this.song.loopStart;\n\t\t\tthis.playheadInternal += this.bar - oldBar;\n\t\t\tthis.prevBar = null;\n\t\t}\n\t}\n\t\n\tpublic goToNextBar(): void {\n\t\tif (!this.song) return;\n\t\tthis.prevBar = this.bar;\n\t\tconst oldBar: number = this.bar;\n\t\tthis.bar++;\n\t\tif (this.bar >= this.song.barCount) {\n\t\t\tthis.bar = 0;\n\t\t}\n\t\tthis.playheadInternal += this.bar - oldBar;\n\t}\n\t\n\tpublic goToPrevBar(): void {\n\t\tif (!this.song) return;\n\t\tthis.prevBar = null;\n\t\tconst oldBar: number = this.bar;\n\t\tthis.bar--;\n\t\tif (this.bar < 0 || this.bar >= this.song.barCount) {\n\t\t\tthis.bar = this.song.barCount - 1;\n\t\t}\n\t\tthis.playheadInternal += this.bar - oldBar;\n\t}\n\t\n\tprivate audioProcessCallback = (audioProcessingEvent: any): void => {\n\t\tconst outputBuffer = audioProcessingEvent.outputBuffer;\n\t\tconst outputDataL: Float32Array = outputBuffer.getChannelData(0);\n\t\tconst outputDataR: Float32Array = outputBuffer.getChannelData(1);\n\t\t\n\t\tif (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length-1] != 0.0 || outputDataR[outputBuffer.length-1] != 0.0)) {\n\t\t\t// If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\n\t\t\tthis.browserAutomaticallyClearsAudioBuffer = false;\n\t\t}\n\t\tif (!this.browserAutomaticallyClearsAudioBuffer) {\n\t\t\t// If this browser does not clear the buffer automatically, do so manually before continuing.\n\t\t\tconst length: number = outputBuffer.length;\n\t\t\tfor (let i: number = 0; i < length; i++) {\n\t\t\t\toutputDataL[i] = 0.0;\n\t\t\t\toutputDataR[i] = 0.0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tconst isPlayingLiveTones = performance.now() < this.liveInputEndTime;\n\t\tif (!isPlayingLiveTones && !this.isPlayingSong) {\n\t\t\tthis.deactivateAudio();\n\t\t} else {\n\t\t\tthis.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n\t\t}\n\t}\n\t\n\tpublic synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\n\t\tif (this.song == null) {\n\t\t\tfor (let i: number = 0; i < outputBufferLength; i++) {\n\t\t\t\toutputDataL[i] = 0.0;\n\t\t\t\toutputDataR[i] = 0.0;\n\t\t\t}\n\t\t\tthis.deactivateAudio();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconst song: Song = this.song;\n\t\tconst samplesPerTick: number = this.getSamplesPerTick();\n\t\tlet ended: boolean = false;\n\t\t\n\t\t// Check the bounds of the playhead:\n\t\twhile (this.tickSampleCountdown <= 0) this.tickSampleCountdown += samplesPerTick;\n\t\tif (this.tickSampleCountdown > samplesPerTick) this.tickSampleCountdown = samplesPerTick;\n\t\tif (playSong) {\n\t\t\tif (this.beat >= song.beatsPerBar) {\n\t\t\t\tthis.bar++;\n\t\t\t\tthis.beat = 0;\n\t\t\t\tthis.part = 0;\n\t\t\t\tthis.tick = 0;\n\t\t\t\tthis.tickSampleCountdown = samplesPerTick;\n\t\t\t\n\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == song.loopStart + song.loopLength) {\n\t\t\t\t\tthis.bar = song.loopStart;\n\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.bar >= song.barCount) {\n\t\t\t\tthis.bar = 0;\n\t\t\t\tif (this.loopRepeatCount != -1) {\n\t\t\t\t\tended = true;\n\t\t\t\t\tthis.pause();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//const synthStartTime: number = performance.now();\n\t\t\n\t\tthis.syncSongState();\n\t\t\n\t\tif (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\n\t\t\tthis.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\n\t\t}\n\t\t\n\t\t// Post processing parameters:\n\t\tconst volume: number = +this.volume;\n\t\tconst limitDecay: number = 1.0 - Math.pow(0.5, 4.0 / this.samplesPerSecond);\n\t\tconst limitRise: number = 1.0 - Math.pow(0.5, 4000.0 / this.samplesPerSecond);\n\t\tlet limit: number = +this.limit;\n\t\t\n\t\tlet bufferIndex: number = 0;\n\t\twhile (bufferIndex < outputBufferLength && !ended) {\n\t\t\t\n\t\t\tthis.nextBar = this.bar + 1;\n\t\t\tif (this.loopRepeatCount != 0 && this.nextBar == song.loopStart + song.loopLength) {\n\t\t\t\tthis.nextBar = song.loopStart;\n\t\t\t}\n\t\t\tif (this.nextBar >= song.barCount) this.nextBar = null;\n\t\t\t\n\t\t\tconst samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\n\t\t\tconst samplesLeftInTick: number = Math.ceil(this.tickSampleCountdown);\n\t\t\tconst runLength: number = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n\t\t\tthis.isAtEndOfTick = (runLength >= this.tickSampleCountdown);\n\t\t\tfor (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n\t\t\t\tconst channel: Channel = song.channels[channelIndex];\n\t\t\t\tconst channelState: ChannelState = this.channels[channelIndex];\n\t\t\t\t\n\t\t\t\tthis.determineCurrentActiveTones(song, channelIndex, playSong);\n\t\t\t\tthis.determineLiveInputTones(song, channelIndex);\n\t\t\t\t\n\t\t\t\tfor (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\t\t\t\t\tconst instrument: Instrument = channel.instruments[instrumentIndex];\n\t\t\t\t\tconst instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n\t\t\t\t\tlet tonesPlayedInThisInstrument: number = 0;\n\t\t\t\t\t\n\t\t\t\t\tfor (let i: number = 0; i < instrumentState.activeTones.count(); i++) {\n\t\t\t\t\t\tconst tone: Tone = instrumentState.activeTones.get(i);\n\t\t\t\t\t\tthis.playTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n\t\t\t\t\t\ttonesPlayedInThisInstrument++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (let i: number = 0; i < instrumentState.liveInputTones.count(); i++) {\n\t\t\t\t\t\tconst tone: Tone = instrumentState.liveInputTones.get(i);\n\t\t\t\t\t\tthis.playTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n\t\t\t\t\t\ttonesPlayedInThisInstrument++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n\t\t\t\t\t\tconst tone: Tone = instrumentState.releasedTones.get(i);\n\t\t\t\t\t\tif (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n\t\t\t\t\t\t\tthis.freeReleasedTone(instrumentState, i);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst shouldFadeOutFast: boolean = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n\t\t\t\t\t\tthis.playTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, true, shouldFadeOutFast);\n\t\t\t\t\t\ttonesPlayedInThisInstrument++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (instrumentState.awake) {\n\t\t\t\t\t\tif (!instrumentState.computed) {\n\t\t\t\t\t\t\tinstrumentState.compute(this, instrument, samplesPerTick, runLength, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSynth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrument, instrumentState);\n\t\t\t\t\t\t\n\t\t\t\t\t\tinstrumentState.computed = false;\n\t\t\t\t\t\t//instrumentState.envelopeComputer.clearEnvelopes(instrument);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Post processing:\n\t\t\tconst runEnd: number = bufferIndex + runLength;\n\t\t\tfor (let i: number = bufferIndex; i < runEnd; i++) {\n\t\t\t\t// A compressor/limiter.\n\t\t\t\tconst sampleL = outputDataL[i];\n\t\t\t\tconst sampleR = outputDataR[i];\n\t\t\t\tconst abs: number = Math.max(Math.abs(sampleL), Math.abs(sampleR));\n\t\t\t\tlimit += (abs - limit) * (limit < abs ? limitRise : limitDecay * (1.0 + limit));\n\t\t\t\tconst limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n\t\t\t\toutputDataL[i] = sampleL * limitedVolume;\n\t\t\t\toutputDataR[i] = sampleR * limitedVolume;\n\t\t\t}\n\t\t\t\n\t\t\tbufferIndex += runLength;\n\t\t\t\n\t\t\tthis.isAtStartOfTick = false;\n\t\t\tthis.tickSampleCountdown -= runLength;\n\t\t\tif (this.tickSampleCountdown <= 0) {\n\t\t\t\tthis.isAtStartOfTick = true;\n\t\t\t\t\n\t\t\t\t// Track how long tones have been released, and free ones that are marked as ending.\n\t\t\t\t// Also reset awake InstrumentStates that didn't have any Tones during this tick.\n\t\t\t\tfor (const channelState of this.channels) {\n\t\t\t\t\tfor (const instrumentState of channelState.instruments) {\n\t\t\t\t\t\tfor (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n\t\t\t\t\t\t\tconst tone: Tone = instrumentState.releasedTones.get(i);\n\t\t\t\t\t\t\tif (tone.isOnLastTick) {\n\t\t\t\t\t\t\t\tthis.freeReleasedTone(instrumentState, i);\n\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttone.ticksSinceReleased++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (instrumentState.deactivateAfterThisTick) {\n\t\t\t\t\t\t\tinstrumentState.deactivate();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinstrumentState.tonesAddedInThisTick = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tick++;\n\t\t\t\tthis.tickSampleCountdown += samplesPerTick;\n\t\t\t\tif (this.tick == Config.ticksPerPart) {\n\t\t\t\t\tthis.tick = 0;\n\t\t\t\t\tthis.part++;\n\t\t\t\t\tthis.liveInputDuration--;\n\t\t\t\t\t\n\t\t\t\t\tif (this.part == Config.partsPerBeat) {\n\t\t\t\t\t\tthis.part = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (playSong) {\n\t\t\t\t\t\t\tthis.beat++;\n\t\t\t\t\t\t\tif (this.beat == song.beatsPerBar) {\n\t\t\t\t\t\t\t\t// bar changed, reset for next bar:\n\t\t\t\t\t\t\t\tthis.beat = 0;\n\t\t\t\t\t\t\t\tthis.prevBar = this.bar;\n\t\t\t\t\t\t\t\tthis.bar++;\n\t\t\t\t\t\t\t\tif (this.loopRepeatCount != 0 && this.bar == song.loopStart + song.loopLength) {\n\t\t\t\t\t\t\t\t\tthis.bar = song.loopStart;\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount > 0) this.loopRepeatCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (this.bar >= song.barCount) {\n\t\t\t\t\t\t\t\t\tthis.bar = 0;\n\t\t\t\t\t\t\t\t\tif (this.loopRepeatCount != -1) {\n\t\t\t\t\t\t\t\t\t\tended = true;\n\t\t\t\t\t\t\t\t\t\tthis.resetEffects();\n\t\t\t\t\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Avoid persistent denormal or NaN values.\n\t\tif (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\n\t\tthis.limit = limit;\n\t\t\n\t\tif (playSong) {\n\t\t\tthis.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n\t\t}\n\t\t\n\t\t/*\n\t\tconst synthDuration: number = performance.now() - synthStartTime;\n\t\t// Performance measurements:\n\t\tsamplesAccumulated += outputBufferLength;\n\t\tsamplePerformance += synthDuration;\n\t\t\n\t\tif (samplesAccumulated >= 44100 * 4) {\n\t\t\tconst secondsGenerated = samplesAccumulated / 44100;\n\t\t\tconst secondsRequired = samplePerformance / 1000;\n\t\t\tconst ratio = secondsRequired / secondsGenerated;\n\t\t\tconsole.log(ratio);\n\t\t\tsamplePerformance = 0;\n\t\t\tsamplesAccumulated = 0;\n\t\t}\n\t\t*/\n\t}\n\t\n\tprivate freeTone(tone: Tone): void {\n\t\tthis.tonePool.pushBack(tone);\n\t}\n\t\n\tprivate newTone(): Tone {\n\t\tif (this.tonePool.count() > 0) {\n\t\t\tconst tone: Tone = this.tonePool.popBack();\n\t\t\ttone.freshlyAllocated = true;\n\t\t\treturn tone;\n\t\t}\n\t\treturn new Tone();\n\t}\n\t\n\tprivate releaseTone(instrumentState: InstrumentState, tone: Tone): void {\n\t\tinstrumentState.releasedTones.pushFront(tone);\n\t\ttone.atNoteStart = false;\n\t\ttone.passedEndOfNote = true;\n\t}\n\t\n\tprivate freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\n\t\tthis.freeTone(instrumentState.releasedTones.get(toneIndex));\n\t\tinstrumentState.releasedTones.remove(toneIndex);\n\t}\n\t\n\tpublic freeAllTones(): void {\n\t\tfor (const channelState of this.channels) {\n\t\t\tfor (const instrumentState of channelState.instruments) {\n\t\t\t\twhile (instrumentState.activeTones.count()    > 0) this.freeTone(instrumentState.activeTones.popBack());\n\t\t\t\twhile (instrumentState.releasedTones.count()  > 0) this.freeTone(instrumentState.releasedTones.popBack());\n\t\t\t\twhile (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate determineLiveInputTones(song: Song, channelIndex: number): void {\n\t\tconst channel: Channel = song.channels[channelIndex];\n\t\tconst channelState: ChannelState = this.channels[channelIndex];\n\t\tconst pitches: number[] = this.liveInputPitches;\n\t\t\n\t\tfor (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\t\t\tconst instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n\t\t\tconst toneList: Deque<Tone> = instrumentState.liveInputTones;\n\t\t\tlet toneCount: number = 0;\n\t\t\tif (this.liveInputDuration > 0 && channelIndex == this.liveInputChannel && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n\t\t\t\tconst instrument: Instrument = channel.instruments[instrumentIndex];\n\t\t\t\t\n\t\t\t\tif (instrument.getChord().singleTone) {\n\t\t\t\t\tlet tone: Tone;\n\t\t\t\t\tif (toneList.count() <= toneCount) {\n\t\t\t\t\t\ttone = this.newTone();\n\t\t\t\t\t\ttoneList.pushBack(tone);\n\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n\t\t\t\t\t\tthis.releaseTone(instrumentState, toneList.get(toneCount));\n\t\t\t\t\t\ttone = this.newTone();\n\t\t\t\t\t\ttoneList.set(toneCount, tone);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttone = toneList.get(toneCount);\n\t\t\t\t\t}\n\t\t\t\t\ttoneCount++;\n\t\t\t\t\t\n\t\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\n\t\t\t\t\t\ttone.pitches[i] = pitches[i];\n\t\t\t\t\t}\n\t\t\t\t\ttone.pitchCount = pitches.length;\n\t\t\t\t\ttone.chordSize = 1;\n\t\t\t\t\ttone.instrumentIndex = instrumentIndex;\n\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\n\t\t\t\t\ttone.atNoteStart = this.liveInputStarted;\n\t\t\t\t\ttone.forceContinueAtStart = false;\n\t\t\t\t\ttone.forceContinueAtEnd = false;\n\t\t\t\t} else {\n\t\t\t\t\t//const transition: Transition = instrument.getTransition();\n\t\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\n\t\t\t\t\t\t//const strumOffsetParts: number = i * instrument.getChord().strumParts;\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet tone: Tone;\n\t\t\t\t\t\tif (toneList.count() <= toneCount) {\n\t\t\t\t\t\t\ttone = this.newTone();\n\t\t\t\t\t\t\ttoneList.pushBack(tone);\n\t\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n\t\t\t\t\t\t\tthis.releaseTone(instrumentState, toneList.get(toneCount));\n\t\t\t\t\t\t\ttone = this.newTone();\n\t\t\t\t\t\t\ttoneList.set(toneCount, tone);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttone = toneList.get(toneCount);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttoneCount++;\n\t\t\t\t\t\t\n\t\t\t\t\t\ttone.pitches[0] = pitches[i];\n\t\t\t\t\t\ttone.pitchCount = 1;\n\t\t\t\t\t\ttone.chordSize = pitches.length;\n\t\t\t\t\t\ttone.instrumentIndex = instrumentIndex;\n\t\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\n\t\t\t\t\t\ttone.atNoteStart = this.liveInputStarted;\n\t\t\t\t\t\ttone.forceContinueAtStart = false;\n\t\t\t\t\t\ttone.forceContinueAtEnd = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\twhile (toneList.count() > toneCount) {\n\t\t\t\tthis.releaseTone(instrumentState, toneList.popBack());\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.liveInputStarted = false;\n\t}\n\t\n\t// Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\n\t// seamless transition across patterns, otherwise returns null.\n\tprivate adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean): Chord | null {\n\t\tif (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n\t\t\t// The adjacent pattern does not contain the same instrument as the current pattern.\n\t\t\t\n\t\t\tif (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n\t\t\t\t// The current or adjacent pattern contains more than one instrument, don't bother\n\t\t\t\t// trying to connect them.\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// Otherwise, the two patterns each contain one instrument, but not the same instrument.\n\t\t\t// Try to connect them.\n\t\t\tconst otherInstrument: Instrument = channel.instruments[otherPattern.instruments[0]];\n\t\t\t\n\t\t\tif (forceContinue) {\n\t\t\t\t// Even non-seamless instruments can be connected across patterns if forced.\n\t\t\t\treturn otherInstrument.getChord();\n\t\t\t}\n\t\t\t\n\t\t\t// Otherwise, check that both instruments are seamless across patterns.\n\t\t\tconst otherTransition: Transition = otherInstrument.getTransition();\n\t\t\tif (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n\t\t\t\treturn otherInstrument.getChord();\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\t// If both patterns contain the same instrument, check that it is seamless across patterns.\n\t\t\treturn (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n\t\t}\n\t}\n\t\n\tpublic static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\n\t\tif (firstNote.pitches.length != secondNote.pitches.length) return false;\n\t\tconst firstNoteInterval: number = firstNote.pins[firstNote.pins.length - 1].interval;\n\t\tfor (const pitch of firstNote.pitches) {\n\t\t\tif (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tprivate determineCurrentActiveTones(song: Song, channelIndex: number, playSong: boolean): void {\n\t\tconst channel: Channel = song.channels[channelIndex];\n\t\tconst channelState: ChannelState = this.channels[channelIndex];\n\t\tconst pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\n\t\tconst currentPart: number = this.getCurrentPart();\n\t\tconst currentTick: number = this.tick + Config.ticksPerPart * currentPart;\n\t\tlet note: Note | null = null;\n\t\tlet prevNote: Note | null = null;\n\t\tlet nextNote: Note | null = null;\n\t\t\n\t\tif (playSong && pattern != null && !channel.muted) {\n\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\n\t\t\t\tif (pattern.notes[i].end <= currentPart) {\n\t\t\t\t\tprevNote = pattern.notes[i];\n\t\t\t\t} else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n\t\t\t\t\tnote = pattern.notes[i];\n\t\t\t\t} else if (pattern.notes[i].start > currentPart) {\n\t\t\t\t\tnextNote = pattern.notes[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (note != null) {\n\t\t\t\tif (prevNote != null && prevNote.end != note.start) prevNote = null;\n\t\t\t\tif (nextNote != null && nextNote.start != note.end) nextNote = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n\t\tif (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n\t\t\tconst newInstrumentIndex: number = song.patternInstruments ? pattern.instruments[0] : 0;\n\t\t\tif (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n\t\t\t\tconst sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n\t\t\t\tconst destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n\t\t\t\twhile (sourceInstrumentState.activeTones.count() > 0) {\n\t\t\t\t\tdestInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n\t\t\t\t}\n\t\t\t}\n\t\t\tchannelState.singleSeamlessInstrument = newInstrumentIndex;\n\t\t} else {\n\t\t\tchannelState.singleSeamlessInstrument = null;\n\t\t}\n\t\t\n\t\tfor (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\t\t\tconst instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n\t\t\tconst toneList: Deque<Tone> = instrumentState.activeTones;\n\t\t\tlet toneCount: number = 0;\n\t\t\tif ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\n\t\t\t\tconst instrument: Instrument = channel.instruments[instrumentIndex];\n\t\t\t\tlet prevNoteForThisInstrument: Note | null = prevNote;\n\t\t\t\tlet nextNoteForThisInstrument: Note | null = nextNote;\n\t\t\t\t\n\t\t\t\tconst partsPerBar: Number = Config.partsPerBeat * song.beatsPerBar;\n\t\t\t\tconst transition: Transition = instrument.getTransition();\n\t\t\t\tconst chord: Chord = instrument.getChord();\n\t\t\t\tlet forceContinueAtStart: boolean = false;\n\t\t\t\tlet forceContinueAtEnd: boolean = false;\n\t\t\t\tlet tonesInPrevNote: number = 0;\n\t\t\t\tlet tonesInNextNote: number = 0;\n\t\t\t\tif (note.start == 0) {\n\t\t\t\t\t// If the beginning of the note coincides with the beginning of the pattern,\n\t\t\t\t\t// look for an adjacent note at the end of the previous pattern.\n\t\t\t\t\tlet prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n\t\t\t\t\tif (prevPattern != null) {\n\t\t\t\t\t\tconst lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n\t\t\t\t\t\tif (lastNote != null && lastNote.end == partsPerBar) {\n\t\t\t\t\t\t\tconst patternForcesContinueAtStart: boolean = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n\t\t\t\t\t\t\tconst chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n\t\t\t\t\t\t\tif (chordOfCompatibleInstrument != null) {\n\t\t\t\t\t\t\t\tprevNoteForThisInstrument = lastNote;\n\t\t\t\t\t\t\t\ttonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n\t\t\t\t\t\t\t\tforceContinueAtStart = patternForcesContinueAtStart;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (prevNoteForThisInstrument != null) {\n\t\t\t\t\ttonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n\t\t\t\t}\n\t\t\t\tif (note.end == partsPerBar) {\n\t\t\t\t\t// If the end of the note coincides with the end of the pattern, look for an\n\t\t\t\t\t// adjacent note at the beginning of the next pattern.\n\t\t\t\t\tlet nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n\t\t\t\t\tif (nextPattern != null) {\n\t\t\t\t\t\tconst firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n\t\t\t\t\t\tif (firstNote != null && firstNote.start == 0) {\n\t\t\t\t\t\t\tconst nextPatternForcesContinueAtStart: boolean = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n\t\t\t\t\t\t\tconst chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n\t\t\t\t\t\t\tif (chordOfCompatibleInstrument != null) {\n\t\t\t\t\t\t\t\tnextNoteForThisInstrument = firstNote;\n\t\t\t\t\t\t\t\ttonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n\t\t\t\t\t\t\t\tforceContinueAtEnd = nextPatternForcesContinueAtStart;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (nextNoteForThisInstrument != null) {\n\t\t\t\t\ttonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (chord.singleTone) {\n\t\t\t\t\tconst atNoteStart: boolean = (Config.ticksPerPart * note.start == currentTick) && this.isAtStartOfTick;\n\t\t\t\t\tlet tone: Tone;\n\t\t\t\t\tif (toneList.count() <= toneCount) {\n\t\t\t\t\t\ttone = this.newTone();\n\t\t\t\t\t\ttoneList.pushBack(tone);\n\t\t\t\t\t} else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n\t\t\t\t\t\tconst oldTone: Tone = toneList.get(toneCount);\n\t\t\t\t\t\tif (oldTone.isOnLastTick) {\n\t\t\t\t\t\t\tthis.freeTone(oldTone);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.releaseTone(instrumentState, oldTone);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttone = this.newTone();\n\t\t\t\t\t\ttoneList.set(toneCount, tone);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttone = toneList.get(toneCount);\n\t\t\t\t\t}\n\t\t\t\t\ttoneCount++;\n\t\t\t\t\t\n\t\t\t\t\tfor (let i: number = 0; i < note.pitches.length; i++) {\n\t\t\t\t\t\ttone.pitches[i] = note.pitches[i];\n\t\t\t\t\t}\n\t\t\t\t\ttone.pitchCount = note.pitches.length;\n\t\t\t\t\ttone.chordSize = 1;\n\t\t\t\t\ttone.instrumentIndex = instrumentIndex;\n\t\t\t\t\ttone.note = note;\n\t\t\t\t\ttone.noteStartPart = note.start;\n\t\t\t\t\ttone.noteEndPart = note.end;\n\t\t\t\t\ttone.prevNote = prevNoteForThisInstrument;\n\t\t\t\t\ttone.nextNote = nextNoteForThisInstrument;\n\t\t\t\t\ttone.prevNotePitchIndex = 0;\n\t\t\t\t\ttone.nextNotePitchIndex = 0;\n\t\t\t\t\ttone.atNoteStart = atNoteStart;\n\t\t\t\t\ttone.passedEndOfNote = false;\n\t\t\t\t\ttone.forceContinueAtStart = forceContinueAtStart;\n\t\t\t\t\ttone.forceContinueAtEnd = forceContinueAtEnd;\n\t\t\t\t} else {\n\t\t\t\t\tconst transition: Transition = instrument.getTransition();\n\t\t\t\t\t\n\t\t\t\t\tif (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && this.isAtStartOfTick && prevNoteForThisInstrument != null) {\n\t\t\t\t\t\t// The tones are about to seamlessly transition to a new note. The pitches\n\t\t\t\t\t\t// from the old note may or may not match any of the pitches in the new\n\t\t\t\t\t\t// note, and not necessarily in order, but if any do match, they'll sound\n\t\t\t\t\t\t// better if those tones continue to have the same pitch. Attempt to find\n\t\t\t\t\t\t// the right spot for each old tone in the new chord if possible.\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (let i: number = 0; i < toneList.count(); i++) {\n\t\t\t\t\t\t\tconst tone: Tone = toneList.get(i);\n\t\t\t\t\t\t\tconst pitch: number = tone.pitches[0] + tone.lastInterval;\n\t\t\t\t\t\t\tfor (let j: number = 0; j < note.pitches.length; j++) {\n\t\t\t\t\t\t\t\tif (note.pitches[j] == pitch) {\n\t\t\t\t\t\t\t\t\tthis.tempMatchedPitchTones[j] = tone;\n\t\t\t\t\t\t\t\t\ttoneList.remove(i);\n\t\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Any tones that didn't get matched should just fill in the gaps.\n\t\t\t\t\t\twhile (toneList.count() > 0) {\n\t\t\t\t\t\t\tconst tone: Tone = toneList.popFront();\n\t\t\t\t\t\t\tfor (let j: number = 0; j < this.tempMatchedPitchTones.length; j++) {\n\t\t\t\t\t\t\t\tif (this.tempMatchedPitchTones[j] == null) {\n\t\t\t\t\t\t\t\t\tthis.tempMatchedPitchTones[j] = tone;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlet strumOffsetParts: number = 0;\n\t\t\t\t\tfor (let i: number = 0; i < note.pitches.length; i++) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n\t\t\t\t\t\tlet noteForThisTone: Note = note;\n\t\t\t\t\t\tlet nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n\t\t\t\t\t\tlet noteStartPart: number = noteForThisTone.start + strumOffsetParts;\n\t\t\t\t\t\tlet passedEndOfNote: boolean = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Strumming may mean that a note's actual start time may be after the\n\t\t\t\t\t\t// note's displayed start time. If the note start hasn't been reached yet,\n\t\t\t\t\t\t// carry over the previous tone if available and seamless, otherwise skip\n\t\t\t\t\t\t// the new tone until it is ready to start.\n\t\t\t\t\t\tif (noteStartPart > currentPart) {\n\t\t\t\t\t\t\tif (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n\t\t\t\t\t\t\t\t// Continue the previous note's chord until the current one takes over.\n\t\t\t\t\t\t\t\tnextNoteForThisTone = noteForThisTone;\n\t\t\t\t\t\t\t\tnoteForThisTone = prevNoteForThisTone;\n\t\t\t\t\t\t\t\tprevNoteForThisTone = null;\n\t\t\t\t\t\t\t\tnoteStartPart = noteForThisTone.start + strumOffsetParts;\n\t\t\t\t\t\t\t\tpassedEndOfNote = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// This and the rest of the tones in the chord shouldn't start yet.\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet noteEndPart: number = noteForThisTone.end;\n\t\t\t\t\t\tif ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n\t\t\t\t\t\t\tnoteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n\t\t\t\t\t\t\tstrumOffsetParts += chord.strumParts;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst atNoteStart: boolean = (Config.ticksPerPart * noteStartPart == currentTick) && this.isAtStartOfTick;\n\t\t\t\t\t\tlet tone: Tone;\n\t\t\t\t\t\tif (this.tempMatchedPitchTones[toneCount] != null) {\n\t\t\t\t\t\t\ttone = this.tempMatchedPitchTones[toneCount]!;\n\t\t\t\t\t\t\tthis.tempMatchedPitchTones[toneCount] = null;\n\t\t\t\t\t\t\ttoneList.pushBack(tone);\n\t\t\t\t\t\t} else if (toneList.count() <= toneCount) {\n\t\t\t\t\t\t\ttone = this.newTone();\n\t\t\t\t\t\t\ttoneList.pushBack(tone);\n\t\t\t\t\t\t} else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n\t\t\t\t\t\t\tconst oldTone: Tone = toneList.get(toneCount);\n\t\t\t\t\t\t\tif (oldTone.isOnLastTick) {\n\t\t\t\t\t\t\t\tthis.freeTone(oldTone);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.releaseTone(instrumentState, oldTone);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttone = this.newTone();\n\t\t\t\t\t\t\ttoneList.set(toneCount, tone);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttone = toneList.get(toneCount);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttoneCount++;\n\t\t\t\t\t\t\n\t\t\t\t\t\ttone.pitches[0] = noteForThisTone.pitches[i];\n\t\t\t\t\t\ttone.pitchCount = 1;\n\t\t\t\t\t\ttone.chordSize = noteForThisTone.pitches.length;\n\t\t\t\t\t\ttone.instrumentIndex = instrumentIndex;\n\t\t\t\t\t\ttone.note = noteForThisTone;\n\t\t\t\t\t\ttone.noteStartPart = noteStartPart;\n\t\t\t\t\t\ttone.noteEndPart = noteEndPart;\n\t\t\t\t\t\ttone.prevNote = prevNoteForThisTone;\n\t\t\t\t\t\ttone.nextNote = nextNoteForThisTone;\n\t\t\t\t\t\ttone.prevNotePitchIndex = i;\n\t\t\t\t\t\ttone.nextNotePitchIndex = i;\n\t\t\t\t\t\ttone.atNoteStart = atNoteStart;\n\t\t\t\t\t\ttone.passedEndOfNote = passedEndOfNote;\n\t\t\t\t\t\ttone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n\t\t\t\t\t\ttone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Automatically free or release seamless tones if there's no new note to take over.\n\t\t\twhile (toneList.count() > toneCount) {\n\t\t\t\tconst tone: Tone = toneList.popBack();\n\t\t\t\tconst channel: Channel = song.channels[channelIndex];\n\t\t\t\tif (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n\t\t\t\t\tconst instrumentState: InstrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n\t\t\t\t\tthis.releaseTone(instrumentState, tone);\n\t\t\t\t} else {\n\t\t\t\t\tthis.freeTone(tone);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (let i: number = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n\t\t\t\tconst oldTone: Tone | null = this.tempMatchedPitchTones[i];\n\t\t\t\tif (oldTone != null) {\n\t\t\t\t\tif (oldTone.isOnLastTick) {\n\t\t\t\t\t\tthis.freeTone(oldTone);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.releaseTone(instrumentState, oldTone);\n\t\t\t\t\t}\n\t\t\t\t\tthis.tempMatchedPitchTones[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate playTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n\t\tconst channel: Channel = song.channels[channelIndex];\n\t\tconst channelState: ChannelState = this.channels[channelIndex];\n\t\tconst instrument: Instrument = channel.instruments[tone.instrumentIndex];\n\t\tconst instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n\t\t\n\t\tinstrumentState.awake = true;\n\t\tinstrumentState.tonesAddedInThisTick = true;\n\t\tif (!instrumentState.computed) {\n\t\t\tinstrumentState.compute(this, instrument, samplesPerTick, runLength, tone);\n\t\t}\n\t\t\n\t\tSynth.computeTone(this, song, channelIndex, samplesPerTick, runLength, tone, released, shouldFadeOutFast);\n\t\tconst synthesizer: Function = Synth.getInstrumentSynthFunction(instrument);\n\t\tsynthesizer(this, bufferIndex, runLength, tone, instrument);\n\t\ttone.envelopeComputer.clearEnvelopes(instrument);\n\t}\n\t\n\tprivate static computeChordExpression(chordSize: number): number {\n\t\treturn 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n\t}\n\t\n\tprivate static computeTone(synth: Synth, song: Song, channelIndex: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n\t\tconst channel: Channel = song.channels[channelIndex];\n\t\tconst instrument: Instrument = channel.instruments[tone.instrumentIndex];\n\t\tconst transition: Transition = instrument.getTransition();\n\t\tconst chord: Chord = instrument.getChord();\n\t\tconst chordExpression: number = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n\t\tconst isNoiseChannel: boolean = song.getChannelIsNoise(channelIndex);\n\t\tconst intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\n\t\tconst secondsPerPart: number = Config.ticksPerPart * samplesPerTick / synth.samplesPerSecond;\n\t\tconst sampleTime: number = 1.0 / synth.samplesPerSecond;\n\t\tconst beatsPerPart: number = 1.0 / Config.partsPerBeat;\n\t\tconst tickSampleCountdown: number = synth.tickSampleCountdown;\n\t\tconst startRatio: number = 1.0 - (tickSampleCountdown            ) / samplesPerTick;\n\t\tconst endRatio:   number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n\t\tconst ticksIntoBar: number = synth.getTicksIntoBar();\n\t\tconst partTimeTickStart: number = (ticksIntoBar    ) / Config.ticksPerPart;\n\t\tconst partTimeTickEnd:   number = (ticksIntoBar + 1) / Config.ticksPerPart;\n\t\tconst partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n\t\tconst partTimeEnd: number   = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n\t\tconst currentPart: number = synth.getCurrentPart();\n\t\t\n\t\ttone.specialIntervalMult = 1.0;\n\t\ttone.specialIntervalExpressionMult = 1.0;\n\t\t\n\t\tlet toneIsOnLastTick: boolean = shouldFadeOutFast;\n\t\tlet intervalStart: number = 0.0;\n\t\tlet intervalEnd: number = 0.0;\n\t\tlet transitionExpressionStart: number = 1.0;\n\t\tlet transitionExpressionEnd: number = 1.0;\n\t\tlet chordExpressionStart: number = chordExpression;\n\t\tlet chordExpressionEnd:   number = chordExpression;\n\t\t\n\t\tlet expressionReferencePitch: number = 16; // A low \"E\" as a MIDI pitch.\n\t\tlet basePitch: number = Config.keys[song.key].basePitch;\n\t\tlet baseExpression: number = 1.0;\n\t\tlet pitchDamping: number = 48;\n\t\tif (instrument.type == InstrumentType.spectrum) {\n\t\t\tbaseExpression = Config.spectrumBaseExpression;\n\t\t\tif (isNoiseChannel) {\n\t\t\t\tbasePitch = Config.spectrumBasePitch;\n\t\t\t\tbaseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\n\t\t\t}\n\t\t\texpressionReferencePitch = Config.spectrumBasePitch;\n\t\t\tpitchDamping = 28;\n\t\t} else if (instrument.type == InstrumentType.drumset) {\n\t\t\tbasePitch = Config.spectrumBasePitch;\n\t\t\tbaseExpression = Config.drumsetBaseExpression;\n\t\t\texpressionReferencePitch = basePitch;\n\t\t} else if (instrument.type == InstrumentType.noise) {\n\t\t\tbasePitch = Config.chipNoises[instrument.chipNoise].basePitch;\n\t\t\tbaseExpression = Config.noiseBaseExpression;\n\t\t\texpressionReferencePitch = basePitch;\n\t\t\tpitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n\t\t} else if (instrument.type == InstrumentType.fm) {\n\t\t\tbaseExpression = Config.fmBaseExpression;\n\t\t} else if (instrument.type == InstrumentType.chip) {\n\t\t\tbaseExpression = Config.chipBaseExpression;\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\n\t\t\tbaseExpression = Config.harmonicsBaseExpression;\n\t\t} else if (instrument.type == InstrumentType.pwm) {\n\t\t\tbaseExpression = Config.pwmBaseExpression;\n\t\t} else if (instrument.type == InstrumentType.pickedString) {\n\t\t\tbaseExpression = Config.pickedStringBaseExpression;\n\t\t} else {\n\t\t\tthrow new Error(\"Unknown instrument type in computeTone.\");\n\t\t}\n\t\t\n\t\tif ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n\t\t\ttone.reset();\n\t\t}\n\t\ttone.freshlyAllocated = false;\n\t\t\n\t\tconst maxWaves: number = Math.max(Config.maxChordSize, Config.operatorCount);\n\t\tfor (let i: number = 0; i < maxWaves; i++) {\n\t\t\ttone.phaseDeltas[i] = 0.0;\n\t\t\ttone.expressionStarts[i] = 0.0;\n\t\t\ttone.expressionDeltas[i] = 0.0;\n\t\t\ttone.phaseDeltaScales[i] = 0.0;\n\t\t}\n\n\t\tif (released) {\n\t\t\tconst startTicksSinceReleased: number = tone.ticksSinceReleased + startRatio;\n\t\t\tconst endTicksSinceReleased:   number = tone.ticksSinceReleased + endRatio;\n\t\t\tintervalStart = intervalEnd = tone.lastInterval;\n\t\t\tconst fadeOutTicks: number = Math.abs(instrument.getFadeOutTicks());\n\t\t\ttransitionExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n\t\t\ttransitionExpressionEnd   = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n\t\t\t\n\t\t\tif (shouldFadeOutFast) {\n\t\t\t\ttransitionExpressionStart *= 1.0 - startRatio;\n\t\t\t\ttransitionExpressionEnd *= 1.0 - endRatio;\n\t\t\t}\n\t\t\t\n\t\t\tif (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\n\t\t} else if (tone.note == null) {\n\t\t\ttransitionExpressionStart = transitionExpressionEnd = 1;\n\t\t\ttone.lastInterval = 0;\n\t\t\ttone.ticksSinceReleased = 0;\n\t\t\ttone.liveInputSamplesHeld += runLength;\n\t\t} else {\n\t\t\tconst note: Note = tone.note;\n\t\t\tconst nextNote: Note | null = tone.nextNote;\n\n\t\t\tconst noteStartPart: number = tone.noteStartPart;\n\t\t\tconst noteEndPart: number = tone.noteEndPart;\n\t\t\t\n\t\t\tconst endPinIndex: number = note.getEndPinIndex(currentPart);\n\t\t\tconst startPin: NotePin = note.pins[endPinIndex-1];\n\t\t\tconst endPin: NotePin = note.pins[endPinIndex];\n\t\t\tconst noteStartTick: number = noteStartPart * Config.ticksPerPart;\n\t\t\tconst noteEndTick:   number = noteEndPart   * Config.ticksPerPart;\n\t\t\tconst pinStart: number  = (note.start + startPin.time) * Config.ticksPerPart;\n\t\t\tconst pinEnd:   number  = (note.start +   endPin.time) * Config.ticksPerPart;\n\t\t\t\n\t\t\ttone.ticksSinceReleased = 0;\n\t\t\t\n\t\t\tconst tickTimeStart: number = currentPart * Config.ticksPerPart + synth.tick;\n\t\t\tconst tickTimeEnd:   number = currentPart * Config.ticksPerPart + synth.tick + 1;\n\t\t\tconst noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\n\t\t\tconst noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\n\t\t\tconst pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n\t\t\tconst pinRatioEnd:   number = Math.min(1.0, (tickTimeEnd   - pinStart) / (pinEnd - pinStart));\n\t\t\tlet transitionExpressionTickStart: number = 1.0;\n\t\t\tlet transitionExpressionTickEnd:   number = 1.0;\n\t\t\tlet intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n\t\t\tlet intervalTickEnd:   number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n\t\t\ttone.lastInterval = intervalTickEnd;\n\t\t\t\n\t\t\tif ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n\t\t\t\tconst fadeOutTicks: number = -instrument.getFadeOutTicks();\n\t\t\t\tif (fadeOutTicks > 0.0) {\n\t\t\t\t\t// If the tone should fade out before the end of the note, do so here.\n\t\t\t\t\tconst noteLengthTicks: number = noteEndTick - noteStartTick;\n\t\t\t\t\ttransitionExpressionTickStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n\t\t\t\t\ttransitionExpressionTickEnd   *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n\t\t\t\t\tif (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tintervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\n\t\t\tintervalEnd   = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\n\t\t\ttransitionExpressionStart = transitionExpressionTickStart + (transitionExpressionTickEnd - transitionExpressionTickStart) * startRatio;\n\t\t\ttransitionExpressionEnd   = transitionExpressionTickStart + (transitionExpressionTickEnd - transitionExpressionTickStart) * endRatio;\n\t\t}\n\t\t\n\t\ttone.isOnLastTick = toneIsOnLastTick;\n\t\t\n\t\t// Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\n\t\tconst envelopeComputer: EnvelopeComputer = tone.envelopeComputer;\n\t\tenvelopeComputer.computeEnvelopes(instrument, currentPart, Config.ticksPerPart * partTimeStart, Config.ticksPerPart * partTimeEnd, secondsPerPart * (partTimeEnd - partTimeStart), tone);\n\t\tconst envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\n\t\tconst envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\n\t\t\n\t\tif (tone.note != null && transition.slides) {\n\t\t\t// Slide interval and chordExpression at the start and/or end of the note if necessary.\n\t\t\tconst prevNote: Note | null = tone.prevNote;\n\t\t\tconst nextNote: Note | null = tone.nextNote;\n\t\t\tif (prevNote != null) {\n\t\t\t\tconst intervalDiff: number = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length-1].interval - tone.pitches[0];\n\t\t\t\tif (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n\t\t\t\tif (envelopeComputer.prevSlideEnd)   intervalEnd   += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n\t\t\t\tif (!chord.singleTone) {\n\t\t\t\t\tconst chordSizeDiff: number = prevNote.pitches.length - tone.chordSize;\n\t\t\t\t\tif (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n\t\t\t\t\tif (envelopeComputer.prevSlideEnd)   chordExpressionEnd   = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (nextNote != null) {\n\t\t\t\tconst intervalDiff: number = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length-1].interval);\n\t\t\t\tif (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n\t\t\t\tif (envelopeComputer.nextSlideEnd)   intervalEnd   += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n\t\t\t\tif (!chord.singleTone) {\n\t\t\t\t\tconst chordSizeDiff: number = nextNote.pitches.length - tone.chordSize;\n\t\t\t\t\tif (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n\t\t\t\t\tif (envelopeComputer.nextSlideEnd)   chordExpressionEnd   = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (effectsIncludePitchShift(instrument.effects)) {\n\t\t\tconst pitchShift: number = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n\t\t\tconst envelopeStart: number = envelopeStarts[NoteAutomationIndex.pitchShift];\n\t\t\tconst envelopeEnd:   number = envelopeEnds[  NoteAutomationIndex.pitchShift];\n\t\t\tintervalStart += pitchShift * envelopeStart;\n\t\t\tintervalEnd   += pitchShift * envelopeEnd;\n\t\t}\n\t\tif (effectsIncludeDetune(instrument.effects)) {\n\t\t\tconst envelopeStart: number = envelopeStarts[NoteAutomationIndex.detune];\n\t\t\tconst envelopeEnd:   number = envelopeEnds[  NoteAutomationIndex.detune];\n\t\t\tintervalStart += Synth.detuneToCents((instrument.detune - Config.detuneCenter) * envelopeStart) * Config.pitchesPerOctave / (12.0 * 100.0);\n\t\t\tintervalEnd   += Synth.detuneToCents((instrument.detune - Config.detuneCenter) * envelopeEnd  ) * Config.pitchesPerOctave / (12.0 * 100.0);\n\t\t}\n\t\t\n\t\tif (effectsIncludeVibrato(instrument.effects)) {\n\t\t\tconst delayTicks: number = Config.vibratos[instrument.vibrato].delayTicks;\n\t\t\tconst vibratoAmplitude: number = Config.vibratos[instrument.vibrato].amplitude;\n\t\t\t\n\t\t\t// To maintain pitch continuity, (mostly for picked string which retriggers impulse\n\t\t\t// otherwise) remember the vibrato at the end of this run and reuse it at the start\n\t\t\t// of the next run if available.\n\t\t\tlet vibratoStart: number;\n\t\t\tif (tone.prevVibrato != null) {\n\t\t\t\tvibratoStart = tone.prevVibrato;\n\t\t\t} else {\n\t\t\t\tlet lfoStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * partTimeStart);\n\t\t\t\tconst vibratoDepthEnvelopeStart: number = envelopeStarts[NoteAutomationIndex.vibratoDepth];\n\t\t\t\tvibratoStart = vibratoAmplitude * lfoStart * vibratoDepthEnvelopeStart;\n\t\t\t\tif (delayTicks > 0.0) {\n\t\t\t\t\tconst ticksUntilVibratoStart: number = delayTicks - envelopeComputer.noteTicksStart;\n\t\t\t\t\tvibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlet lfoEnd:   number = Synth.getLFOAmplitude(instrument, secondsPerPart * partTimeEnd);\n\t\t\tconst vibratoDepthEnvelopeEnd:   number = envelopeEnds[  NoteAutomationIndex.vibratoDepth];\n\t\t\tlet vibratoEnd:   number = vibratoAmplitude * lfoEnd   * vibratoDepthEnvelopeEnd;\n\t\t\tif (delayTicks > 0.0) {\n\t\t\t\tconst ticksUntilVibratoEnd:   number = delayTicks - envelopeComputer.noteTicksEnd;\n\t\t\t\tvibratoEnd   *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd   / 2.0));\n\t\t\t}\n\t\t\ttone.prevVibrato = vibratoEnd;\n\t\t\t\n\t\t\tintervalStart += vibratoStart;\n\t\t\tintervalEnd   += vibratoEnd;\n\t\t}\n\t\t\n\t\tif ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n\t\t\t// Fade in the beginning of the note.\n\t\t\tconst fadeInSeconds: number = instrument.getFadeInSeconds();\n\t\t\tif (fadeInSeconds > 0.0) {\n\t\t\t\ttransitionExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStart / fadeInSeconds);\n\t\t\t\ttransitionExpressionEnd   *= Math.min(1.0, envelopeComputer.noteSecondsEnd   / fadeInSeconds);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\n\t\t\t// It's possible that the note will change while the user is editing it,\n\t\t\t// but the tone's pitches don't get updated because the tone has already\n\t\t\t// ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\n\t\t\ttone.drumsetPitch = tone.pitches[0];\n\t\t\tif (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\n\t\t\ttone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n\t\t}\n\t\t\n\t\tlet noteFilterExpression: number = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n\t\tif (!effectsIncludeNoteFilter(instrument.effects)) {\n\t\t\ttone.noteFilterCount = 0;\n\t\t} else {\n\t\t\tconst noteFilterSettings: FilterSettings = instrument.noteFilter;\n\t\t\t\n\t\t\tconst noteAllFreqsEnvelopeStart: number = envelopeStarts[NoteAutomationIndex.noteFilterAllFreqs];\n\t\t\tconst noteAllFreqsEnvelopeEnd:   number = envelopeEnds[  NoteAutomationIndex.noteFilterAllFreqs];\n\t\t\tfor (let i: number = 0; i < noteFilterSettings.controlPointCount; i++) {\n\t\t\t\tconst noteFreqEnvelopeStart: number = envelopeStarts[NoteAutomationIndex.noteFilterFreq0 + i];\n\t\t\t\tconst noteFreqEnvelopeEnd:   number = envelopeEnds[  NoteAutomationIndex.noteFilterFreq0 + i];\n\t\t\t\tconst notePeakEnvelopeStart: number = envelopeStarts[NoteAutomationIndex.noteFilterGain0 + i];\n\t\t\t\tconst notePeakEnvelopeEnd:   number = envelopeEnds[  NoteAutomationIndex.noteFilterGain0 + i];\n\t\t\t\tconst point: FilterControlPoint = noteFilterSettings.controlPoints[i];\n\t\t\t\tpoint.toCoefficients(Synth.tempFilterStartCoefficients, synth.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n\t\t\t\tpoint.toCoefficients(Synth.tempFilterEndCoefficients,   synth.samplesPerSecond, noteAllFreqsEnvelopeEnd   * noteFreqEnvelopeEnd,   notePeakEnvelopeEnd);\n\t\t\t\tif (tone.noteFilters.length <= i) tone.noteFilters[i] = new DynamicBiquadFilter();\n\t\t\t\ttone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / runLength, point.type == FilterType.lowPass);\n\t\t\t\tnoteFilterExpression *= point.getVolumeCompensationMult();\n\t\t\t}\n\t\t\ttone.noteFilterCount = noteFilterSettings.controlPointCount;\n\t\t}\n\t\t\n\t\tif (instrument.type == InstrumentType.drumset) {\n\t\t\tconst drumsetFilterEnvelope: Envelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\n\t\t\t// If the drumset lowpass cutoff decays, compensate by increasing expression.\n\t\t\tnoteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope)\n\t\t\t\n\t\t\t// Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\n\t\t\tlet drumsetFilterEnvelopeStart: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);\n\t\t\tlet drumsetFilterEnvelopeEnd:   number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd,   beatsPerPart * partTimeEnd,   envelopeComputer.noteSizeEnd);\n\t\t\t\n\t\t\t// Apply slide interpolation to drumset envelope.\n\t\t\tif (envelopeComputer.prevSlideStart) {\n\t\t\t\tconst other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);\n\t\t\t\tdrumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;\n\t\t\t}\n\t\t\tif (envelopeComputer.prevSlideEnd) {\n\t\t\t\tconst other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);\n\t\t\t\tdrumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;\n\t\t\t}\n\t\t\tif (envelopeComputer.nextSlideStart) {\n\t\t\t\tconst other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);\n\t\t\t\tdrumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;\n\t\t\t}\n\t\t\tif (envelopeComputer.nextSlideEnd) {\n\t\t\t\tconst other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);\n\t\t\t\tdrumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;\n\t\t\t}\n\t\t\t\n\t\t\tconst point: FilterControlPoint = synth.tempDrumSetControlPoint;\n\t\t\tpoint.type = FilterType.lowPass;\n\t\t\tpoint.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);\n\t\t\tpoint.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n\t\t\t// Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\n\t\t\tpoint.toCoefficients(Synth.tempFilterStartCoefficients, synth.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n\t\t\tpoint.toCoefficients(Synth.tempFilterEndCoefficients, synth.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n\t\t\tif (tone.noteFilters.length == tone.noteFilterCount) tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\n\t\t\ttone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / runLength, true);\n\t\t\ttone.noteFilterCount++;\n\t\t}\n\t\t\n\t\tnoteFilterExpression = Math.min(3.0, noteFilterExpression);\n\t\t\n\t\tif (instrument.type == InstrumentType.fm) {\n\t\t\t// phase modulation!\n\t\t\t\n\t\t\tlet sineExpressionBoost: number = 1.0;\n\t\t\tlet totalCarrierExpression: number = 0.0;\n\n\t\t\tlet arpeggioInterval: number = 0;\n\t\t\tconst arpeggiates: boolean = chord.arpeggiates;\n\t\t\tif (tone.pitchCount > 1 && arpeggiates) {\n\t\t\t\tconst arpeggio: number = Math.floor((synth.tick + synth.part * Config.ticksPerPart) / Config.rhythms[song.rhythm].ticksPerArpeggio);\n\t\t\t\tarpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, song.rhythm, arpeggio)] - tone.pitches[0];\n\t\t\t}\n\t\t\t\n\t\t\tconst carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\n\t\t\t\tconst associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\n\t\t\t\tconst pitch: number = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n\t\t\t\tconst freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n\t\t\t\tconst interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n\t\t\t\tconst pitchStart: number = basePitch + (pitch + intervalStart) * intervalScale + interval;\n\t\t\t\tconst pitchEnd: number = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n\t\t\t\tconst baseFreqStart: number = Instrument.frequencyFromPitch(pitchStart);\n\t\t\t\tconst baseFreqEnd:   number = Instrument.frequencyFromPitch(pitchEnd);\n\t\t\t\tconst hzOffset: number = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n\t\t\t\tconst targetFreqStart: number = freqMult * baseFreqStart + hzOffset;\n\t\t\t\tconst targetFreqEnd:   number = freqMult * baseFreqEnd   + hzOffset;\n\t\t\t\t\n\t\t\t\tconst freqEnvelopeStart: number = envelopeStarts[NoteAutomationIndex.operatorFrequency0 + i];\n\t\t\t\tconst freqEnvelopeEnd:   number = envelopeEnds[  NoteAutomationIndex.operatorFrequency0 + i];\n\t\t\t\tlet freqStart: number;\n\t\t\t\tlet freqEnd:   number;\n\t\t\t\tif (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n\t\t\t\t\tfreqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n\t\t\t\t\tfreqEnd   = Math.pow(2.0, Math.log2(targetFreqEnd   / baseFreqEnd)   * freqEnvelopeEnd)   * baseFreqEnd;\n\t\t\t\t} else {\n\t\t\t\t\tfreqStart = targetFreqStart;\n\t\t\t\t\tfreqEnd   = targetFreqEnd;\n\t\t\t\t}\n\t\t\t\ttone.phaseDeltas[i] = freqStart * sampleTime * Config.sineWaveLength;\n\t\t\t\ttone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / runLength);\n\t\t\t\t\n\t\t\t\tconst amplitudeCurve: number = Synth.operatorAmplitudeCurve(instrument.operators[i].amplitude);\n\t\t\t\tconst amplitudeMult: number = amplitudeCurve * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n\t\t\t\tlet expressionStart: number = amplitudeMult;\n\t\t\t\tlet expressionEnd: number = amplitudeMult;\n\t\t\t\tif (i < carrierCount) {\n\t\t\t\t\t// carrier\n\t\t\t\t\tconst pitchExpressionStart: number = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n\t\t\t\t\tconst pitchExpressionEnd: number   = Math.pow(2.0, -(pitchEnd   - expressionReferencePitch) / pitchDamping);\n\t\t\t\t\texpressionStart *= baseExpression * pitchExpressionStart * transitionExpressionStart * noteFilterExpression * chordExpressionStart;\n\t\t\t\t\texpressionEnd *= baseExpression * pitchExpressionEnd * transitionExpressionEnd * noteFilterExpression * chordExpressionEnd;\n\t\t\t\t\texpressionStart *= envelopeStarts[NoteAutomationIndex.noteVolume];\n\t\t\t\t\texpressionEnd *= envelopeEnds[NoteAutomationIndex.noteVolume];\n\t\t\t\t\t\n\t\t\t\t\ttotalCarrierExpression += amplitudeCurve;\n\t\t\t\t} else {\n\t\t\t\t\t// modulator\n\t\t\t\t\texpressionStart *= Config.sineWaveLength * 1.5;\n\t\t\t\t\texpressionEnd *= Config.sineWaveLength * 1.5;\n\t\t\t\t\t\n\t\t\t\t\tsineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\texpressionStart *= envelopeStarts[NoteAutomationIndex.operatorAmplitude0 + i];\n\t\t\t\texpressionEnd   *= envelopeEnds[  NoteAutomationIndex.operatorAmplitude0 + i];\n\t\t\t\t\n\t\t\t\ttone.expressionStarts[i] = expressionStart;\n\t\t\t\ttone.expressionDeltas[i] = (expressionEnd - expressionStart) / runLength;\n\t\t\t}\n\t\t\t\n\t\t\tsineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n\t\t\tsineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n\t\t\tsineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n\t\t\tfor (let i: number = 0; i < carrierCount; i++) {\n\t\t\t\ttone.expressionStarts[i] *= sineExpressionBoost;\n\t\t\t\ttone.expressionDeltas[i] *= sineExpressionBoost;\n\t\t\t}\n\t\t\t\n\t\t\tconst feedbackAmplitude: number = Config.sineWaveLength * 0.3 * instrument.feedbackAmplitude / 15.0;\n\t\t\tlet feedbackStart: number = feedbackAmplitude * envelopeStarts[NoteAutomationIndex.feedbackAmplitude];\n\t\t\tlet feedbackEnd:   number = feedbackAmplitude * envelopeEnds[  NoteAutomationIndex.feedbackAmplitude];\n\t\t\ttone.feedbackMult = feedbackStart;\n\t\t\ttone.feedbackDelta = (feedbackEnd - tone.feedbackMult) / runLength;\n\t\t} else {\n\t\t\tconst basePhaseDeltaScale: number = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / runLength);\n\t\t\t\n\t\t\tlet pitch: number = tone.pitches[0];\n\t\t\tif (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {\n\t\t\t\tconst arpeggio: number = Math.floor((synth.tick + synth.part * Config.ticksPerPart) / Config.rhythms[song.rhythm].ticksPerArpeggio);\n\t\t\t\tif (chord.customInterval) {\n\t\t\t\t\tconst intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, song.rhythm, arpeggio)] - tone.pitches[0];\n\t\t\t\t\ttone.specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\n\t\t\t\t\ttone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n\t\t\t\t} else {\n\t\t\t\t\tpitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, song.rhythm, arpeggio)];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconst startPitch: number = basePitch + (pitch + intervalStart) * intervalScale;\n\t\t\tconst endPitch:   number = basePitch + (pitch + intervalEnd)   * intervalScale;\n\t\t\tconst pitchExpressionStart: number = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n\t\t\tconst pitchExpressionEnd:   number = Math.pow(2.0,   -(endPitch - expressionReferencePitch) / pitchDamping);\n\t\t\tlet settingsExpressionMult: number = baseExpression * noteFilterExpression;\n\t\t\t\n\t\t\tif (instrument.type == InstrumentType.noise) {\n\t\t\t\tsettingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n\t\t\t}\n\t\t\tif (instrument.type == InstrumentType.chip) {\n\t\t\t\tsettingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n\t\t\t}\n\t\t\tif (instrument.type == InstrumentType.pwm) {\n\t\t\t\tconst basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\t\t\t\tconst pulseWidthStart: number = basePulseWidth * envelopeStarts[NoteAutomationIndex.pulseWidth];\n\t\t\t\tconst pulseWidthEnd:   number = basePulseWidth * envelopeEnds[  NoteAutomationIndex.pulseWidth];\n\t\t\t\ttone.pulseWidth = pulseWidthStart;\n\t\t\t\ttone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / runLength;\n\t\t\t}\n\t\t\tif (instrument.type == InstrumentType.pickedString) {\n\t\t\t\t// Increase expression to compensate for string decay.\n\t\t\t\tsettingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - instrument.stringSustain / (Config.stringSustainRange - 1)));\n\t\t\t\t\n\t\t\t\tconst unison: Unison = Config.unisons[instrument.unison];\n\t\t\t\tfor (let i: number = tone.pickedStrings.length; i < unison.voices; i++) {\n\t\t\t\t\ttone.pickedStrings[i] = new PickedString();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n\t\t\t\t\tfor (const pickedString of tone.pickedStrings) {\n\t\t\t\t\t\t// Force the picked string to retrigger the attack impulse at the start of the note.\n\t\t\t\t\t\tpickedString.delayIndex = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconst startFreq: number = Instrument.frequencyFromPitch(startPitch);\n\t\t\tif (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n\t\t\t\t// These instruments have two waves at different frequencies for the unison feature.\n\t\t\t\tconst unison: Unison = Config.unisons[instrument.unison];\n\t\t\t\tconst voiceCountExpression: number = (instrument.type == InstrumentType.pickedString) ? 1 : unison.voices / 2.0;\n\t\t\t\tsettingsExpressionMult *= unison.expression * voiceCountExpression;\n\t\t\t\tconst unisonEnvelopeStart = envelopeStarts[NoteAutomationIndex.unison];\n\t\t\t\tconst unisonEnvelopeEnd   = envelopeEnds[  NoteAutomationIndex.unison];\n\t\t\t\tconst unisonAStart: number = Math.pow(2.0, (unison.offset + unison.spread) * unisonEnvelopeStart / 12.0);\n\t\t\t\tconst unisonAEnd:   number = Math.pow(2.0, (unison.offset + unison.spread) * unisonEnvelopeEnd   / 12.0);\n\t\t\t\tconst unisonBStart: number = Math.pow(2.0, (unison.offset - unison.spread) * unisonEnvelopeStart / 12.0) * tone.specialIntervalMult;\n\t\t\t\tconst unisonBEnd:   number = Math.pow(2.0, (unison.offset - unison.spread) * unisonEnvelopeEnd   / 12.0) * tone.specialIntervalMult;\n\t\t\t\ttone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;\n\t\t\t\ttone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;\n\t\t\t\ttone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / runLength);\n\t\t\t\ttone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / runLength);\n\t\t\t} else {\n\t\t\t\ttone.phaseDeltas[0] = startFreq * sampleTime;\n\t\t\t\ttone.phaseDeltaScales[0] = basePhaseDeltaScale;\n\t\t\t}\n\t\t\t\n\t\t\tlet expressionStart: number = settingsExpressionMult * transitionExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[NoteAutomationIndex.noteVolume];\n\t\t\tlet expressionEnd:   number = settingsExpressionMult * transitionExpressionEnd   * chordExpressionEnd   * pitchExpressionEnd   * envelopeEnds[  NoteAutomationIndex.noteVolume];\n\t\t\ttone.expressionStarts[0] = expressionStart;\n\t\t\ttone.expressionDeltas[0] = (expressionEnd - expressionStart) / runLength;\n\t\t}\n\t}\n\t\n\tpublic static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\n\t\tlet effect: number = 0.0;\n\t\tfor (const vibratoPeriodSeconds of Config.vibratos[instrument.vibrato].periodsSeconds) {\n\t\t\teffect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n\t\t}\n\t\treturn effect;\n\t}\n\t\n\tprivate static getInstrumentSynthFunction(instrument: Instrument): Function {\n\t\tif (instrument.type == InstrumentType.fm) {\n\t\t\tconst fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\n\t\t\tif (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n\t\t\t\tconst synthSource: string[] = [];\n\t\t\t\t\n\t\t\t\tfor (const line of Synth.fmSourceTemplate) {\n\t\t\t\t\tif (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n\t\t\t\t\t\tconst outputs: string[] = [];\n\t\t\t\t\t\tfor (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n\t\t\t\t\t\t\toutputs.push(\"operator\" + j + \"Scaled\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsynthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n\t\t\t\t\t} else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n\t\t\t\t\t\tfor (let j: number = Config.operatorCount - 1; j >= 0; j--) {\n\t\t\t\t\t\t\tfor (const operatorLine of Synth.operatorSourceTemplate) {\n\t\t\t\t\t\t\t\tif (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n\t\t\t\t\t\t\t\t\tlet modulators = \"\";\n\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tconst feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\n\t\t\t\t\t\t\t\t\tif (feedbackIndices.length > 0) {\n\t\t\t\t\t\t\t\t\t\tmodulators += \" + feedbackMult * (\";\n\t\t\t\t\t\t\t\t\t\tconst feedbacks: string[] = [];\n\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of feedbackIndices) {\n\t\t\t\t\t\t\t\t\t\t\tfeedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tmodulators += feedbacks.join(\" + \") + \")\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (line.indexOf(\"#\") != -1) {\n\t\t\t\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\n\t\t\t\t\t\t\tsynthSource.push(line.replace(/\\#/g, j + \"\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsynthSource.push(line);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//console.log(synthSource.join(\"\\n\"));\n\t\t\t\t\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"bufferIndex\", \"runLength\", \"tone\", \"instrument\", synthSource.join(\"\\n\"));\n\t\t\t}\n\t\t\treturn Synth.fmSynthFunctionCache[fingerprint];\n\t\t} else if (instrument.type == InstrumentType.chip) {\n\t\t\treturn Synth.chipSynth;\n\t\t} else if (instrument.type == InstrumentType.harmonics) {\n\t\t\treturn Synth.harmonicsSynth;\n\t\t} else if (instrument.type == InstrumentType.pwm) {\n\t\t\treturn Synth.pulseWidthSynth;\n\t\t} else if (instrument.type == InstrumentType.pickedString) {\n\t\t\treturn Synth.pickedStringSynth;\n\t\t} else if (instrument.type == InstrumentType.noise) {\n\t\t\treturn Synth.noiseSynth;\n\t\t} else if (instrument.type == InstrumentType.spectrum) {\n\t\t\treturn Synth.spectrumSynth;\n\t\t} else if (instrument.type == InstrumentType.drumset) {\n\t\t\treturn Synth.drumsetSynth;\n\t\t} else {\n\t\t\tthrow new Error(\"Unrecognized instrument type: \" + instrument.type);\n\t\t}\n\t}\n\t\n\tprivate static chipSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrument: Instrument): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\tconst wave: Float64Array = Config.chipWaves[instrument.chipWave].samples;\n\t\tconst waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\t\t\n\t\tconst unisonSign: number = tone.specialIntervalExpressionMult * Config.unisons[instrument.unison].sign;\n\t\tif (instrument.unison == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n\t\tlet phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n\t\tconst phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n\t\tconst phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n\t\tlet expression: number = +tone.expressionStarts[0];\n\t\tconst expressionDelta: number = +tone.expressionDeltas[0];\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\n\t\t\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\t\n\t\tconst phaseAInt: number = phaseA|0;\n\t\tconst phaseBInt: number = phaseB|0;\n\t\tconst indexA: number = phaseAInt % waveLength;\n\t\tconst indexB: number = phaseBInt % waveLength;\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\n\t\tlet prevWaveIntegralA: number = +wave[indexA];\n\t\tlet prevWaveIntegralB: number = +wave[indexB];\n\t\tprevWaveIntegralA += (wave[indexA+1] - prevWaveIntegralA) * phaseRatioA;\n\t\tprevWaveIntegralB += (wave[indexB+1] - prevWaveIntegralB) * phaseRatioB;\n\t\t\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\n\t\t\tphaseA += phaseDeltaA;\n\t\t\tphaseB += phaseDeltaB;\n\t\t\t\n\t\t\tconst phaseAInt: number = phaseA|0;\n\t\t\tconst phaseBInt: number = phaseB|0;\n\t\t\tconst indexA: number = phaseAInt % waveLength;\n\t\t\tconst indexB: number = phaseBInt % waveLength;\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\n\t\t\tnextWaveIntegralA += (wave[indexA+1] - nextWaveIntegralA) * phaseRatioA;\n\t\t\tnextWaveIntegralB += (wave[indexB+1] - nextWaveIntegralB) * phaseRatioB;\n\t\t\tconst waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n\t\t\tconst waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\n\t\t\t\n\t\t\tconst inputSample: number = waveA + waveB * unisonSign;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tphaseDeltaA *= phaseDeltaScaleA;\n\t\t\tphaseDeltaB *= phaseDeltaScaleB;\n\t\t\t\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phases[0] = phaseA / waveLength;\n\t\ttone.phases[1] = phaseB / waveLength;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\t\n\tprivate static harmonicsSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrument: Instrument): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\tconst wave: Float32Array = instrument.harmonicsWave.getCustomWave(instrument.type);\n\t\tconst waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\t\t\n\t\tconst unisonSign: number = tone.specialIntervalExpressionMult * Config.unisons[instrument.unison].sign;\n\t\tif (instrument.unison == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n\t\tlet phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n\t\tconst phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n\t\tconst phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n\t\tlet expression: number = +tone.expressionStarts[0];\n\t\tconst expressionDelta: number = +tone.expressionDeltas[0];\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\n\t\t\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\t\n\t\tconst phaseAInt: number = phaseA|0;\n\t\tconst phaseBInt: number = phaseB|0;\n\t\tconst indexA: number = phaseAInt % waveLength;\n\t\tconst indexB: number = phaseBInt % waveLength;\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\n\t\tlet prevWaveIntegralA: number = +wave[indexA];\n\t\tlet prevWaveIntegralB: number = +wave[indexB];\n\t\tprevWaveIntegralA += (wave[indexA+1] - prevWaveIntegralA) * phaseRatioA;\n\t\tprevWaveIntegralB += (wave[indexB+1] - prevWaveIntegralB) * phaseRatioB;\n\t\t\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\n\t\t\tphaseA += phaseDeltaA;\n\t\t\tphaseB += phaseDeltaB;\n\t\t\t\n\t\t\tconst phaseAInt: number = phaseA|0;\n\t\t\tconst phaseBInt: number = phaseB|0;\n\t\t\tconst indexA: number = phaseAInt % waveLength;\n\t\t\tconst indexB: number = phaseBInt % waveLength;\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\n\t\t\tnextWaveIntegralA += (wave[indexA+1] - nextWaveIntegralA) * phaseRatioA;\n\t\t\tnextWaveIntegralB += (wave[indexB+1] - nextWaveIntegralB) * phaseRatioB;\n\t\t\tconst waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n\t\t\tconst waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\n\t\t\t\n\t\t\tconst inputSample: number = waveA + waveB * unisonSign;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tphaseDeltaA *= phaseDeltaScaleA;\n\t\t\tphaseDeltaB *= phaseDeltaScaleB;\n\t\t\t\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phases[0] = phaseA / waveLength;\n\t\ttone.phases[1] = phaseB / waveLength;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\t\n\tprivate static pickedStringSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrument: Instrument): void {\n\t\t// This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\n\t\t// all-pass filter for dispersion and with more control over the impulse.\n\t\t// The source code is processed as a string before being compiled, in order to\n\t\t// handle the unison feature. If unison is disabled or set to none, then only one\n\t\t// string voice is required, otherwise two string voices are required. We only want\n\t\t// to compute the minimum possible number of string voices, so omit the code for\n\t\t// processing extra ones if possible. Any line containing a \"#\" is duplicated for\n\t\t// each required voice, replacing the \"#\" with the voice index.\n\t\t\n\t\tconst voiceCount: number = Config.unisons[instrument.unison].voices;\n\t\tlet pickedStringFunction: Function = Synth.pickedStringFunctionCache[voiceCount];\n\t\tif (pickedStringFunction == undefined) {\n\t\t\tlet pickedStringSource: string = \"\";\n\t\t\t\n\t\t\tpickedStringSource += `\n\t\t\t\t\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst NoteAutomationStringSustainIndex = ${NoteAutomationIndex.stringSustain};\n\t\t\t\tconst voiceCount = ${voiceCount};\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tconst sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[NoteAutomationStringSustainIndex];\n\t\t\t\tconst sustainEnvelopeEnd   = tone.envelopeComputer.envelopeEnds[  NoteAutomationStringSustainIndex];\n\t\t\t\tconst stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * instrument.stringSustain / (Config.stringSustainRange - 1));\n\t\t\t\tconst stringDecayEnd   = 1.0 - Math.min(1.0, sustainEnvelopeEnd   * instrument.stringSustain / (Config.stringSustainRange - 1));\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\t\n\t\t\t\tconst prevDelayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet shelfSample# = +pickedString#.shelfSample;\n\t\t\t\tlet shelfPrevInput# = +pickedString#.shelfPrevInput;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expressionStarts[0];\n\t\t\t\tconst expressionDelta = +tone.expressionDeltas[0];\n\t\t\t\t\n\t\t\t\tconst phaseDeltaStart# = +tone.phaseDeltas[#];\n\t\t\t\tconst phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\t\t\t\tconst phaseDeltaEnd# = phaseDeltaStart# * Math.pow(phaseDeltaScale#, runLength);\n\t\t\t\t\n\t\t\t\tconst radiansPerSampleStart# = Math.PI * 2.0 * phaseDeltaStart#;\n\t\t\t\tconst radiansPerSampleEnd#   = Math.PI * 2.0 * phaseDeltaEnd#;\n\t\t\t\t\n\t\t\t\tconst centerHarmonicStart# = radiansPerSampleStart# * 2.0;\n\t\t\t\tconst centerHarmonicEnd#   = radiansPerSampleEnd# * 2.0;\n\t\t\t\t\n\t\t\t\tconst allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n\t\t\t\tconst allPassRadiansStart# = Math.min(Math.PI, radiansPerSampleStart# * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart#, Config.pickedStringDispersionFreqScale));\n\t\t\t\tconst allPassRadiansEnd# = Math.min(Math.PI, radiansPerSampleEnd# * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd#, Config.pickedStringDispersionFreqScale));\n\t\t\t\t\n\t\t\t\tconst shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n\t\t\t\tconst decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n\t\t\t\tconst decayCurveEnd   = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\n\t\t\t\tconst decayRateStart# = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart#);\n\t\t\t\tconst decayRateEnd#   = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd#);\n\t\t\t\tconst shelfGainStart# = Math.pow(decayRateStart#, Config.stringDecayRate);\n\t\t\t\tconst shelfGainEnd#   = Math.pow(decayRateEnd#,   Config.stringDecayRate);\n\t\t\t\tconst expressionDecayStart# = Math.pow(decayRateStart#, 0.002);\n\t\t\t\tconst expressionDecayEnd#   = Math.pow(decayRateEnd#,   0.002);`\n\t\t\t\n\t\t\tfor (let voice: number = 0; voice < voiceCount; voice++) {\n\t\t\t\tpickedStringSource += `\n\t\t\t\t\n\t\t\t\tSynth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart#);\n\t\t\t\tlet allPassG# = +Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\n\t\t\t\tconst allPassPhaseDelayStart# = -synth.tempFrequencyResponse.angle() / centerHarmonicStart#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd#);\n\t\t\t\tconst allPassGEnd# = +Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\n\t\t\t\tconst allPassPhaseDelayEnd# = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, shelfGainStart#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart#)\n\t\t\t\tlet shelfA1# = +Synth.tempFilterStartCoefficients.a[1]\n\t\t\t\tlet shelfB0# = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart#\n\t\t\t\tlet shelfB1# = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart#\n\t\t\t\tconst shelfPhaseDelayStart# = -synth.tempFrequencyResponse.angle() / centerHarmonicStart#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterEndCoefficients.highShelf1stOrder(shelfRadians, shelfGainEnd#)\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd#)\n\t\t\t\tconst shelfA1End# = +Synth.tempFilterEndCoefficients.a[1]\n\t\t\t\tconst shelfB0End# = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd#\n\t\t\t\tconst shelfB1End# = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd#\n\t\t\t\tconst shelfPhaseDelayEnd# = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd#;`.replace(/\\#/g, String(voice));\n\t\t\t}\n\t\t\t\n\t\t\tpickedStringSource += `\n\t\t\t\t\n\t\t\t\tconst periodLengthStart# = 1.0 / phaseDeltaStart#;\n\t\t\t\tconst periodLengthEnd# = 1.0 / phaseDeltaEnd#;\n\t\t\t\tconst minBufferLength# = Math.ceil(Math.max(periodLengthStart#, periodLengthEnd#) * 2);\n\t\t\t\tlet delayLength# = periodLengthStart# - allPassPhaseDelayStart# - shelfPhaseDelayStart#;\n\t\t\t\tconst delayLengthEnd# = periodLengthEnd# - allPassPhaseDelayEnd# - shelfPhaseDelayEnd#;\n\t\t\t\t\n\t\t\t\tconst delayLengthDelta# = (delayLengthEnd# - delayLength#) / runLength;\n\t\t\t\tconst allPassGDelta# = (allPassGEnd# - allPassG#) / runLength;\n\t\t\t\tconst shelfA1Delta# = (shelfA1End# - shelfA1#) / runLength;\n\t\t\t\tconst shelfB0Delta# = (shelfB0End# - shelfB0#) / runLength;\n\t\t\t\tconst shelfB1Delta# = (shelfB1End# - shelfB1#) / runLength;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst pitchChanged# = Math.abs(Math.log2(delayLength# / prevDelayLength#)) > 0.01;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;`\n\t\t\t\n\t\t\tfor (let voice: number = 0; voice < voiceCount; voice++) {\n\t\t\t\tpickedStringSource += `\n\t\t\t\t\n\t\t\t\tconst reinitializeImpulse# = (delayIndex# == -1 || pitchChanged#);\n\t\t\t\tif (pickedString#.delayLine == null || pickedString#.delayLine.length <= minBufferLength#) {\n\t\t\t\t\t// The delay line buffer will get reused for other tones so might as well\n\t\t\t\t\t// start off with a buffer size that is big enough for most notes.\n\t\t\t\t\tconst likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / beepbox.Instrument.frequencyFromPitch(12));\n\t\t\t\t\tconst newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength#)));\n\t\t\t\t\tif (!reinitializeImpulse# && pickedString#.delayLine != null) {\n\t\t\t\t\t\t// If the tone has already started but the buffer needs to be reallocated,\n\t\t\t\t\t\t// transfer the old data to the new buffer.\n\t\t\t\t\t\tconst oldDelayBufferMask = (pickedString#.delayLine.length - 1) >> 0;\n\t\t\t\t\t\tconst startCopyingFromIndex = delayIndex# + pickedString#.delayResetOffset;\n\t\t\t\t\t\tdelayIndex# = pickedString#.delayLine.length - pickedString#.delayResetOffset;\n\t\t\t\t\t\tfor (let i = 0; i < pickedString#.delayLine.length; i++) {\n\t\t\t\t\t\t\tnewDelayLine[i] = pickedString#.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpickedString#.delayLine = newDelayLine;\n\t\t\t\t}\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\t\n\t\t\t\tif (reinitializeImpulse#) {\n\t\t\t\t\t// -1 delay index means the tone was reset.\n\t\t\t\t\t// Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\n\t\t\t\t\t\n\t\t\t\t\tdelayIndex# = 0;\n\t\t\t\t\tallPassSample# = 0.0;\n\t\t\t\t\tallPassPrevInput# = 0.0;\n\t\t\t\t\tshelfSample# = 0.0;\n\t\t\t\t\tshelfPrevInput# = 0.0;\n\t\t\t\t\tfractionalDelaySample# = 0.0;\n\t\t\t\t\t\n\t\t\t\t\t// Clear away a region of the delay buffer for the new impulse.\n\t\t\t\t\tconst startImpulseFrom = -delayLength#;\n\t\t\t\t\tconst startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart# / 2);\n\t\t\t\t\tconst stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart# * 2);\n\t\t\t\t\tpickedString#.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\n\t\t\t\t\tfor (let i = startZerosFrom; i <= stopZerosAt; i++) {\n\t\t\t\t\t\tdelayLine#[i & delayBufferMask#] = 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst impulseWave = instrument.harmonicsWave.getCustomWave(instrument.type);\n\t\t\t\t\tconst impulseWaveLength = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\t\t\t\t\tconst impulsePhaseDelta = impulseWaveLength / periodLengthStart#;\n\t\t\t\t\t\n\t\t\t\t\tconst fadeDuration = Math.min(periodLengthStart# * 0.2, synth.samplesPerSecond * 0.003);\n\t\t\t\t\tconst startImpulseFromSample = Math.ceil(startImpulseFrom);\n\t\t\t\t\tconst stopImpulseAt = startImpulseFrom + periodLengthStart# + fadeDuration;\n\t\t\t\t\tconst stopImpulseAtSample = stopImpulseAt;\n\t\t\t\t\tlet impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n\t\t\t\t\tlet prevWaveIntegral = 0.0;\n\t\t\t\t\tfor (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n\t\t\t\t\t\tconst impulsePhaseInt = impulsePhase|0;\n\t\t\t\t\t\tconst index = impulsePhaseInt % impulseWaveLength;\n\t\t\t\t\t\tlet nextWaveIntegral = impulseWave[index];\n\t\t\t\t\t\tconst phaseRatio = impulsePhase - impulsePhaseInt;\n\t\t\t\t\t\tnextWaveIntegral += (impulseWave[index+1] - nextWaveIntegral) * phaseRatio;\n\t\t\t\t\t\tconst sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n\t\t\t\t\t\tconst fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n\t\t\t\t\t\tconst fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n\t\t\t\t\t\tconst combinedFade = fadeIn * fadeOut;\n\t\t\t\t\t\tconst curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\n\t\t\t\t\t\tdelayLine#[i & delayBufferMask#] += sample * curvedFade;\n\t\t\t\t\t\tprevWaveIntegral = nextWaveIntegral;\n\t\t\t\t\t\timpulsePhase += impulsePhaseDelta;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;`.replace(/\\#/g, String(voice));\n\t\t\t}\n\t\t\t\n\t\t\tpickedStringSource += `\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * Config.unisons[instrument.unison].sign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tshelfSample# = shelfB0# * allPassSample# + shelfB1# * shelfPrevInput# - shelfA1# * shelfSample#;\n\t\t\t\t\tshelfPrevInput# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += shelfSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (`\n\t\t\t\n\t\t\tconst sampleList: string[] = [];\n\t\t\tfor (let voice: number = 0; voice < voiceCount; voice++) {\n\t\t\t\tsampleList.push(\"fractionalDelaySample\" + voice + (voice == 1 ? \" * unisonSign\" : \"\"));\n\t\t\t}\n\t\t\t\n\t\t\tpickedStringSource += sampleList.join(\" + \");\n\t\t\t\n\t\t\tpickedStringSource += `) * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tshelfA1# += shelfA1Delta#;\n\t\t\t\t\tshelfB0# += shelfB0Delta#;\n\t\t\t\t\tshelfB1# += shelfB1Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfSample#) || Math.abs(shelfSample#) < epsilon) shelfSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfPrevInput#) || Math.abs(shelfPrevInput#) < epsilon) shelfPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.shelfSample = shelfSample#;\n\t\t\t\tpickedString#.shelfPrevInput = shelfPrevInput#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;`\n\t\t\t\n\t\t\t// Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\n\t\t\tpickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n\t\t\t\tconst lines = [];\n\t\t\t\tfor (let voice: number = 0; voice < voiceCount; voice++) {\n\t\t\t\t\tlines.push(line.replace(/\\#/g, String(voice)));\n\t\t\t\t}\n\t\t\t\treturn lines.join(\"\\n\");\n\t\t\t});\n\t\t\t\n\t\t\t//console.log(pickedStringSource);\n\t\t\tpickedStringFunction = new Function(\"synth\", \"bufferIndex\", \"runLength\", \"tone\", \"instrument\", pickedStringSource);\n\t\t\tSynth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n\t\t}\n\t\t\n\t\tpickedStringFunction(synth, bufferIndex, runLength, tone, instrument);\n\t}\n\t\n\tprivate static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrument: Instrument, instrumentState: InstrumentState): void {\n\t\t// TODO: If automation is involved, don't assume sliders will stay at zero.\n\t\tconst usesDistortion: boolean = effectsIncludeDistortion(instrument.effects) && instrument.distortion != 0;\n\t\tconst usesBitcrusher: boolean = effectsIncludeBitcrusher(instrument.effects);\n\t\tconst usesEqFilter: boolean = instrumentState.eqFilterCount > 0;\n\t\tconst usesPanning: boolean = effectsIncludePanning(instrument.effects) && instrument.pan != Config.panCenter;\n\t\tconst usesChorus: boolean = effectsIncludeChorus(instrument.effects) && instrument.chorus != 0;\n\t\tconst usesEcho: boolean = effectsIncludeEcho(instrument.effects) && instrument.echoSustain != 0;\n\t\tconst usesReverb: boolean = effectsIncludeReverb(instrument.effects) && instrument.reverb != 0;\n\t\tlet signature: number = 0;  if (usesDistortion) signature = signature | 1;\n\t\tsignature = signature << 1; if (usesBitcrusher) signature = signature | 1;\n\t\tsignature = signature << 1; if (usesEqFilter) signature = signature | 1;\n\t\tsignature = signature << 1; if (usesPanning) signature = signature | 1;\n\t\tsignature = signature << 1; if (usesChorus) signature = signature | 1;\n\t\tsignature = signature << 1; if (usesEcho) signature = signature | 1;\n\t\tsignature = signature << 1; if (usesReverb) signature = signature | 1;\n\t\t\n\t\tlet effectsFunction: Function = Synth.effectsFunctionCache[signature];\n\t\tif (effectsFunction == undefined) {\n\t\t\tlet effectsSource: string = \"\";\n\t\t\t\n\t\t\tconst usesDelays: boolean = usesChorus || usesReverb || usesEcho;\n\t\t\t\n\t\t\teffectsSource += `\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolumeStart;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;`\n\t\t\t\n\t\t\tif (usesDelays) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMultStart;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesDistortion) {\n\t\t\t\t// Distortion can sometimes create noticeable aliasing.\n\t\t\t\t// It seems the established industry best practice for distortion antialiasing\n\t\t\t\t// is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\n\t\t\t\t// at the original nyquist frequency), perform the distortion, then downsample\n\t\t\t\t// (the lowpass again followed by dropping in-between samples). This is\n\t\t\t\t// \"mathematically correct\" in that it preserves only the intended frequencies,\n\t\t\t\t// but it has several unfortunate tradeoffs depending on the choice of filter,\n\t\t\t\t// introducing latency and/or time smearing, since no true brick wall filter\n\t\t\t\t// exists. For the time being, I've opted to instead generate in-between input\n\t\t\t\t// samples using fractional delay all-pass filters, and after distorting them,\n\t\t\t\t// I \"downsample\" these with a simple weighted sum.\n\t\t\t\t\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +beepbox.Config.distortionBaseVolume;\n\t\t\t\tconst distortionStart = +Math.pow(1.0 - 0.895 * (Math.pow(20.0, instrumentState.distortionStart) - 1.0) / 19.0, 2.0)\n\t\t\t\tconst distortionEnd   = +Math.pow(1.0 - 0.895 * (Math.pow(20.0, instrumentState.distortionEnd  ) - 1.0) / 19.0, 2.0)\n\t\t\t\tlet distortion = distortionStart;\n\t\t\t\tconst distortionDelta = (distortionEnd - distortionStart) / runLength;\n\t\t\t\tconst distortionDriveStart = (1.0 + 2.0 * instrumentState.distortionStart) / distortionBaseVolume;\n\t\t\t\tconst distortionDriveEnd   = (1.0 + 2.0 * instrumentState.distortionEnd)   / distortionBaseVolume;\n\t\t\t\tlet distortionDrive = distortionDriveStart;\n\t\t\t\tconst distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / runLength;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesBitcrusher) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesEqFilter) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = beepbox.Synth.applyFilters;`\n\t\t\t}\n\t\t\t\n\t\t\t// The eq filter volume is also used to fade out the instrument state, so always include it.\n\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolumeStart;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`\n\t\t\t\n\t\t\tif (usesPanning) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeStartL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeStartR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = panningDelayPos - instrumentState.panningOffsetStartL + synth.panningDelayBufferSize;\n\t\t\t\tlet   panningOffsetR      = panningDelayPos - instrumentState.panningOffsetStartR + synth.panningDelayBufferSize;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesChorus) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tconst chorusStart = +instrumentState.chorusStart;\n\t\t\t\tconst chorusEnd   = +instrumentState.chorusEnd;\n\t\t\t\tlet chorusVoiceMult = chorusStart;\n\t\t\t\tconst chorusVoiceMultDelta = (chorusEnd - chorusStart) / runLength;\n\t\t\t\tlet chorusCombinedMult = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n\t\t\t\tconst chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n\t\t\t\tconst chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMult) / runLength;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesEcho) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMultStart;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesReverb) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tconst reverbMask = beepbox.Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMultStart;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`\n\t\t\t}\n\t\t\t\n\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`\n\t\t\t\n\t\t\tif (usesDistortion) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesBitcrusher) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesEqFilter) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;`\n\t\t\t}\n\t\t\t\n\t\t\t// The eq filter volume is also used to fade out the instrument state, so always include it.\n\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`\n\t\t\t\n\t\t\tif (usesPanning) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`\n\t\t\t} else {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesChorus) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesEcho) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesReverb) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;`\n\t\t\t}\n\t\t\t\n\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;`\n\t\t\t\n\t\t\tif (usesDelays) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`\n\t\t\t}\n\t\t\t\n\t\t\teffectsSource += `\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);`\n\t\t\t\n\t\t\tif (usesDistortion) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesBitcrusher) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesEqFilter) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesPanning) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesChorus) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesEcho) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`\n\t\t\t}\n\t\t\t\n\t\t\tif (usesReverb) {\n\t\t\t\teffectsSource += `\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos  = reverbDelayPos;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`\n\t\t\t}\n\t\t\t\n\t\t\t//console.log(effectsSource);\n\t\t\teffectsFunction = new Function(\"synth\", \"outputDataL\", \"outputDataR\", \"bufferIndex\", \"runLength\", \"instrument\", \"instrumentState\", effectsSource);\n\t\t\tSynth.effectsFunctionCache[signature] = effectsFunction;\n\t\t}\n\t\t\n\t\teffectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrument, instrumentState);\n\t}\n\t\n\tprivate static pulseWidthSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrument: Instrument): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\t\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expressionStarts[0];\n\t\tconst expressionDelta: number = +tone.expressionDeltas[0];\n\t\tlet phase: number = (tone.phases[0] % 1);\n\t\t\n\t\tlet pulseWidth: number = tone.pulseWidth;\n\t\tconst pulseWidthDelta: number = tone.pulseWidthDelta;\n\t\t\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\n\t\t\tconst sawPhaseA: number = phase % 1;\n\t\t\tconst sawPhaseB: number = (phase + pulseWidth) % 1;\n\t\t\t\n\t\t\tlet pulseWave: number = sawPhaseB - sawPhaseA;\n\t\t\t\n\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n\t\t\tif (sawPhaseA < phaseDelta) {\n\t\t\t\tvar t = sawPhaseA / phaseDelta;\n\t\t\t\tpulseWave += (t+t-t*t-1) * 0.5;\n\t\t\t} else if (sawPhaseA > 1.0 - phaseDelta) {\n\t\t\t\tvar t = (sawPhaseA - 1.0) / phaseDelta;\n\t\t\t\tpulseWave += (t+t+t*t+1) * 0.5;\n\t\t\t}\n\t\t\tif (sawPhaseB < phaseDelta) {\n\t\t\t\tvar t = sawPhaseB / phaseDelta;\n\t\t\t\tpulseWave -= (t+t-t*t-1) * 0.5;\n\t\t\t} else if (sawPhaseB > 1.0 - phaseDelta) {\n\t\t\t\tvar t = (sawPhaseB - 1.0) / phaseDelta;\n\t\t\t\tpulseWave -= (t+t+t*t+1) * 0.5;\n\t\t\t}\n\t\t\t\n\t\t\tconst inputSample: number = pulseWave;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tphase += phaseDelta;\n\t\t\tphaseDelta *= phaseDeltaScale;\n\t\t\tpulseWidth += pulseWidthDelta;\n\t\t\t\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phases[0] = phase;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\t\n\tprivate static fmSourceTemplate: string[] = (`\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = beepbox.Config.sineWave;\n\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#];\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.expressionStarts[#];\n\t\tconst operator#OutputDelta = +tone.expressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta      = +tone.feedbackDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = beepbox.Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + runLength;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tfeedbackMult += feedbackDelta;\n\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tdata[sampleIndex] += sample;\n\t\t}\n\t\t\n\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\n\t\ttone.feedbackOutputs[#] = operator#Output;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t`).split(\"\\n\");\n\t\n\tprivate static operatorSourceTemplate: string[] = (`\n\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\n\t\t\tconst operator#Sample   = sineWave[operator#Index];\n\t\t\toperator#Output         = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t`).split(\"\\n\");\n\t\n\tprivate static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrument: Instrument): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\tlet wave: Float32Array = instrument.getDrumWave();\n\t\tlet phaseDelta: number = +tone.phaseDeltas[0];\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expressionStarts[0];\n\t\tconst expressionDelta: number = +tone.expressionDeltas[0];\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\n\t\tif (tone.phases[0] == 0) {\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\n\t\t\tphase = Math.random() * Config.chipNoiseLength;\n\t\t}\n\t\tconst phaseMask: number = Config.chipNoiseLength - 1;\n\t\tlet noiseSample: number = +tone.sample;\n\t\t\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\t\n\t\t// This is for a \"legacy\" style simplified 1st order lowpass filter with\n\t\t// a cutoff frequency that is relative to the tone's fundamental frequency.\n\t\tconst pitchRelativefilter: number = Math.min(1.0, tone.phaseDeltas[0] * Config.chipNoises[instrument.chipNoise].pitchFilterMult);\n\t\t\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\tconst waveSample: number = wave[phase & phaseMask];\n\t\t\t\n\t\t\tnoiseSample += (waveSample - noiseSample) * pitchRelativefilter;\n\t\t\t\n\t\t\tconst inputSample: number = noiseSample;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tphase += phaseDelta;\n\t\t\tphaseDelta *= phaseDeltaScale;\n\t\t\t\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phases[0] = phase / Config.chipNoiseLength;\n\t\ttone.sample = noiseSample;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\t\n\tprivate static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrument: Instrument): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\tlet wave: Float32Array = instrument.getDrumWave();\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] * (1 << 7);\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expressionStarts[0];\n\t\tconst expressionDelta: number = +tone.expressionDeltas[0];\n\t\tlet noiseSample: number = +tone.sample;\n\t\t\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\t\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n\t\tconst phaseMask: number = Config.spectrumNoiseLength - 1;\n\t\t\n\t\t// This is for a \"legacy\" style simplified 1st order lowpass filter with\n\t\t// a cutoff frequency that is relative to the tone's fundamental frequency.\n\t\tconst pitchRelativefilter: number = Math.min(1.0, phaseDelta);\n\t\t\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\tconst phaseInt: number = phase|0;\n\t\t\tconst index: number = phaseInt & phaseMask;\n\t\t\tlet waveSample: number = wave[index];\n\t\t\tconst phaseRatio: number = phase - phaseInt;\n\t\t\twaveSample += (wave[index + 1] - waveSample) * phaseRatio;\n\t\t\t\n\t\t\tnoiseSample += (waveSample - noiseSample) * pitchRelativefilter;\n\t\t\t\n\t\t\tconst inputSample: number = noiseSample;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\n\t\t\tphase += phaseDelta;\n\t\t\tphaseDelta *= phaseDeltaScale;\n\t\t\t\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phases[0] = phase / Config.spectrumNoiseLength;\n\t\ttone.sample = noiseSample;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\t\n\tprivate static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrument: Instrument): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\tlet wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch!);\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] / Instrument.drumsetIndexReferenceDelta(tone.drumsetPitch!);\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expressionStarts[0];\n\t\tconst expressionDelta: number = +tone.expressionDeltas[0];\n\t\t\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\t\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\n\t\tif (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n\t\tconst phaseMask: number = Config.spectrumNoiseLength - 1;\n\t\t\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\tconst phaseInt: number = phase|0;\n\t\t\tconst index: number = phaseInt & phaseMask;\n\t\t\tlet noiseSample: number = wave[index];\n\t\t\tconst phaseRatio: number = phase - phaseInt;\n\t\t\tnoiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\n\t\t\t\n\t\t\tconst inputSample: number = noiseSample;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\n\t\t\tphase += phaseDelta;\n\t\t\tphaseDelta *= phaseDeltaScale;\n\t\t\t\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phases[0] = phase / Config.spectrumNoiseLength;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\t\n\tprivate static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number {\n\t\tlet phase: number = Math.random() * waveLength;\n\t\tconst phaseMask: number = waveLength - 1;\n\t\t\n\t\t// Spectrum and drumset waves sounds best when they start at a zero crossing,\n\t\t// otherwise they pop. Try to find a zero crossing.\n\t\tlet indexPrev: number = phase & phaseMask;\n\t\tlet wavePrev: number = wave[indexPrev];\n\t\tconst stride: number = 16;\n\t\tfor (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\n\t\t\tconst indexNext: number = (indexPrev + stride) & phaseMask;\n\t\t\tconst waveNext: number = wave[indexNext];\n\t\t\tif (wavePrev * waveNext <= 0.0) {\n\t\t\t\t// Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\n\t\t\t\tfor (let i: number = 0; i < stride; i++) {\n\t\t\t\t\tconst innerIndexNext: number = (indexPrev + 1) & phaseMask;\n\t\t\t\t\tconst innerWaveNext: number = wave[innerIndexNext];\n\t\t\t\t\tif (wavePrev * innerWaveNext <= 0.0) {\n\t\t\t\t\t\t// Found the zero crossing again! Now let's find the exact intersection.\n\t\t\t\t\t\tconst slope: number = innerWaveNext - wavePrev;\n\t\t\t\t\t\tphase = indexPrev;\n\t\t\t\t\t\tif (Math.abs(slope) > 0.00000001) {\n\t\t\t\t\t\t\tphase += -wavePrev / slope;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tphase = Math.max(0, phase) % waveLength;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tindexPrev = innerIndexNext;\n\t\t\t\t\t\twavePrev = innerWaveNext;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tindexPrev = indexNext;\n\t\t\t\twavePrev = waveNext;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn phase;\n\t}\n\t\n\tpublic static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\n\t\treturn (instrumentVolume == Config.volumeRange - 1) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n\t}\n\tpublic static volumeMultToInstrumentVolume(volumeMult: number): number {\n\t\treturn (volumeMult <= 0.0) ? Config.volumeRange - 1 : Math.min(Config.volumeRange - 2, Math.log2(volumeMult) / Config.volumeLogScale);\n\t}\n\tpublic static noteSizeToVolumeMult(size: number): number {\n\t\treturn Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n\t}\n\tpublic static volumeMultToNoteSize(volumeMult: number): number {\n\t\treturn Math.pow(Math.max(0.0, volumeMult), 1/1.5) * Config.noteSizeMax;\n\t}\n\t\n\tpublic static fadeInSettingToSeconds(setting: number): number {\n\t\treturn 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n\t}\n\tpublic static secondsToFadeInSetting(seconds: number): number {\n\t\treturn clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n\t}\n\tpublic static fadeOutSettingToTicks(setting: number): number {\n\t\treturn Config.fadeOutTicks[setting];\n\t}\n\tpublic static ticksToFadeOutSetting(ticks: number): number {\n\t\tlet lower: number = Config.fadeOutTicks[0];\n\t\tif (ticks <= lower) return 0;\n\t\tfor (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\n\t\t\tlet upper: number = Config.fadeOutTicks[i];\n\t\t\tif (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\n\t\t\tlower = upper;\n\t\t}\n\t\treturn Config.fadeOutTicks.length - 1;\n\t}\n\t\n\tpublic static detuneToCents(detune: number): number {\n\t\treturn detune * (Math.abs(detune)+1) / 2;\n\t}\n\tpublic static centsToDetune(cents: number): number {\n\t\treturn Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\n\t}\n\t\n\tprivate getSamplesPerTick(): number {\n\t\tif (this.song == null) return 0;\n\t\tconst beatsPerMinute: number = this.song.getBeatsPerMinute();\n\t\tconst beatsPerSecond: number = beatsPerMinute / 60.0;\n\t\tconst partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\n\t\tconst tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\n\t\treturn this.samplesPerSecond / tickPerSecond;\n\t}\n\t\n\tpublic static fittingPowerOfTwo(x: number): number {\n\t\treturn 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n\t}\n\t\n\tprivate sanitizeFilters(filters: DynamicBiquadFilter[]): void {\n\t\tlet reset: boolean = false;\n\t\tfor (const filter of filters) {\n\t\t\tconst output1: number = Math.abs(filter.output1);\n\t\t\tconst output2: number = Math.abs(filter.output2);\n\t\t\t// If either is a large value, Infinity, or NaN, then just reset all filter history.\n\t\t\tif (!(output1 < 100) || !(output2 < 100)) {\n\t\t\t\treset = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (output1 < epsilon) filter.output1 = 0.0;\n\t\t\tif (output2 < epsilon) filter.output2 = 0.0;\n\t\t}\n\t\tif (reset) {\n\t\t\tfor (const filter of filters) {\n\t\t\t\tfilter.output1 = 0.0;\n\t\t\t\tfilter.output2 = 0.0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\n\t\twhile (true) {\n\t\t\tlastIndex--;\n\t\t\tconst index: number = lastIndex & mask;\n\t\t\tconst sample: number = Math.abs(delayLine[index]);\n\t\t\tif (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\n\t\t\tdelayLine[index] = 0.0;\n\t\t}\n\t}\n\t\n\tpublic static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\n\t\tfor (let i: number = 0; i < filterCount; i++) {\n\t\t\tconst filter: DynamicBiquadFilter = filters[i];\n\t\t\tconst output1: number = filter.output1;\n\t\t\tconst output2: number = filter.output2;\n\t\t\tconst a1: number = filter.a1;\n\t\t\tconst a2: number = filter.a2;\n\t\t\tconst b0: number = filter.b0;\n\t\t\tconst b1: number = filter.b1;\n\t\t\tconst b2: number = filter.b2;\n\t\t\tsample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n\t\t\tfilter.a1 = a1 + filter.a1Delta;\n\t\t\tfilter.a2 = a2 + filter.a2Delta;\n\t\t\tif (filter.useMultiplicativeInputCoefficients) {\n\t\t\t\tfilter.b0 = b0 * filter.b0Delta;\n\t\t\t\tfilter.b1 = b1 * filter.b1Delta;\n\t\t\t\tfilter.b2 = b2 * filter.b2Delta;\n\t\t\t} else {\n\t\t\t\tfilter.b0 = b0 + filter.b0Delta;\n\t\t\t\tfilter.b1 = b1 + filter.b1Delta;\n\t\t\t\tfilter.b2 = b2 + filter.b2Delta;\n\t\t\t}\n\t\t\tfilter.output2 = output1;\n\t\t\tfilter.output1 = sample;\n\t\t\t// Updating the input values is waste if the next filter doesn't exist...\n\t\t\tinput2 = output2;\n\t\t\tinput1 = output1;\n\t\t}\n\t\treturn sample;\n\t}\n}\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these imported classes as members to JavaScript:\nexport {Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config};\n","// Copyright (C) 2021 John Nesky, distributed under the MIT license.\n\nimport {Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config} from \"../synth/SynthConfig\";\nimport {ColorConfig} from \"../editor/ColorConfig\";\nimport {NotePin, Note, Pattern, Instrument, Channel, Synth} from \"../synth/synth\";\nimport {HTML, SVG} from \"imperative-html/dist/esm/elements-strict\";\n\nconst {a, button, div, h1, input} = HTML;\nconst {svg, circle, rect, path} = SVG;\n\ndocument.head.appendChild(HTML.style({type: \"text/css\"}, `\n\tbody {\n\t\tcolor: ${ColorConfig.primaryText};\n\t\tbackground: ${ColorConfig.editorBackground};\n\t}\n\th1 {\n\t\tfont-weight: bold;\n\t\tfont-size: 14px;\n\t\tline-height: 22px;\n\t\ttext-align: initial;\n\t\tmargin: 0;\n\t}\n\ta {\n\t\tfont-weight: bold;\n\t\tfont-size: 12px;\n\t\tline-height: 22px;\n\t\twhite-space: nowrap;\n\t\tcolor: ${ColorConfig.linkAccent};\n\t}\n\tbutton {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tposition: relative;\n\t\tborder: none;\n\t\tborder-radius: 5px;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t\tcolor: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t\tfont-size: 14px;\n\t\tfont-family: inherit;\n\t}\n\tbutton:hover, button:focus {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\t.playButton, .pauseButton {\n\t\tpadding-left: 24px;\n\t\tpadding-right: 6px;\n\t}\n\t.playButton::before {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t.pauseButton::before {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t\n\tinput[type=range] {\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t\theight: 16px;\n\t\tmargin: 0;\n\t\tcursor: pointer;\n\t\tbackground-color: ${ColorConfig.editorBackground};\n\t\ttouch-action: pan-y;\n\t}\n\tinput[type=range]:focus {\n\t\toutline: none;\n\t}\n\tinput[type=range]::-webkit-slider-runnable-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t}\n\tinput[type=range]::-webkit-slider-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t\t-webkit-appearance: none;\n\t\tmargin-top: -6px;\n\t}\n\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t}\n\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tborder: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t}\n\tinput[type=range]::-ms-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t\tborder-color: transparent;\n\t}\n\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-ms-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t}\n`));\n\nColorConfig.setTheme(\"dark classic\");\n\nlet prevHash: string | null = null;\nlet id: string = ((Math.random() * 0xffffffff) >>> 0).toString(16);\nlet pauseButtonDisplayed: boolean = false;\nlet animationRequest: number | null;\nlet zoomEnabled: boolean = false;\nlet timelineWidth: number = 1;\n\nconst synth: Synth = new Synth();\nlet titleText: HTMLHeadingElement = h1({style: \"flex-grow: 1; margin: 0 1px;\"}, \"\");\nlet editLink: HTMLAnchorElement = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"✎ Edit\");\nlet copyLink: HTMLAnchorElement = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"⎘ Copy URL\");\nlet shareLink: HTMLAnchorElement = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"⤳ Share\");\nlet fullscreenLink: HTMLAnchorElement = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"⇱ Fullscreen\");\n\nlet draggingPlayhead: boolean = false;\nconst playButton: HTMLButtonElement = button({style: \"width: 100%; height: 100%; max-height: 50px;\"});\nconst playButtonContainer: HTMLDivElement = div({style: \"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;\"},\n\tplayButton,\n);\nconst loopIcon: SVGPathElement = path({d: \"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z\"});\nconst loopButton: HTMLButtonElement = button({title: \"loop\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"}, svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\n\tloopIcon,\n));\n\nconst volumeIcon: SVGSVGElement = svg({style: \"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;\", viewBox: \"0 0 12 12\"},\n\tpath({fill: ColorConfig.uiWidgetBackground, d: \"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z\"}),\n);\nconst volumeSlider: HTMLInputElement = input({title: \"volume\", type: \"range\", value: 75, min: 0, max: 100, step: 1, style: \"width: 12vw; max-width: 100px; margin: 0 1px;\"});\n\nconst zoomIcon: SVGSVGElement = svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\n\tcircle({cx: \"5\", cy: \"5\", r: \"4.5\", \"stroke-width\": \"1\", stroke: \"currentColor\", fill: \"none\"}),\n\tpath({stroke: \"currentColor\", \"stroke-width\": \"2\", d: \"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5\", fill: \"none\"}),\n);\nconst zoomButton: HTMLButtonElement = button({title: \"zoom\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"},\n\tzoomIcon,\n);\n\nconst timeline: SVGSVGElement = svg({style: \"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;\"});\nconst playhead: HTMLDivElement = div({style: `position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${ColorConfig.playhead}; pointer-events: none;`});\nconst timelineContainer: HTMLDivElement = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;\"}, timeline, playhead);\nconst visualizationContainer: HTMLDivElement = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;\"}, timelineContainer);\n\ndocument.body.appendChild(visualizationContainer);\ndocument.body.appendChild(\n\tdiv({style: `flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;`},\n\t\tplayButtonContainer,\n\t\tloopButton,\n\t\tvolumeIcon,\n\t\tvolumeSlider,\n\t\tzoomButton,\n\t\ttitleText,\n\t\teditLink,\n\t\tcopyLink,\n\t\tshareLink,\n\t\tfullscreenLink,\n\t),\n);\n\nfunction loadSong(songString: string, reuseParams: boolean): void {\n\tsynth.setSong(songString);\n\tsynth.snapToStart();\n\tconst updatedSongString: string = synth.song!.toBase64String();\n\teditLink.href = \"../#\" + updatedSongString;\n\tconst hashQueryParams = new URLSearchParams(reuseParams ? location.hash.slice(1) : \"\");\n\thashQueryParams.set(\"song\", updatedSongString);\n\tlocation.hash = hashQueryParams.toString();\n}\n\nfunction hashUpdatedExternally(): void {\n\tlet myHash: string = location.hash;\n\tif (prevHash == myHash || myHash == \"\") return;\n\t\n\tprevHash = myHash;\n\t\n\tif (myHash.charAt(0) == \"#\") {\n\t\tmyHash = myHash.substring(1);\n\t}\n\t\n\t//titleText.textContent = \"\";\n\t\n\tfullscreenLink.href = location.href;\n\t\n\tfor (const parameter of myHash.split(\"&\")) {\n\t\tlet equalsIndex: number = parameter.indexOf(\"=\");\n\t\tif (equalsIndex != -1) {\n\t\t\tlet paramName: string = parameter.substring(0, equalsIndex);\n\t\t\tlet value: string = parameter.substring(equalsIndex + 1);\n\t\t\tswitch (paramName) {\n\t\t\t\tcase \"song\":\n\t\t\t\t\tloadSong(value, true);\n\t\t\t\t\tbreak;\n\t\t\t\t//case \"title\":\n\t\t\t\t//\ttitleText.textContent = decodeURIComponent(value);\n\t\t\t\t//\tbreak;\n\t\t\t\tcase \"loop\":\n\t\t\t\t\tsynth.loopRepeatCount = (value != \"1\") ? 0 : -1;\n\t\t\t\t\trenderLoopIcon();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tloadSong(myHash, false);\n\t\t}\n\t}\n\t\n\trenderTimeline();\n}\n\nfunction onWindowResize(): void {\n\trenderTimeline();\n}\n\nfunction animate(): void {\n\tif (synth.playing) {\n\t\tanimationRequest = requestAnimationFrame(animate);\n\t\tif (localStorage.getItem(\"playerId\") != id) {\n\t\t\tonTogglePlay();\n\t\t}\n\t\trenderPlayhead();\n\t}\n\t\n\tif (pauseButtonDisplayed != synth.playing) {\n\t\trenderPlayButton();\n\t}\n}\n\nfunction onTogglePlay(): void {\n\tif (synth.song != null) {\n\t\tif (animationRequest != null) cancelAnimationFrame(animationRequest);\n\t\tanimationRequest = null;\n\t\tif (synth.playing) {\n\t\t\tsynth.pause();\n\t\t} else {\n\t\t\tsynth.play();\n\t\t\tlocalStorage.setItem(\"playerId\", id);\n\t\t\tanimate();\n\t\t}\n\t}\n\trenderPlayButton();\n}\n\nfunction onToggleLoop(): void {\n\tif (synth.loopRepeatCount == -1) {\n\t\tsynth.loopRepeatCount = 0;\n\t} else {\n\t\tsynth.loopRepeatCount = -1;\n\t}\n\trenderLoopIcon();\n}\n\nfunction onVolumeChange(): void {\n\tlocalStorage.setItem(\"volume\", volumeSlider.value);\n\tsetSynthVolume();\n}\n\nfunction onToggleZoom(): void {\n\tzoomEnabled = !zoomEnabled;\n\trenderZoomIcon();\n\trenderTimeline();\n}\n\nfunction onTimelineMouseDown(event: MouseEvent): void {\n\tdraggingPlayhead = true;\n\tonTimelineMouseMove(event);\n}\n\nfunction onTimelineMouseMove(event: MouseEvent): void {\n\tevent.preventDefault();\n\tonTimelineCursorMove(event.clientX || event.pageX);\n}\n\nfunction onTimelineTouchDown(event: TouchEvent): void {\n\tdraggingPlayhead = true;\n\tonTimelineTouchMove(event);\n}\n\nfunction onTimelineTouchMove(event: TouchEvent): void {\n\tonTimelineCursorMove(event.touches[0].clientX);\n}\n\nfunction onTimelineCursorMove(mouseX: number): void {\n\tif (draggingPlayhead && synth.song != null) {\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\n\t\tsynth.playhead = synth.song.barCount * (mouseX - boundingRect.left) / (boundingRect.right - boundingRect.left);\n\t\trenderPlayhead();\n\t}\n}\n\nfunction onTimelineCursorUp(): void {\n\tdraggingPlayhead = false;\n}\n\nfunction setSynthVolume(): void {\n\tconst volume: number = +volumeSlider.value;\n\tsynth.volume = Math.min(1.0, Math.pow(volume / 50.0, 0.5)) * Math.pow(2.0, (volume - 75.0) / 25.0);\n}\n\nfunction renderPlayhead(): void {\n\tif (synth.song != null) {\n\t\tlet pos: number = synth.playhead / synth.song.barCount;\n\t\tplayhead.style.left = (timelineWidth * pos) + \"px\";\n\t\t\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\n\t\tvisualizationContainer.scrollLeft = pos * (timelineWidth - boundingRect.width);\n\t}\n}\n\nfunction renderTimeline(): void {\n\ttimeline.innerHTML = \"\";\n\tif (synth.song == null) return;\n\t\n\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\n\t\n\tlet timelineHeight: number;\n\tlet windowOctaves: number;\n\tlet windowPitchCount: number;\n\t\n\tif (zoomEnabled) {\n\t\ttimelineHeight = boundingRect.height;\n\t\twindowOctaves = Math.max(1, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * 2))));\n\t\twindowPitchCount = windowOctaves * 12 + 1;\n\t\tconst semitoneHeight: number = (timelineHeight - 1) / windowPitchCount;\n\t\tconst targetBeatWidth: number = Math.max(8, semitoneHeight * 4);\n\t\ttimelineWidth = Math.max(boundingRect.width, targetBeatWidth * synth.song.barCount * synth.song.beatsPerBar);\n\t} else {\n\t\ttimelineWidth = boundingRect.width;\n\t\tconst targetSemitoneHeight: number = Math.max(1, timelineWidth / (synth.song.barCount * synth.song.beatsPerBar) / 3);\n\t\ttimelineHeight = Math.min(boundingRect.height, targetSemitoneHeight * (Config.maxPitch + 1) + 1);\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * targetSemitoneHeight))));\n\t\twindowPitchCount = windowOctaves * 12 + 1;\n\t}\n\t\n\ttimelineContainer.style.width = timelineWidth + \"px\";\n\ttimelineContainer.style.height = timelineHeight + \"px\";\n\ttimeline.style.width = timelineWidth + \"px\";\n\ttimeline.style.height = timelineHeight + \"px\";\n\t\n\tconst barWidth: number = timelineWidth / synth.song.barCount;\n\tconst partWidth: number = barWidth / (synth.song.beatsPerBar * Config.partsPerBeat);\n\tconst wavePitchHeight: number = (timelineHeight-1) / windowPitchCount;\n\tconst drumPitchHeight: number =  (timelineHeight-1) / Config.drumCount;\n\t\n\tfor (let bar: number = 0; bar < synth.song.barCount + 1; bar++) {\n\t\tconst color: string = (bar == synth.song.loopStart || bar == synth.song.loopStart + synth.song.loopLength) ? ColorConfig.loopAccent : ColorConfig.uiWidgetBackground;\n\t\ttimeline.appendChild(rect({x: bar * barWidth - 1, y: 0, width: 2, height: timelineHeight, fill: color}));\n\t}\n\t\n\tfor (let octave: number = 0; octave <= windowOctaves; octave++) {\n\t\ttimeline.appendChild(rect({x: 0, y: octave * 12 * wavePitchHeight, width: timelineWidth, height: wavePitchHeight + 1, fill: ColorConfig.tonic, opacity: 0.75}));\n\t}\n\t\n\tfor (let channel: number = synth.song.channels.length - 1; channel >= 0; channel--) {\n\t\tconst isNoise: boolean = synth.song.getChannelIsNoise(channel);\n\t\tconst pitchHeight: number = isNoise ? drumPitchHeight : wavePitchHeight;\n\t\t\n\t\tconst configuredOctaveScroll: number = synth.song.channels[channel].octave;\n\t\tconst newOctaveScroll: number = Math.max(0, Math.min(Config.pitchOctaves - windowOctaves, Math.ceil(configuredOctaveScroll - windowOctaves * 0.5)));\n\t\t\n\t\tconst offsetY: number = newOctaveScroll * pitchHeight * 12 + timelineHeight - pitchHeight * 0.5 - 0.5;\n\t\t\n\t\tfor (let bar: number = 0; bar < synth.song.barCount; bar++) {\n\t\t\tconst pattern: Pattern | null = synth.song.getPattern(channel, bar);\n\t\t\tif (pattern == null) continue;\n\t\t\tconst offsetX: number = bar * barWidth;\n\t\t\t\n\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\n\t\t\t\tconst note: Note = pattern.notes[i];\n\t\t\t\t\n\t\t\t\tfor (const pitch of note.pitches) {\n\t\t\t\t\tconst d: string = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\n\t\t\t\t\tconst noteElement: SVGPathElement = path({d: d, fill: ColorConfig.getChannelColor(synth.song, channel).primaryChannel});\n\t\t\t\t\tif (isNoise) noteElement.style.opacity = String(0.6);\n\t\t\t\t\ttimeline.appendChild(noteElement);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\trenderPlayhead();\n}\n\nfunction drawNote(pitch: number, start: number, pins: NotePin[], radius: number, offsetX: number, offsetY: number, partWidth: number, pitchHeight: number): string {\n\tlet d: string = `M ${offsetX + partWidth * (start + pins[0].time)} ${offsetY - pitch * pitchHeight + radius * (pins[0].size / Config.noteSizeMax)} `; \n\tfor (let i: number = 0; i < pins.length; i++) {\n\t\tconst pin: NotePin = pins[i];\n\t\tconst x:   number = offsetX + partWidth * (start + pin.time);\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\n\t\tconst expression: number = pin.size / Config.noteSizeMax;\n\t\td += `L ${x} ${y - radius * expression} `;\n\t}\n\tfor (let i: number = pins.length - 1; i >= 0; i--) {\n\t\tconst pin: NotePin = pins[i];\n\t\tconst x:   number = offsetX + partWidth * (start + pin.time);\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\n\t\tconst expression: number = pin.size / Config.noteSizeMax;\n\t\td += `L ${x} ${y + radius * expression} `;\n\t}\n\treturn d;\n}\n\nfunction renderPlayButton(): void {\n\tif (synth.playing) {\n\t\tplayButton.classList.remove(\"playButton\");\n\t\tplayButton.classList.add(\"pauseButton\");\n\t\tplayButton.title = \"Pause (Space)\";\n\t\tplayButton.textContent = \"Pause\";\n\t} else {\n\t\tplayButton.classList.remove(\"pauseButton\");\n\t\tplayButton.classList.add(\"playButton\");\n\t\tplayButton.title = \"Play (Space)\";\n\t\tplayButton.textContent = \"Play\";\n\t}\n\tpauseButtonDisplayed = synth.playing;\n}\n\nfunction renderLoopIcon(): void {\n\tloopIcon.setAttribute(\"fill\", (synth.loopRepeatCount == -1) ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground);\n}\n\nfunction renderZoomIcon(): void {\n\tzoomIcon.style.color = zoomEnabled ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground;\n}\n\nfunction onKeyPressed(event: KeyboardEvent): void {\n\tswitch (event.keyCode) {\n\t\tcase 32: // space\n\t\t\tonTogglePlay();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 219: // left brace\n\t\t\tsynth.goToPrevBar();\n\t\t\trenderPlayhead();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 221: // right brace\n\t\t\tsynth.goToNextBar();\n\t\t\trenderPlayhead();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t}\n}\n\nfunction onCopyClicked(): void {\n\tif (navigator.clipboard && navigator.clipboard.writeText) {\n\t\tnavigator.clipboard.writeText(location.href).catch(()=>{\n\t\t\twindow.prompt(\"Copy to clipboard:\", location.href);\n\t\t});\n\t\treturn;\n\t}\n\tconst textField: HTMLTextAreaElement = document.createElement(\"textarea\");\n\ttextField.textContent = location.href;\n\tdocument.body.appendChild(textField);\n\ttextField.select();\n\tconst succeeded: boolean = document.execCommand(\"copy\");\n\ttextField.remove();\n\tif (!succeeded) window.prompt(\"Copy this:\", location.href);\n}\n\nfunction onShareClicked(): void {\n\t(<any>navigator).share({ url: location.href });\n}\n\nif ( top !== self ) {\n\t// In an iframe.\n\tcopyLink.style.display = \"none\";\n\tshareLink.style.display = \"none\";\n} else {\n\t// Fullscreen.\n\tfullscreenLink.style.display = \"none\";\n\tif (!(\"share\" in navigator)) shareLink.style.display = \"none\";\n}\n\nif (localStorage.getItem(\"volume\") != null) {\n\tvolumeSlider.value = localStorage.getItem(\"volume\")!;\n}\nsetSynthVolume();\n\nwindow.addEventListener(\"resize\", onWindowResize);\nwindow.addEventListener(\"keydown\", onKeyPressed);\n\ntimeline.addEventListener(\"mousedown\", onTimelineMouseDown);\nwindow.addEventListener(\"mousemove\", onTimelineMouseMove);\nwindow.addEventListener(\"mouseup\", onTimelineCursorUp);\ntimeline.addEventListener(\"touchstart\", onTimelineTouchDown);\ntimeline.addEventListener(\"touchmove\", onTimelineTouchMove);\ntimeline.addEventListener(\"touchend\", onTimelineCursorUp);\ntimeline.addEventListener(\"touchcancel\", onTimelineCursorUp);\n\nplayButton.addEventListener(\"click\", onTogglePlay);\nloopButton.addEventListener(\"click\", onToggleLoop);\nvolumeSlider.addEventListener(\"input\", onVolumeChange);\nzoomButton.addEventListener(\"click\", onToggleZoom);\ncopyLink.addEventListener(\"click\", onCopyClicked);\nshareLink.addEventListener(\"click\", onShareClicked);\nwindow.addEventListener(\"hashchange\", hashUpdatedExternally);\n\nhashUpdatedExternally();\nrenderLoopIcon();\nrenderZoomIcon();\nrenderPlayButton();\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\nexport {Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, NotePin, Note, Pattern, Instrument, Channel, Synth};\n"]}