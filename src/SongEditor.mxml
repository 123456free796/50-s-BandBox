<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:s="library://ns.adobe.com/flex/spark"
           xmlns="*"
           width="512"
           height="670"
           backgroundColor="0x000000"
           creationComplete="init()"
           addedToStage="onAddedToStage()">
	<mx:Script><![CDATA[
		import flash.display.*;
		import flash.events.*;
		import flash.geom.*;
		import flash.media.*;
		import flash.text.*;
		import flash.ui.*;
		import flash.utils.*;
		
		import mx.collections.ArrayCollection;
		
		[Bindable]
		public var doc: Document;
		
		[Bindable]
		private var scaleNames: ArrayCollection;
		[Bindable]
		private var keyNames: ArrayCollection;
		[Bindable]
		private var tempoNames: ArrayCollection;
		[Bindable]
		private var beatNames: ArrayCollection;
		[Bindable]
		private var partNames: ArrayCollection;
		[Bindable]
		private var waveNames: ArrayCollection;
		
		public function init():void {
			scaleNames = new ArrayCollection(Music.scaleNames);
			keyNames = new ArrayCollection(Music.keyNames);
			tempoNames = new ArrayCollection(Music.tempoNames);
			beatNames = new ArrayCollection(Music.beatNames);
			partNames = new ArrayCollection(Music.partNames);
			waveNames = new ArrayCollection(Music.waveNames);
			doc.watch(onUpdated);
			onUpdated();
		}
		
		private function onUpdated(): void {
			scaleDropDown.selectedIndex = doc.scale;
			keyDropDown.selectedIndex = doc.key;
			tempoDropDown.selectedIndex = doc.tempo;
			beatDropDown.selectedIndex = Music.beatCounts.indexOf(doc.beats);
			partDropDown.selectedIndex = Music.partCounts.indexOf(doc.parts);
			waveDropDown.selectedIndex = doc.channelWaves[doc.channel];
		}
		
		private function onAddedToStage(): void {
			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPressed);
			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyReleased);
		}
		
		private function onKeyPressed(event: KeyboardEvent): void {
			//if (event.ctrlKey)
			switch (event.keyCode) {
				case 32: // space
					togglePlay();
					break;
				case 219: // left brace
					doc.synth.bar--;
					if (doc.synth.bar < 0) doc.synth.bar = Music.numBars - 1;
					break;
				case 221: // right brace
					doc.synth.bar++;
					if (doc.synth.bar == Music.numBars) doc.synth.bar = 0;
					break;
			}
		}
		
		private function onKeyReleased(event: KeyboardEvent): void {
		}
		
		private function togglePlay(): void {
			if (doc.synth.paused) {
				doc.synth.paused = false;
				playButton.label = "pause";
			} else {
				doc.synth.paused = true;
				doc.synth.playhead = 0.0;
				doc.synth.beat = 0;
				doc.synth.part = 0;
				doc.synth.arpeggio = 0;
				doc.synth.arpeggioSamples = 0;
				playButton.label = "play";
			}
		}
		
		private function onSetScale(): void {
			var scale: int = scaleDropDown.selectedIndex;
			//if (doc.history.getRecentChange() is ChangeScale) doc.history.undo();
			doc.history.record(new ChangeScale(doc, scale));
		}
		
		private function onSetKey(): void {
			var key: int = keyDropDown.selectedIndex;
			//if (doc.history.getRecentChange() is ChangeKey) doc.history.undo();
			doc.history.record(new ChangeKey(doc, key));
		}
		
		private function onSetTempo(): void {
			var tempo: int = tempoDropDown.selectedIndex;
			//if (doc.history.getRecentChange() is ChangeTempo) doc.history.undo();
			doc.history.record(new ChangeTempo(doc, tempo));
		}
		
		private function onSetBeats(): void {
			var beats: int = Music.beatCounts[beatDropDown.selectedIndex];
			//if (doc.history.getRecentChange() is ChangeBeats) doc.history.undo();
			doc.history.record(new ChangeBeats(doc, beats));
		}
		
		private function onSetParts(): void {
			var parts: int = Music.partCounts[partDropDown.selectedIndex];
			//if (doc.history.getRecentChange() is ChangeParts) doc.history.undo();
			doc.history.record(new ChangeParts(doc, parts));
		}
		
		private function onSetWave(): void {
			var wave: int = waveDropDown.selectedIndex;
			//if (doc.history.getRecentChange() is ChangeWave) doc.history.undo();
			doc.history.record(new ChangeWave(doc, wave));
		}
	]]></mx:Script>
	
	<s:VGroup width="100%">
		<s:HGroup width="100%">
			<s:Button id="playButton" label="pause" click="togglePlay()" width="60"/>
			<s:DropDownList id="scaleDropDown" dataProvider="{scaleNames}" width="85" change="onSetScale()" close="stage.focus = stage">
				<s:layout> <s:VerticalLayout requestedRowCount="{scaleNames.length}" horizontalAlign="justify"/> </s:layout>
			</s:DropDownList>
			<s:DropDownList id="keyDropDown" dataProvider="{keyNames}" width="55" change="onSetKey()" close="stage.focus = stage">
				<s:layout> <s:VerticalLayout requestedRowCount="{keyNames.length}" horizontalAlign="justify"/> </s:layout>
			</s:DropDownList>
			<s:DropDownList id="tempoDropDown" dataProvider="{tempoNames}" width="75" change="onSetTempo()" close="stage.focus = stage">
				<s:layout> <s:VerticalLayout requestedRowCount="{tempoNames.length}" horizontalAlign="justify"/> </s:layout>
			</s:DropDownList>
			<s:DropDownList id="beatDropDown" dataProvider="{beatNames}" width="80" change="onSetBeats()" close="stage.focus = stage">
				<s:layout> <s:VerticalLayout requestedRowCount="{beatNames.length}" horizontalAlign="justify"/> </s:layout>
			</s:DropDownList>
			<s:DropDownList id="partDropDown" dataProvider="{partNames}" width="75" change="onSetParts()" close="stage.focus = stage">
				<s:layout> <s:VerticalLayout requestedRowCount="{partNames.length}" horizontalAlign="justify"/> </s:layout>
			</s:DropDownList>
		</s:HGroup>
		<LoopEditor doc="{doc}"/>
		<TrackEditor doc="{doc}"/>
		<s:HGroup width="100%">
			<s:DropDownList id="waveDropDown" dataProvider="{waveNames}" width="110" change="onSetWave()" close="stage.focus = stage">
				<s:layout> <s:VerticalLayout requestedRowCount="{waveNames.length}" horizontalAlign="justify"/> </s:layout>
			</s:DropDownList>
		</s:HGroup>
		<BarEditor doc="{doc}" bottom="0"/>
	</s:VGroup>
</mx:Canvas>
